<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AT2657 - Mole and Abandoned Mine</title>
      <link href="/2019-04/22-luoguat2657/"/>
      <url>/2019-04/22-luoguat2657/</url>
      
        <content type="html"><![CDATA[<p>题目链接1: <a href="https://www.luogu.org/problemnew/show/AT2657" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/AT2657</a><br>题目链接2: <a href="https://www.luogu.org/jump/atcoder/2657" target="_blank" rel="noopener">https://www.luogu.org/jump/atcoder/2657</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>时隔一月, 我又回来了写题解了. </p><p>以后可能颓的时间会变少. 现在文化课好像更重要些, 还是要专心学习吧. </p><p>本题是一个状压练手好题.</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我再大致翻译描述一下题目, 我一开始因为没看样例就理解错了.</p><p>本题给出N点M边的无向图, 然后要割掉其中一些边, 使从1到N只有一条不经过重复顶点的边, 求删掉的边的边权和最小.</p><blockquote><p>重点是这条路径不需要经过所有点</p></blockquote><p>看数据范围, 只可能是状压或者暴力搜索, 然而难度说明只能是状压了.</p><p>很容易想到, 求删边边权最少, 相当于求留下边的边权和最大.</p><p>然而我没有想到具体怎么求, 搜到了一个<a href="https://www.cnblogs.com/lcxer/p/10719030.html" target="_blank" rel="noopener">大佬的题解</a>, 最终的图还有一个重要性质:</p><blockquote><p>每个点最多只与保留下来的那条路径上的一个点有边相连</p></blockquote><p>所以我们先预处理出所有的联通块中的边权和.</p><p>然后进行DP, 二维数组, 第一维为处理了哪些点, 第二维为到达哪个点(当前终点).</p><p>有两种转移, 一种是新处理一个点, 一种是将一个联通块与当前终点相连.</p><p>我从这道题还学习了一个新的二进制性质.枚举一个数二进制下的所有子集:</p><pre><code>int num = 59; // 某个数for(int i= num; i; i= (i - 1) &amp; num) {    // i 为 num 的一个二进制子集}</code></pre><p>比如（0101）的子集为（0101）,（0100）,（0001）,（0000）.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmpx<span class="token punctuation">,</span> tmpy<span class="token punctuation">,</span> tmpz<span class="token punctuation">,</span> sums<span class="token punctuation">;</span><span class="token keyword">int</span> blocks<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    nn<span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> tmpx <span class="token operator">>></span> tmpy <span class="token operator">>></span> tmpz<span class="token punctuation">;</span>        sums<span class="token operator">+</span><span class="token operator">=</span> edge<span class="token punctuation">[</span>tmpx<span class="token punctuation">]</span><span class="token punctuation">[</span>tmpy<span class="token punctuation">]</span><span class="token operator">=</span> edge<span class="token punctuation">[</span>tmpy<span class="token punctuation">]</span><span class="token punctuation">[</span>tmpx<span class="token punctuation">]</span><span class="token operator">=</span> tmpz<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nn<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>blocks<span class="token punctuation">[</span>i <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                blocks<span class="token punctuation">[</span>i <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span> blocks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> blocks<span class="token punctuation">[</span>i <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span> edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nn<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tmpx<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nn <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> i<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span> tmpx<span class="token punctuation">;</span> k<span class="token punctuation">;</span> k<span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> tmpx<span class="token punctuation">)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i <span class="token operator">|</span> k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">|</span> k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> blocks<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> sums <span class="token operator">-</span> f<span class="token punctuation">[</span>nn <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 状压DP </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2015 - 程序自动分析</title>
      <link href="/2019-03/31-luogu1955/"/>
      <url>/2019-03/31-luogu1955/</url>
      
        <content type="html"><![CDATA[<p>题目链接1: <a href="https://www.luogu.org/problemnew/show/P1955" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1955</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4195" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4195</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>最近变得越来越颓废. 介于好长时间没更新博客, 强行水一篇题解.</p><p>这道题没看题解15分钟就A了, 真的有点水了…</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题意大概就是有 N 个关系, 每个代表X1 = X2 或者 X1 ≠ X2, 求出这些关系能不能成立.</p><p>很容易就想到并查集, 先将相等的X合并, 然后判断不等关系的两个变量在不在一个并查集里就行了.那么就只需要排下序, 先进行合并操作再去判断.</p><p>判断不等关系过程中发现X1和X2在同一个并查集里, 那直接输出NO就行了.</p><p>然而X的下标可能会很大. 所以考虑离散化, 那么肯定直接上map.</p><p>输入的时候就离散化, 然后排个序, 打完合并和查询就AC了.</p><p>不过map常数巨大, 需要开O2稳过.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>评测详情（O2）:<br>Accepted  100<br>用时: 1623ms / 内存: 11960KB</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">200001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mptr<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> flag<span class="token punctuation">;</span><span class="token keyword">struct</span> date <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> d<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> date <span class="token operator">&amp;</span>d2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> d <span class="token operator">></span> d2<span class="token punctuation">.</span>d<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> dat<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>map<span class="token operator">&lt;</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">></span> m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        mptr<span class="token operator">=</span> cnt<span class="token operator">=</span> flag<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> m<span class="token punctuation">[</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">++</span>mptr<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> m<span class="token punctuation">[</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">++</span>mptr<span class="token punctuation">;</span>            dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span> m<span class="token punctuation">[</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span> m<span class="token punctuation">[</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>            cnt<span class="token operator">+</span><span class="token operator">=</span> dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>dat <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dat <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> mptr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> fx<span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span><span class="token function">query</span><span class="token punctuation">(</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span> fx<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">query</span><span class="token punctuation">(</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 并查集 </tag>
            
            <tag> STL </tag>
            
            <tag> 离散化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2005 - 智慧珠游戏</title>
      <link href="/2019-03/17-luogu4205/"/>
      <url>/2019-03/17-luogu4205/</url>
      
        <content type="html"><![CDATA[<p>题目链接1: <a href="https://www.luogu.org/problemnew/show/P4205" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4205</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1501" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=1501</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>最近忙于各种事, 又有十天没写题解了, 好像这十天又变颓废了好多</p><p>实在学习不下去很酷很炫的算法, 特意找搜索模拟等类题, 然后看到了这道题</p><p>做题的时候教练还在说:”不要看不起搜索…”</p><p>然后因为看我做这道题, 旁边的大佬还作了一首诗</p><pre><code>生命诚可贵搜索价更高若为暴力故二者皆可抛    --Steve_Braveman</code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我就直接把题目描述的图搬过来了</p><p><img src="https://www.lydsy.com/JudgeOnline/images/1501_1.jpg" alt="题目描述"></p><p>一眼看上去就直接劝退, 当然其实也没那么严重, 好像还是可做的</p><p>具体分析一下这道题, 所有的零件都允许旋转和翻转, 那么每种零件都有多种放置的方法</p><p>所以我们就可以画一下不同的方法, 可以在草稿纸上或者上画图</p><p>为了区别什么是不同的摆放方法, 就要确定搜索的方式, 我们枚举每一个点, 如果这个点当前没有被覆盖过, 那么我们就可以选择当前剩余的零件进行判断.</p><p>我选择零件最左上角的那个珠子来填当前这个点, 因此有这些种不同的摆放方式</p><pre><code>A: 4种B: 2种C: 8种D: 1种E: 4种F: 8种G: 4种H: 8种I: 8种J: 1种K: 4种L: 8种</code></pre><p>加起来的确有很多种, 然后就开始写DFS了.</p><p>我写的还是比较暴力的, 暴力模拟, 只做了一些小的技巧.</p><p>在某次DFS种, 第一次判断某条件时就把他以一个变量存起来, 起一个较为直观的变量名, 然后等下次判断就可以直接判断这个变量了.</p><p>写的时候得有耐心, 确实是有想死的感觉.</p><p>写完后, 你还是AC不了这道题, 会有一个点TLE. </p><p>这个点是No solution…我先选择了卡时限, 到0.95s之后就输出无解</p><p>但是事实证明不可行, 因为clock函数效率不高, 许多点的耗时飙升, 并导致另一个本来有解的却输出了无解…</p><p>然后就考虑卡DFS次数, 我在本地试了一下, 10000000就不会错判无解了, 然后提交AC了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>注释中A1代表A零件的第1种摆放方法, 以此类推</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> chose<span class="token punctuation">[</span><span class="token number">126</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span><span class="token keyword">char</span> tmc<span class="token punctuation">,</span> inits<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">getlimit</span><span class="token punctuation">(</span><span class="token keyword">int</span> nowx<span class="token punctuation">,</span> <span class="token keyword">int</span> nowy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> nowx <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nowx <span class="token operator">&lt;</span> <span class="token number">11</span> <span class="token operator">&amp;&amp;</span> nowy <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nowy <span class="token operator">&lt;</span> nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> nowx<span class="token punctuation">,</span> <span class="token keyword">int</span> nowy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>cnt <span class="token operator">></span> <span class="token number">10000000</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nowx <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nowy <span class="token operator">==</span> nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rdown<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> down<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nowy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dleft<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// A1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// A2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// A3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// A4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ddown<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> nowy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dddown<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> nowy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rright<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rrright<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// B1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// B2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> rrright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> rddown<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dlleft<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> drright<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ddleft<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// C1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> down<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// C2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> rddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// C3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> dlleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// C4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> rddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// C5</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// C6</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> ddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// C7</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> drright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// C8</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> ddleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'D'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// D1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> rdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'D'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'D'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'D'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ddrright<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ddlleft<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// E1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> rddown <span class="token operator">&amp;&amp;</span> ddrright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// E2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> ddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// E3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> drright <span class="token operator">&amp;&amp;</span> ddrright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// E4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> ddleft <span class="token operator">&amp;&amp;</span> ddlleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// F1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> rrright <span class="token operator">&amp;&amp;</span> rdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// F2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dddown <span class="token operator">&amp;&amp;</span> dleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// F3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> dlleft <span class="token operator">&amp;&amp;</span> rdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// F4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dddown <span class="token operator">&amp;&amp;</span> rddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// F5</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// F6</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> ddleft <span class="token operator">&amp;&amp;</span> dddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// F7</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> drright <span class="token operator">&amp;&amp;</span> rrright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// F8</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'G'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// G1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> drright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// G2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> rddown <span class="token operator">&amp;&amp;</span> ddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// G3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright <span class="token operator">&amp;&amp;</span> rright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// G4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> rddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'G'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'H'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'H'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// H1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> rdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// H2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> rddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// H3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> dleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// H4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> rddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// H5</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// H6</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> ddleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// H7</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// H8</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> rdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'H'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> rrdright<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ddldown<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> drddown<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'I'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'I'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// I1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> drright <span class="token operator">&amp;&amp;</span> rrdright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// I2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> ddleft <span class="token operator">&amp;&amp;</span> ddldown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// I3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright <span class="token operator">&amp;&amp;</span> rrdright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// I4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> ddleft <span class="token operator">&amp;&amp;</span> ddldown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// I5</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> dlleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// I6</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> rddown <span class="token operator">&amp;&amp;</span> drddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// I7</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> dleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// I8</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> rddown <span class="token operator">&amp;&amp;</span> drddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'I'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'J'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'J'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'J'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// J1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> ddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'J'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'J'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'J'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'J'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'J'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'K'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'K'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// K1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> rddown <span class="token operator">&amp;&amp;</span> ddrright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// K2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> ddleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// K3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright <span class="token operator">&amp;&amp;</span> ddrright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// K4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> ddleft <span class="token operator">&amp;&amp;</span> ddlleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'K'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> dllleft<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nowy <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'L'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'L'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// L1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> rrright <span class="token operator">&amp;&amp;</span> down<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// L2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> rddown <span class="token operator">&amp;&amp;</span> drddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// L3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> dlleft <span class="token operator">&amp;&amp;</span> dllleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// L4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dddown <span class="token operator">&amp;&amp;</span> drddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// L5</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright <span class="token operator">&amp;&amp;</span> rrdright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// L6</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dddown <span class="token operator">&amp;&amp;</span> ddldown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// L7</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> rrright <span class="token operator">&amp;&amp;</span> rrdright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// L8</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'L'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">>></span> inits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>inits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> chose<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>inits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span>inits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No solution\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USACO17DEC - Haybale Feast</title>
      <link href="/2019-03/07-luogu4085/"/>
      <url>/2019-03/07-luogu4085/</url>
      
        <content type="html"><![CDATA[<p>题目链接: <a href="https://www.luogu.org/problemnew/show/P4085" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4085</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>好像教练说要考线段树和树状数组, 然后看到了这个题</p><p>这道题可以练习各种数据结构的基础操作…</p><p>我就浪费了大把时间用各种算法来A这道题</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先看这个 $ \sum_{k=i}^{j} F_k \geqslant M $ </p><p>这个一眼看上去就是前缀和了.静态的话直接普通的前缀和$ O(n) $ 预处理, $ O(1) $ 查询就行了,应该是时间复杂度最低的了.</p><p>至于这个 $ max(S_i,S_{i+1},…,S_{j-1},S_j) $</p><p>维护方法就比较多了,可以用线段树,分块,ST表,我没有写树状数组,因为太麻烦了.</p><p>然后我就浪费了好多时间来用不同的算法A这道题…</p><p>这道题还有一个性质, 关于找i和j, 不需要 $ O(n^2) $ 的复杂度来枚举区间, 我给出下面这个式子</p><p>$$ max(s_i, s_{i + 1}, s_{i + 2}) &lt;=  max(s_i, s_{i + 1}, s_{i + 2}, s_{i + 3}) $$</p><p>这个式子根本不用推, 一眼看上去肯定就成立了</p><p>那么根据这个性质, 我们枚举i的值, 只需要找到一个对应的j就行了,这个j一定是满足条件且最小的那个了</p><p>满足条件只需要</p><p>$$ Sumf_j - sumf_i &gt;= m $$</p><p>注: Sumf代表f数组的前缀和</p><p>那么我们可以用 $ O(logn) $ 的复杂度二分查询这个j了</p><p>我们其实不需要自己写二分查找,根据上面的不等式,移一下项,就变成了</p><p>$$ Sumf_j  &gt;= m + sumf_i $$</p><p>然后使用STL自带的lower_bound函数就可以了</p><p>维护区间最大值我建议写ST表, 毕竟静态查询时间复杂度 $ O(1) $, 你也可以写其他的, 我竟然写了三种数据结构.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>这个代码是线段树 + 前缀和, 评测详情 418ms / 6MB </p><p>ST_Table为ST表的代码, 评测详情 328ms / 9.53MB </p><p>Sqrt为分块,实在没找到英文名, 评测详情 1049ms / 7.65MB </p><p>m 和 前缀和要开long long, 其他的可以用int, 懒得话就全部 long long 吧</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll m<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">maxi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">mini</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> PrefixSum <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// prefixsum for f</span>ll sumf<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> sumf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> sumf<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace PrefixSum</span><span class="token keyword">namespace</span> ST_Table <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// ST_Table for s</span><span class="token keyword">int</span> maxs<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _log2<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> maxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> _log2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> _log2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>_log2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> maxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>maxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxs<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> __log2<span class="token operator">=</span> _log2<span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">maxi</span><span class="token punctuation">(</span>maxs<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>__log2<span class="token punctuation">]</span><span class="token punctuation">,</span> maxs<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> __log2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>__log2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace ST_Table</span><span class="token keyword">namespace</span> Sqrt <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// Sqrt for s</span><span class="token keyword">int</span> blocks<span class="token punctuation">,</span> maxs<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> block<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bl<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> br<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    blocks<span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span> n <span class="token operator">/</span> blocks <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> blocks <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> block<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> blocks <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> blocks <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> br<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> i <span class="token operator">*</span> blocks<span class="token punctuation">;</span>    br<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">mini</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> br<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> br<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> maxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>maxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span> block<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span> block<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> maxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> br<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace Sqrt</span><span class="token keyword">namespace</span> SegmentTree <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// SegmentTree for s</span><span class="token keyword">int</span> maxs<span class="token punctuation">[</span><span class="token number">100001</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxs<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>nown <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>nown <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    maxs<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>maxs<span class="token punctuation">[</span>nown <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxs<span class="token punctuation">[</span>nown <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ml<span class="token punctuation">,</span> <span class="token keyword">int</span> mr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ml <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> mr<span class="token punctuation">)</span> <span class="token keyword">return</span> maxs<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> ml<span class="token punctuation">)</span> ans<span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>nown <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ml<span class="token punctuation">,</span> mr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> mr<span class="token punctuation">)</span> ans<span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>nown <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ml<span class="token punctuation">,</span> mr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace SegmentTree</span><span class="token keyword">int</span> ans<span class="token operator">=</span> <span class="token number">0x7f7f7f7f</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> f <span class="token operator">+</span> i<span class="token punctuation">,</span> s <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    PrefixSum<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SegmentTree<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ll r<span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>PrefixSum<span class="token operator">::</span>sumf <span class="token operator">+</span> i<span class="token punctuation">,</span> PrefixSum<span class="token operator">::</span>sumf <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> PrefixSum<span class="token operator">::</span>sumf<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> PrefixSum<span class="token operator">::</span>sumf<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">!=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">=</span> <span class="token function">mini</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> SegmentTree<span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> ST表 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 分块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2009 - Hankson 的趣味题</title>
      <link href="/2019-03/03-luogu1072/"/>
      <url>/2019-03/03-luogu1072/</url>
      
        <content type="html"><![CDATA[<p>题目链接: <a href="https://www.luogu.org/problemnew/show/P1072" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1072</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>半个月没更新博客了, 一直忙于做题练习和学文化课, 不然快被劝退了</p><p>最近学习一本通提高篇, 复习下之前学的GCD等数论知识</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先从题目描述说起, 给出了a0, a1, b0, b1四个数</p><p>求 $ gcd(x, a0) = a1 $ 且 $ lcm(x, b0) = b1 $ 中 x 的方案数 </p><p>那么首先我们都知道两个很基础的东西</p><p>$$ gcd(a, b) = gcd(b, a\mod b) $$</p><p>$$ lcm(a, b) = a × b / gcd(a, b) $$</p><p>然后就可以来做这道题了</p><p>因为</p><p>$$ lcm(x, b0) = x × b0 / gcd(x, b0) = b1 $$</p><p>所以</p><p>$$ x = \frac{b1}{b0} × gcd(x, b0) $$</p><p>我们设一个数 $ y = gcd(x, b0) $ 那么一定 $ 1 ≤ y ≤ \sqrt{b0} $</p><p>所以我们只要枚举 y 的值, 然后代入算出 $ x = b1 / b0 × y $</p><p>然后代入题目中的两个式子进行判断</p><p>还有一个简化</p><p>$$ x × b0 / gcd(x, b0) == b1 $$</p><p>可简化为</p><p>$$ b1 / b0 × y × b0 / gcd(x, b0) == b1 $$</p><p>即</p><p>$$ gcd(x, b0) == y $$</p><p>要判断 $ x = b1 / y $ 的情况, 也有可能是一个解</p><p>也不要忘了特判 $ y = \sqrt{b0} $ 的情况</p><p>然后就完美解决了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>没有开各种优化, 能过</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a0<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> b0<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> tmpx<span class="token punctuation">,</span> tmpq<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> a0 <span class="token operator">>></span> a1 <span class="token operator">>></span> b0 <span class="token operator">>></span> b1<span class="token punctuation">;</span>        ans<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>b0<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b0 <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tmpx<span class="token operator">=</span> b1 <span class="token operator">/</span> b0 <span class="token operator">*</span> i<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> a0<span class="token punctuation">)</span> <span class="token operator">==</span> a1 <span class="token operator">&amp;&amp;</span> <span class="token function">gcd</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> b0<span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">;</span>                tmpx<span class="token operator">=</span> b1 <span class="token operator">/</span> i<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> a0<span class="token punctuation">)</span> <span class="token operator">==</span> a1 <span class="token operator">&amp;&amp;</span> <span class="token function">gcd</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> b0<span class="token punctuation">)</span> <span class="token operator">==</span> b0 <span class="token operator">/</span> i<span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        tmpq<span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>b0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmpq <span class="token operator">*</span> tmpq <span class="token operator">==</span> b0<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmpx<span class="token operator">=</span> b1 <span class="token operator">/</span> b0 <span class="token operator">*</span> tmpq<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> a0<span class="token punctuation">)</span> <span class="token operator">==</span> a1 <span class="token operator">&amp;&amp;</span> <span class="token function">gcd</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> b0<span class="token punctuation">)</span> <span class="token operator">==</span> tmpq<span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> GCD </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuoguP2633 - Count on a tree</title>
      <link href="/2019-02/18-luogu2633/"/>
      <url>/2019-02/18-luogu2633/</url>
      
        <content type="html"><![CDATA[<p>题目链接1: <a href="https://www.luogu.org/problemnew/show/P2633" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2633</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2588" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=2588</a><br>题目链接3: <a href="https://www.luogu.org/problemnew/show/SP10628" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/SP10628</a><br>题目链接4: <a href="https://www.spoj.com/problems/COT/" target="_blank" rel="noopener">https://www.spoj.com/problems/COT/</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本来是打算做 TJOI2018 - 异或 那道题的, 然后又看到这道题, 好像做这道题有助于那道题…然后就开始干</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题像是组合模板题…用倍增LCA + 主席树, 直接套模板就行了.</p><p>有一些需要注意的东西, 边的数组最好开大一点, 不然容易RE, 哪个算法写炸了也容易RE, 所以需要小心谨慎的写代码, 然而Ciyang的倍增写挂了…</p><p>主席树我写的指针版, 好像很罕见, 强烈安利, 虽然和数组版没有多大的区别.</p><p>对于这道题, 先预处理出LCA, 然后建个树（数组版不需要）</p><p>查询时把$ x $和$ y $之间的链提出来, 主席树上存的是前缀和, 那么就需要先求出$ lca(x,y) $</p><p>再根据数学上的某些原理（容斥?）求出</p><p>$$ Sum(x,y) = sum(x) + sum(y) - sum(lca(x,y)) - sum(lca(x,y)) - sum(f[lca(x,y)])$$</p><p>$ f[x] $ 代表 x 的父节点, 然后直接套主席树板子就行了</p><p>推荐两个STL必备黑科技, unique 和 lower_bound, 前者那个是给有序数组去重, 后者是有序数组二分查找. 一般都会了, 不会的百度把… </p><p>如果出现RE, 找不到原因, 可以去交<a href="https://www.luogu.org/problemnew/show/SP10628" target="_blank" rel="noopener">这道题</a>, 去掉强制在线, 如果WA就是算法问题了.再出现RE可能就是像我一样手残打错了一个数字之类的东西…</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>评测详情(未开O2):(Accepted 100 用时: 1765ms / 内存: 76648KB)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> e<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f<span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> e<span class="token operator">=</span> e <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">,</span> ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> e <span class="token operator">*</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// READ</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> d<span class="token punctuation">,</span> vi<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lv<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edptr<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmpx<span class="token punctuation">,</span> tmpy<span class="token punctuation">,</span> tmpz<span class="token punctuation">;</span><span class="token keyword">struct</span> edge <span class="token punctuation">{</span>    <span class="token keyword">int</span> to<span class="token punctuation">,</span> nexty<span class="token punctuation">;</span><span class="token punctuation">}</span> eds<span class="token punctuation">[</span><span class="token number">400001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 其实可以 100005 * 2</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    eds<span class="token punctuation">[</span>edptr<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token operator">=</span> b<span class="token punctuation">,</span> eds<span class="token punctuation">[</span>edptr<span class="token punctuation">]</span><span class="token punctuation">.</span>nexty<span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span> edptr<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// edge</span><span class="token keyword">struct</span> NODE <span class="token punctuation">{</span>    NODE <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>    <span class="token keyword">int</span> v<span class="token punctuation">,</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">*</span> root<span class="token punctuation">[</span><span class="token number">800005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 其实可以 100005</span>NODE <span class="token operator">*</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    NODE <span class="token operator">*</span>nptr<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">NODE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">!=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        nptr<span class="token operator">-</span><span class="token operator">></span>l<span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> nptr<span class="token operator">-</span><span class="token operator">></span>r<span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nptr<span class="token punctuation">;</span><span class="token punctuation">}</span>NODE <span class="token operator">*</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> NODE <span class="token operator">*</span>pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>    NODE <span class="token operator">*</span>nptr<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">NODE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nptr<span class="token operator">-</span><span class="token operator">></span>l<span class="token operator">=</span> pre<span class="token operator">-</span><span class="token operator">></span>l<span class="token punctuation">,</span> nptr<span class="token operator">-</span><span class="token operator">></span>r<span class="token operator">=</span> pre<span class="token operator">-</span><span class="token operator">></span>r<span class="token punctuation">,</span> nptr<span class="token operator">-</span><span class="token operator">></span>sum<span class="token operator">=</span> pre<span class="token operator">-</span><span class="token operator">></span>sum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">!=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>            nptr<span class="token operator">-</span><span class="token operator">></span>l<span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> c<span class="token punctuation">,</span> pre<span class="token operator">-</span><span class="token operator">></span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            nptr<span class="token operator">-</span><span class="token operator">></span>r<span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">,</span> pre<span class="token operator">-</span><span class="token operator">></span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span>NODE <span class="token operator">*</span>ml<span class="token punctuation">,</span> NODE <span class="token operator">*</span>mr<span class="token punctuation">,</span> NODE <span class="token operator">*</span>xl<span class="token punctuation">,</span> NODE <span class="token operator">*</span>xr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> qsum<span class="token operator">=</span> mr<span class="token operator">-</span><span class="token operator">></span>l<span class="token operator">-</span><span class="token operator">></span>sum <span class="token operator">+</span> ml<span class="token operator">-</span><span class="token operator">></span>l<span class="token operator">-</span><span class="token operator">></span>sum <span class="token operator">-</span> xl<span class="token operator">-</span><span class="token operator">></span>l<span class="token operator">-</span><span class="token operator">></span>sum <span class="token operator">-</span> xr<span class="token operator">-</span><span class="token operator">></span>l<span class="token operator">-</span><span class="token operator">></span>sum<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>qsum <span class="token operator">>=</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>ml<span class="token operator">-</span><span class="token operator">></span>l<span class="token punctuation">,</span> mr<span class="token operator">-</span><span class="token operator">></span>l<span class="token punctuation">,</span> xl<span class="token operator">-</span><span class="token operator">></span>l<span class="token punctuation">,</span> xr<span class="token operator">-</span><span class="token operator">></span>l<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>ml<span class="token operator">-</span><span class="token operator">></span>r<span class="token punctuation">,</span> mr<span class="token operator">-</span><span class="token operator">></span>r<span class="token punctuation">,</span> xl<span class="token operator">-</span><span class="token operator">></span>r<span class="token punctuation">,</span> xr<span class="token operator">-</span><span class="token operator">></span>r<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> k <span class="token operator">-</span> qsum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// tree</span><span class="token keyword">int</span> deep<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>    deep<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token operator">=</span> deep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> fa<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从0开始...Ciyang写挂了,写成从1开始,然后交了好多遍也没改对</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> head<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nexty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        to<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> nown<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">)</span> <span class="token punctuation">{</span>    root<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> lv<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">[</span>f<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> head<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nexty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        to<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to <span class="token operator">==</span> f<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">dfs2</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">lca</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>deep<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> deep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>deep<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">>=</span> deep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> x<span class="token operator">=</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> x<span class="token operator">=</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span> f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// LCA</span><span class="token keyword">int</span> lastans<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tmpc<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> vi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> vi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmpx<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpy<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> tmpy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>tmpy<span class="token punctuation">,</span> tmpx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    root<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>vi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vi <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>vi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vi <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> vi <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> lv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>vi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vi <span class="token operator">+</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> lv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> vi<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmpx<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpy<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpz<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tmpx<span class="token operator">^</span><span class="token operator">=</span> lastans<span class="token punctuation">;</span>        tmpc<span class="token operator">=</span> <span class="token function">lca</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> tmpy<span class="token punctuation">)</span><span class="token punctuation">;</span>        lastans<span class="token operator">=</span> vi<span class="token punctuation">[</span><span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>tmpx<span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">[</span>tmpy<span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">[</span>tmpc<span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">[</span>f<span class="token punctuation">[</span>tmpc<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> tmpz<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> lastans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// main</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> LCA </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuoguP2580 - 于是他错误的点名开始了</title>
      <link href="/2019-02/16-luogu2580/"/>
      <url>/2019-02/16-luogu2580/</url>
      
        <content type="html"><![CDATA[<p>题目链接: <a href="https://www.luogu.org/problemnew/show/P2580" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2580</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇题解原来是我放到Luogu上的，打算搬过来，原地址: <a href="https://ciyang.blog.luogu.org/solution-p2580" target="_blank" rel="noopener">https://ciyang.blog.luogu.org/solution-p2580</a></p><p>当时是自己闲得无聊自创的算法，跑了最优解第3，Trie树中最快了</p><p>不过后来Luogu上的dalao告诉我这个是边压Trie树，因此<del>人生失去意义</del></p><p>此题解非正常字典树,推荐先学习普通的字典树并了解指针的使用</p><p>代码还是之前的代码,名为Lumpy_Tnode.</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>树上的边存储字符串,代表节点的单独前缀.</p><p>写题解的上午有了灵感,然后根据思路模拟了一下,可行性挺高的.代码上比普通的复杂一些,我使用了指针.    </p><p><img src="/images/P2580_1.png" alt="Example"></p><p>按任意顺序插入abcd,abcde,bcde,bcdf四个字符串的Trie树长这样</p><p>红色节点表示已插入字符串的结尾节点</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>通过与比较普通指针版和非指针版Trie来证明一下可行性.  </p><p>已知一个节点要保存26条边的指针</p><p>指针版Trie可使用动态内存,缺点是每个节点只保存一个字符,会有大量边的空指针来占用额外的内存,且new节点多了,内存分配常数较大.</p><p>为了减少常数,可以自己写内存池分配,但无论是什么数据,只要稍带随机性形成链,就会有很多只有一个子节点的节点,这无疑有25个空指针浪费内存.</p><p>非指针版常数小,但空间分配也是很大的问题,多了可能MLE,少了RE.然而仍有很多一条链的树,空间最大浪费N*25啊…<del>先不说影响美观</del>而且时间复杂度依然很高,毕竟查询也是O(N).</p><p>边压Trie的复杂度是会改变的,就是对一条链情况的优化,理论最大时间复杂度是O(N)带有一些常数,不考虑常数情况下,永远小于等于普通Trie.   </p><p>边压Trie巧妙利用字符串指针,赋值、继承等操作只需要指针或长度变化就好了,因此插入最小复杂度是O(1),空间上也少了很多空指针. </p><p>太多证明不如一句代码,我放上代码继续分析. </p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>节点的结构体,原来的char变成了length和字符串指针:  </p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> clear(a) memset(a, 0, sizeof(a))</span><span class="token macro property">#<span class="token directive keyword">define</span> copy(a, b) memcpy(a, b, sizeof(a))</span>    <span class="token keyword">struct</span> Lumpy_Tnode <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pStr<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指向当前存储字符串首元素</span>        <span class="token keyword">int</span> length<span class="token punctuation">,</span> isEnd<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//length存储字符串的长度 isEnd代表是否是结尾节点</span>        Lumpy_Tnode <span class="token operator">*</span>children<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//26个子节点</span>        <span class="token keyword">inline</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pStr<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token operator">=</span> isEnd<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">clear</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">inline</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pStr<span class="token operator">=</span> str<span class="token punctuation">,</span> length<span class="token operator">=</span> len<span class="token punctuation">,</span> isEnd<span class="token operator">=</span> end<span class="token punctuation">,</span> <span class="token function">clear</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token punctuation">}</span> mNode<span class="token punctuation">;</span></code></pre><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>使用递归和循环,判断比较多,先看代码(看起来常数很大)      </p><pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> Lumpy_Tnode <span class="token operator">*</span>bNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//str是指针,指向当前插入字符串的第一个元素</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//字符串长度为0代表结尾</span>        <span class="token comment" spellcheck="true">//其实是为了优化代码美观,当作递归边界</span>            bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ch<span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//子节点已存在</span>            bNode<span class="token operator">=</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">register</span> <span class="token keyword">int</span> sptr<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>sptr <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> sptr <span class="token operator">&lt;</span> bNode<span class="token operator">-</span><span class="token operator">></span>length <span class="token operator">&amp;&amp;</span> bNode<span class="token operator">-</span><span class="token operator">></span>pStr<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>sptr<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//循环来找当前字符串和节点存储的字符串最长前缀</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sptr <span class="token operator">!=</span> bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//节点存储的字符串不是插入字符串的子串</span>                Lumpy_Tnode <span class="token operator">*</span>nNode<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>pStr <span class="token operator">+</span> sptr<span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>length <span class="token operator">-</span> sptr<span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//拆树,运用字符串指针连续地址的特性来操作</span>                <span class="token function">copy</span><span class="token punctuation">(</span>nNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">clear</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//继承原有子节点的各种信息</span>                bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>bNode<span class="token operator">-</span><span class="token operator">></span>pStr<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span> nNode<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//清空原有节点,重新初始化</span>            <span class="token punctuation">}</span>            bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token operator">=</span> sptr<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新当前节点存储的字符串长度,从而更改当前存储的字符串</span>            <span class="token function">insert</span><span class="token punctuation">(</span>str <span class="token operator">+</span> sptr<span class="token punctuation">,</span> length <span class="token operator">-</span> sptr<span class="token punctuation">,</span> bNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//不存在当前首字母的子节点,直接new并且赋值</span>            <span class="token comment" spellcheck="true">//因为是指针操作,所以不需要O(n)复制字符串,理论上复杂度O(3)?</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//调用方式:insert(插入字符串, 字符串长度, Trie根节点);</span></code></pre><p>如果代码看懂了,第一反应可能认为指针操作有一些漏洞.</p><p>的确插入的字符串在插入后就不能进行改变了,所以就只要开一个char[N][K]的数组来保存输入的字符串,K为最长字符串的长度. </p><p>相比较空间复杂度总体仍然较小,其实是把原来每个节点存的char放到了一起,每个节点多了一个指针.</p><p>这其中其实有个很巧妙的事,树上的一条链可能指向的地址是连续的.仔细想了想,其实也有空间浪费,不管是节点上还是树上的最长公共前缀都只指向一个字符串,其他字符串中相同的字符占用的空间就浪费掉了,这句话不懂没事,因为这个浪费造成的影响很小. </p><p>如果代码都没看懂,还有图解:</p><ol><li><p><img src="/images/P2580_2.png" alt="向空树插入abc,再插入ab"></p></li><li><p><img src="/images/P2580_3.png" alt="再向此树插入ac:"></p></li></ol><p>解释一下图2:</p><p>比较ab和ac,最长公共前缀为a</p><p>新建一个字符串指针指向ab中b的节点,长度为1,继承ab的颜色和ab的子节点.</p><p>清空ab的子节点,颜色改为黑(黑表示不为结尾节点),ab的首字母b子节点指向b.</p><p>在我实现时,先更改长度使ab变为a,再向a中插入c.</p><p>因为没有首字母为c的子节点,直接new一个新的.</p><h4 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h4><pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> Lumpy_Tnode <span class="token operator">*</span>bNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//递归到查找的字符串长度为0</span>        <span class="token comment" spellcheck="true">//判断当前节点是否为结尾,是否是第一次查询</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>isEnd <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ch<span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bNode<span class="token operator">=</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">&lt;</span> bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//自带剪枝,若当前查找字符串长度小于当前公共前缀,那么字典树中不存在当前查找的字符串</span>            <span class="token keyword">register</span> <span class="token keyword">int</span> sptr<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>sptr <span class="token operator">&lt;</span> bNode<span class="token operator">-</span><span class="token operator">></span>length <span class="token operator">&amp;&amp;</span> bNode<span class="token operator">-</span><span class="token operator">></span>pStr<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>sptr<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sptr <span class="token operator">!=</span> bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//最长公共前缀必须是当前查找的字符串的子串</span>            <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>str <span class="token operator">+</span> sptr<span class="token punctuation">,</span> length <span class="token operator">-</span> sptr<span class="token punctuation">,</span> bNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//没有子节点,字典树中不存在当前查找的字符串</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//调用方式:find(查询字符串, 字符串长度, Trie根节点);</span></code></pre><p>比插入的代码简单多了,并且自带剪枝,所以比较快.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>（开启O2） 用时: 127ms / 内存: 4248KB<br>（关闭O2） 用时: 144ms / 内存: 4128KB</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> clear(a) memset(a, 0, sizeof(a))</span><span class="token macro property">#<span class="token directive keyword">define</span> copy(a, b) memcpy(a, b, sizeof(a))</span><span class="token keyword">struct</span> Lumpy_Trie <span class="token punctuation">{</span>    <span class="token keyword">struct</span> Lumpy_Tnode <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pStr<span class="token punctuation">;</span>        <span class="token keyword">int</span> length<span class="token punctuation">,</span> isEnd<span class="token punctuation">;</span>        Lumpy_Tnode <span class="token operator">*</span>children<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">inline</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pStr<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token operator">=</span> isEnd<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">clear</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">inline</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pStr<span class="token operator">=</span> str<span class="token punctuation">,</span> length<span class="token operator">=</span> len<span class="token punctuation">,</span> isEnd<span class="token operator">=</span> end<span class="token punctuation">,</span> <span class="token function">clear</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> mNode<span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> Lumpy_Tnode <span class="token operator">*</span>bNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ch<span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bNode<span class="token operator">=</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">register</span> <span class="token keyword">int</span> sptr<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>sptr <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> sptr <span class="token operator">&lt;</span> bNode<span class="token operator">-</span><span class="token operator">></span>length <span class="token operator">&amp;&amp;</span> bNode<span class="token operator">-</span><span class="token operator">></span>pStr<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>sptr<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sptr <span class="token operator">!=</span> bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Lumpy_Tnode <span class="token operator">*</span>nNode<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>pStr <span class="token operator">+</span> sptr<span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>length <span class="token operator">-</span> sptr<span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">copy</span><span class="token punctuation">(</span>nNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">clear</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>                bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>bNode<span class="token operator">-</span><span class="token operator">></span>pStr<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span> nNode<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token operator">=</span> sptr<span class="token punctuation">;</span>            <span class="token function">insert</span><span class="token punctuation">(</span>str <span class="token operator">+</span> sptr<span class="token punctuation">,</span> length <span class="token operator">-</span> sptr<span class="token punctuation">,</span> bNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> Lumpy_Tnode <span class="token operator">*</span>bNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>isEnd <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ch<span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bNode<span class="token operator">=</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">&lt;</span> bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">register</span> <span class="token keyword">int</span> sptr<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>sptr <span class="token operator">&lt;</span> bNode<span class="token operator">-</span><span class="token operator">></span>length <span class="token operator">&amp;&amp;</span> bNode<span class="token operator">-</span><span class="token operator">></span>pStr<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>sptr<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sptr <span class="token operator">!=</span> bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>str <span class="token operator">+</span> sptr<span class="token punctuation">,</span> length <span class="token operator">-</span> sptr<span class="token punctuation">,</span> bNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> t<span class="token punctuation">;</span><span class="token keyword">char</span> allstr<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> allstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>allstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>allstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">.</span>mNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        j<span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">.</span>mNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"WRONG\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"OK\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"REPEAT\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最需要注意的是输入的字符串insert后不能再更改那一块内存了不能更改了…</p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>我写的常数可能挺大,希望dalao们试试各种卡常优化…  </p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 字典树 </tag>
            
            <tag> 边压Trie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毒瘤码风推荐</title>
      <link href="/2019-02/15-du-liu-ma-feng-tui-jian/"/>
      <url>/2019-02/15-du-liu-ma-feng-tui-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="码风"><a href="#码风" class="headerlink" title="码风"></a>码风</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>相信码风对于我们来说太熟悉了，以至于平常都忘记了它的存在</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>码风全称代码风格…</p><p>我就不啰嗦了，估计也都知道是啥，想看详细介绍可以右转<a href="https://baike.baidu.com/item/代码风格" target="_blank" rel="noopener">代码风格-百度百科</a>或<a href="https://en.wikipedia.org/wiki/Programming_style" target="_blank" rel="noopener">Programming style-Wikipedia</a></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>那么就直接推荐自己的码风了</p><p>(从来不多打空格的可以跳过这一部分)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// QuickRead</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> e<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f<span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> e<span class="token operator">=</span> e <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">,</span> ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> e <span class="token operator">*</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个空格写法确实毒瘤，估计像我这样的全世界应该有1%…</p><p>赋值符前不加空格，赋值符后加空格，运算符和逻辑符前后都加空格，手打不是很方便，习惯就好了.</p><p>大括号前不换行加空格，for循环中每个语句只在前加空格</p><hr><p>(关于换行等事)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 负载平衡问题</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">absi</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> i <span class="token operator">:</span> <span class="token operator">-</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    sum<span class="token operator">/</span><span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span> sum<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token operator">=</span> s<span class="token punctuation">[</span>n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">+</span><span class="token operator">=</span> <span class="token function">absi</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>只遵守一个原则: 一行只存在一个分号, 能一行表示就不要多行表示</p><p>但也有例外，较长表达式不会压到一行，比较长的函数定义也不会压到一行</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 匈牙利算法</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">,</span> <span class="token keyword">int</span> wptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> head<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nexty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        to<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>walkpast<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">!=</span> wptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            walkpast<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">=</span> wptr<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pp<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pp<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">,</span> wptr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> pp<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">=</span> nown<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>大概就是这种码风，能省略就省略，但一行一条语句。</p><hr><p>(判断语句和数组定义)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 主席树</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmpx<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpy<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpxx<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpyy<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">)</span>            tmpc<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">update</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> tmpy<span class="token punctuation">,</span> tmpc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">update</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> tmpyy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>tmpc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">update</span><span class="token punctuation">(</span>tmpxx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tmpy<span class="token punctuation">,</span> <span class="token operator">-</span>tmpc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">update</span><span class="token punctuation">(</span>tmpxx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tmpyy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tmpc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>tmpxx<span class="token punctuation">,</span> tmpyy<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query</span><span class="token punctuation">(</span>tmpx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tmpyy<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query</span><span class="token punctuation">(</span>tmpxx<span class="token punctuation">,</span> tmpy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">query</span><span class="token punctuation">(</span>tmpx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tmpy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>单行if不会换行，如果存在 else / else if 则换行</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> db<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0</span><span class="token punctuation">,</span>           <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token number">1799998</span><span class="token punctuation">,</span>   <span class="token number">844059434</span><span class="token punctuation">,</span> <span class="token number">446759866</span><span class="token punctuation">,</span> <span class="token number">865662267</span><span class="token punctuation">,</span> <span class="token number">29583524</span><span class="token punctuation">,</span>  <span class="token number">127902423</span><span class="token punctuation">,</span> <span class="token number">614370802</span><span class="token punctuation">,</span> <span class="token number">866384115</span><span class="token punctuation">,</span> <span class="token number">771602680</span><span class="token punctuation">,</span> <span class="token number">248905317</span><span class="token punctuation">,</span> <span class="token number">78054944</span><span class="token punctuation">,</span>  <span class="token number">297165834</span><span class="token punctuation">,</span> <span class="token number">271692212</span><span class="token punctuation">,</span> <span class="token number">491940959</span><span class="token punctuation">,</span> <span class="token number">329478404</span><span class="token punctuation">,</span> <span class="token number">984412484</span><span class="token punctuation">,</span> <span class="token number">35704862</span><span class="token punctuation">,</span>  <span class="token number">729995974</span><span class="token punctuation">,</span> <span class="token number">257611164</span><span class="token punctuation">,</span> <span class="token number">47520158</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token number">869867506</span><span class="token punctuation">,</span> <span class="token number">732424548</span><span class="token punctuation">,</span> <span class="token number">678809493</span><span class="token punctuation">,</span> <span class="token number">143987677</span><span class="token punctuation">,</span> <span class="token number">789130682</span><span class="token punctuation">,</span> <span class="token number">973691054</span><span class="token punctuation">,</span> <span class="token number">893883312</span><span class="token punctuation">,</span> <span class="token number">311519914</span><span class="token punctuation">,</span> <span class="token number">650459219</span><span class="token punctuation">,</span> <span class="token number">821045358</span><span class="token punctuation">,</span> <span class="token number">310559620</span><span class="token punctuation">,</span> <span class="token number">775625624</span><span class="token punctuation">,</span> <span class="token number">108543282</span><span class="token punctuation">,</span> <span class="token number">54180205</span><span class="token punctuation">,</span>  <span class="token number">287135615</span><span class="token punctuation">,</span> <span class="token number">875178490</span><span class="token punctuation">,</span> <span class="token number">760920242</span><span class="token punctuation">,</span> <span class="token number">512638949</span><span class="token punctuation">,</span> <span class="token number">254323537</span><span class="token punctuation">,</span> <span class="token number">977186041</span><span class="token punctuation">,</span> <span class="token number">474130473</span><span class="token punctuation">,</span> <span class="token number">455558106</span><span class="token punctuation">,</span>    <span class="token number">435916613</span><span class="token punctuation">,</span> <span class="token number">787985317</span><span class="token punctuation">,</span> <span class="token number">366892998</span><span class="token punctuation">,</span> <span class="token number">42185197</span><span class="token punctuation">,</span>  <span class="token number">192850838</span><span class="token punctuation">,</span> <span class="token number">421591125</span><span class="token punctuation">,</span> <span class="token number">241779127</span><span class="token punctuation">,</span> <span class="token number">969779315</span><span class="token punctuation">,</span> <span class="token number">924599866</span><span class="token punctuation">,</span> <span class="token number">723460313</span><span class="token punctuation">,</span> <span class="token number">430999144</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这个数组定义比较忙=迷，有的时候不会换行有的时候会</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>如果上面这些格式手动的话…估计考试一道题都做不完…</p><p>我目前使用VS Code，他的C++扩展自带格式化工具.clang-format</p><p>在 Visual Studio 和 Vim 中也可以用，并且配置文件是通用的</p><p>VS Code使用.clang-format: 安装C++扩展 -&gt; 选择工作文件夹 -&gt; 在文件夹下创建文件命名为.clang-format -&gt; 打开编辑</p><p>Visual Studio的使用.clang-format: 新建项目 -&gt; 创建.clang-format文件 -&gt; 编辑</p><h4 id="clang-format文件用法"><a href="#clang-format文件用法" class="headerlink" title=".clang-format文件用法"></a>.clang-format文件用法</h4><p><a href="https://clang.llvm.org/docs/ClangFormatStyleOptions.html" target="_blank" rel="noopener">官方文档</a>或者自行百度</p><p>常用设置:</p><p>SpaceBeforeAssignmentOperator 为赋值符两边的空格</p><p>BraceWrapping 为各位置括号前后换行</p><p>ColumnLimit 为每行最大字符限制(和数组初始化换行有关)</p><h4 id="放一下我的格式化文件配置"><a href="#放一下我的格式化文件配置" class="headerlink" title="放一下我的格式化文件配置:"></a>放一下我的格式化文件配置:</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">--</span><span class="token operator">-</span>Language<span class="token punctuation">:</span>    CppBasedOnStyle<span class="token punctuation">:</span>    LLVMAccessModifierOffset<span class="token punctuation">:</span>    <span class="token number">0</span>AlignAfterOpenBracket<span class="token punctuation">:</span>    AlignAlignConsecutiveAssignments<span class="token punctuation">:</span>    <span class="token boolean">false</span>AlignConsecutiveDeclarations<span class="token punctuation">:</span>    <span class="token boolean">false</span>AlignEscapedNewlinesLeft<span class="token punctuation">:</span>    <span class="token boolean">true</span>AlignOperands<span class="token punctuation">:</span>    <span class="token boolean">true</span>AlignTrailingComments<span class="token punctuation">:</span>    <span class="token boolean">true</span>AllowAllParametersOfDeclarationOnNextLine<span class="token punctuation">:</span>    <span class="token boolean">true</span>AllowShortBlocksOnASingleLine<span class="token punctuation">:</span>    <span class="token boolean">false</span>AllowShortCaseLabelsOnASingleLine<span class="token punctuation">:</span>    <span class="token boolean">true</span>AllowShortFunctionsOnASingleLine<span class="token punctuation">:</span>    EmptyAllowShortIfStatementsOnASingleLine<span class="token punctuation">:</span>    <span class="token boolean">true</span>AllowShortLoopsOnASingleLine<span class="token punctuation">:</span>    <span class="token boolean">true</span>AlwaysBreakAfterDefinitionReturnType<span class="token punctuation">:</span>    NoneAlwaysBreakAfterReturnType<span class="token punctuation">:</span>    NoneAlwaysBreakBeforeMultilineStrings<span class="token punctuation">:</span>    <span class="token boolean">true</span>AlwaysBreakTemplateDeclarations<span class="token punctuation">:</span>    <span class="token boolean">true</span>BinPackArguments<span class="token punctuation">:</span>    <span class="token boolean">false</span>BinPackParameters<span class="token punctuation">:</span>    <span class="token boolean">false</span>BraceWrapping<span class="token punctuation">:</span>      AfterClass<span class="token punctuation">:</span>    <span class="token boolean">false</span>  AfterControlStatement<span class="token punctuation">:</span>    <span class="token boolean">false</span>  AfterEnum<span class="token punctuation">:</span>    <span class="token boolean">false</span>  AfterFunction<span class="token punctuation">:</span>    <span class="token boolean">false</span>  AfterNamespace<span class="token punctuation">:</span>    <span class="token boolean">false</span>  AfterObjCDeclaration<span class="token punctuation">:</span>    <span class="token boolean">false</span>  AfterStruct<span class="token punctuation">:</span>    <span class="token boolean">false</span>  AfterUnion<span class="token punctuation">:</span>    <span class="token boolean">false</span>  BeforeCatch<span class="token punctuation">:</span>    <span class="token boolean">true</span>  BeforeElse<span class="token punctuation">:</span>    <span class="token boolean">true</span>  IndentBraces<span class="token punctuation">:</span>    <span class="token boolean">false</span>BreakBeforeBinaryOperators<span class="token punctuation">:</span>    NonAssignmentBreakBeforeBraces<span class="token punctuation">:</span>    CustomBreakBeforeTernaryOperators<span class="token punctuation">:</span>    <span class="token boolean">false</span>BreakConstructorInitializersBeforeComma<span class="token punctuation">:</span>    <span class="token boolean">false</span>ColumnLimit<span class="token punctuation">:</span>    <span class="token number">250</span>CommentPragmas<span class="token punctuation">:</span>    <span class="token string">'^ IWYU pragma:'</span>ConstructorInitializerAllOnOneLineOrOnePerLine<span class="token punctuation">:</span>    <span class="token boolean">true</span>ConstructorInitializerIndentWidth<span class="token punctuation">:</span>    <span class="token number">4</span>ContinuationIndentWidth<span class="token punctuation">:</span>    <span class="token number">4</span>Cpp11BracedListStyle<span class="token punctuation">:</span>    <span class="token boolean">true</span>DerivePointerAlignment<span class="token punctuation">:</span>    <span class="token boolean">false</span>DisableFormat<span class="token punctuation">:</span>    <span class="token boolean">false</span>ExperimentalAutoDetectBinPacking<span class="token punctuation">:</span>    <span class="token boolean">false</span>ForEachMacros<span class="token punctuation">:</span>    <span class="token punctuation">[</span> foreach<span class="token punctuation">,</span> Q_FOREACH<span class="token punctuation">,</span> BOOST_FOREACH <span class="token punctuation">]</span>IncludeCategories<span class="token punctuation">:</span>   <span class="token operator">-</span> Regex<span class="token punctuation">:</span>    <span class="token string">'^"(llvm|llvm-c|clang|clang-c)/'</span>    Priority<span class="token punctuation">:</span>    <span class="token number">2</span>  <span class="token operator">-</span> Regex<span class="token punctuation">:</span>    <span class="token string">'^(&lt;|"(gtest|isl|json)/)'</span>    Priority<span class="token punctuation">:</span>    <span class="token number">3</span>  <span class="token operator">-</span> Regex<span class="token punctuation">:</span>    <span class="token string">'.*'</span>    Priority<span class="token punctuation">:</span>    <span class="token number">1</span>IndentCaseLabels<span class="token punctuation">:</span>    <span class="token boolean">true</span>IndentWidth<span class="token punctuation">:</span>    <span class="token number">4</span>IndentWrappedFunctionNames<span class="token punctuation">:</span>    <span class="token boolean">false</span>KeepEmptyLinesAtTheStartOfBlocks<span class="token punctuation">:</span>    <span class="token boolean">false</span>MacroBlockBegin<span class="token punctuation">:</span>    <span class="token string">''</span>MacroBlockEnd<span class="token punctuation">:</span>    <span class="token string">''</span>MaxEmptyLinesToKeep<span class="token punctuation">:</span>    <span class="token number">1</span>NamespaceIndentation<span class="token punctuation">:</span>    InnerObjCBlockIndentWidth<span class="token punctuation">:</span>    <span class="token number">4</span>ObjCSpaceAfterProperty<span class="token punctuation">:</span>    <span class="token boolean">false</span>ObjCSpaceBeforeProtocolList<span class="token punctuation">:</span>    <span class="token boolean">true</span>PenaltyBreakBeforeFirstCallParameter<span class="token punctuation">:</span>    <span class="token number">19</span>PenaltyBreakComment<span class="token punctuation">:</span>    <span class="token number">300</span>PenaltyBreakFirstLessLess<span class="token punctuation">:</span>    <span class="token number">120</span>PenaltyBreakString<span class="token punctuation">:</span>    <span class="token number">1000</span>PenaltyExcessCharacter<span class="token punctuation">:</span>    <span class="token number">1000000</span>PenaltyReturnTypeOnItsOwnLine<span class="token punctuation">:</span>    <span class="token number">60</span>PointerAlignment<span class="token punctuation">:</span>    RightReflowComments<span class="token punctuation">:</span>    <span class="token boolean">true</span>SortIncludes<span class="token punctuation">:</span>    <span class="token boolean">false</span>SpaceAfterCStyleCast<span class="token punctuation">:</span>    <span class="token boolean">false</span>SpaceAfterTemplateKeyword<span class="token punctuation">:</span> <span class="token boolean">true</span>SpaceBeforeAssignmentOperators<span class="token punctuation">:</span>    <span class="token boolean">false</span>SpaceBeforeParens<span class="token punctuation">:</span>    NeverSpaceInEmptyParentheses<span class="token punctuation">:</span>    <span class="token boolean">false</span>SpacesBeforeTrailingComments<span class="token punctuation">:</span>    <span class="token number">2</span>SpacesInAngles<span class="token punctuation">:</span>    <span class="token boolean">true</span>SpacesInContainerLiterals<span class="token punctuation">:</span>    <span class="token boolean">false</span>SpacesInCStyleCastParentheses<span class="token punctuation">:</span>    <span class="token boolean">false</span>SpacesInParentheses<span class="token punctuation">:</span>    <span class="token boolean">false</span>SpacesInSquareBrackets<span class="token punctuation">:</span>    <span class="token boolean">false</span>Standard<span class="token punctuation">:</span>    Cpp11TabWidth<span class="token punctuation">:</span>    <span class="token number">4</span>UseTab<span class="token punctuation">:</span>    Always<span class="token operator">...</span></code></pre><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>用了这个码风，再也不怕代码出BUG了(</p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 闲聊 </tag>
            
            <tag> 码风 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始</title>
      <link href="/2019-02/12-kai-shi/"/>
      <url>/2019-02/12-kai-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="关于搭建"><a href="#关于搭建" class="headerlink" title="关于搭建"></a>关于搭建</h3><p>从下午搭建到现在,基本上算是搭建完了,文章从零开始,以后一点一点填吧.</p><p>其实博客在半月前就已经开始搭建了,只不过选择了一个没有什么配置手册的主题,然后扩展还比较少…最后不得不弃坑。</p><p>之前其实是从gitee上搭建的,现在听了周围dalao的建议,随波逐流来到了github</p><p>关于现在搭建的方法,使用Github + Hexo + Matery.</p><p><br></p><p>测试一下HelloWorld</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, world!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">:</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><br></p><p>测试一下LaTeX</p><p>$$ \LARGE{S_k=\sum_{i=1}^{k}a_i} $$</p><p><br></p><p>测试一下内嵌JS</p><p style="text-align: center"><a href="/" style="font-size:25px; text-align:center;"> Ciyang’s Blog </a></p><p><br></p><h3 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h3><p>作者:Ciyang </p><p>现于 SD-SLYZ 上高中,是一名现役OIer,爱搞一些黑科技,写点高（la）端（ji）题解,出点毒（jian）瘤（dan）题,其实还仍是个中二少年……</p><p>之前自己发明过MidHeap（BST）, 块状字典树（边压Trie）, 后来才知道已经被发明过了,但还是一直热衷于自创毒瘤数据结构来一举成名,其实毫无卵用.</p><p>最近打算颓U3D,做一款SLG网络国战手游,想的很美好,然后并没有时间和精力,还是先熟练U3D的基本操作吧.</p><p>顺便说一句,头像及其沙雕,所以凑活着看,以后再改.</p><p>联系方式:</p><pre><code>  QQ: 896681584  Github: Xciyang  网站通用昵称: Ciyang</code></pre><h3 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h3><p>这个博客不一定只发题解,多数应该还是一些黑科技,学习总结和经历之类的东西吧.</p><p>想设成粉色背景,然后估计被怼的几率比较大,就换了个颜色.</p><p>博客还会不断优化</p><p>相册会陆续换成自己的</p><p>借此吐槽一下这个主题</p><p>关于里面的技能是什么???为什么需要自己填写,自己写百分比…</p><p>其他技能又是什么???为什么要把文章标签当作其他技能…我的技能是闲聊…好像有道理.</p><p>现在已经关闭了那个功能,以后再自己实现吧.</p><h3 id="利益相关"><a href="#利益相关" class="headerlink" title="利益相关"></a>利益相关</h3><p>欢迎收藏!</p><p>欢迎加友链!</p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
