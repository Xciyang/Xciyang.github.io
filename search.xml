<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSP-S 2019 · AFO游记 （未完）</title>
      <link href="/2019-12/09-csps2019afo/"/>
      <url>/2019-12/09-csps2019afo/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>正在码字~</p>]]></content>
      
      
      <categories>
          
          <category> 记忆 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 记忆 </tag>
            
            <tag> CPS-S </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技巧 - 如何优雅的写代码</title>
      <link href="/2019-10/08-you-ya-de-xie-dai-ma/"/>
      <url>/2019-10/08-you-ya-de-xie-dai-ma/</url>
      
        <content type="html"><![CDATA[<p>本篇分享写代码相关的一些技巧，可用且不仅用于OIer。</p><p>相关内容：DevC++、Visual Studio Code、MinGW、Git、Github</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>临退役，将自己写代码一年多的经验分享给后人。可能用处不大，也可以当个说明书看。</p><p>内容仅供参考。</p><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><h3 id="DevC"><a href="#DevC" class="headerlink" title="DevC++"></a>DevC++</h3><p>适合初学者使用，优点是上手容易、功能均衡，即可用来写题，也可用来写简单项目。</p><p>然而缺点也很多，自带mingw版本较低，调试能力较低，经常卡死，各种BUG。</p><p>写题这个上手就会，还是有一些技巧的。这里默认使用5.11版本，应该是最新版。</p><p>并且CSP好像只能用这个编辑器。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>此编辑器一般来说无需配置就能使用。</p><h4 id="代码补全"><a href="#代码补全" class="headerlink" title="代码补全"></a>代码补全</h4><p>其实一直是存在的，然而使用的快捷键和输入法冲突了，你只能等待自动出代码补全。<strong>其实可以手动更改！</strong></p><p>步骤：工具-&gt;快捷键选项-&gt;Show Code Completion，将快捷键改成你想要的。</p><p>在写代码时按下快捷键即可弹出补全对话框进行选择，当然有时会出现BUG。</p><p><img src="/images/Code1.jpg" alt="Code Completion"></p><h4 id="AStyle"><a href="#AStyle" class="headerlink" title="AStyle"></a>AStyle</h4><p>代码格式化工具，能简单格式化代码。<strong>默认快捷键Ctrl+Shift+A。</strong></p><p>步骤：Astyle-&gt;格式化选项，支持多种风格，可以自行了解。</p><h4 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h4><p>提供了大量代码模板，可以自己添加删除，软件自带一些模板。</p><p>先说如何更改，步骤：工具-&gt;编辑器属性-&gt;代码-&gt;插入，先点击添加再写代码，其中<code>*|*</code>代表待填位置。点击移除可以移除不想要的。</p><p>那么如何使用？<strong>软件左上角</strong></p><p><img src="/images/Code2.jpg" alt="Code Template"></p><p>自带的几个模板在写项目时经常使用。</p><h4 id="缺省源"><a href="#缺省源" class="headerlink" title="缺省源"></a>缺省源</h4><p>在原来机房盛行DevC++时非常热门，应该说非常好用了。创建空文件自动写入缺省源内容，缺点就是如果缺省源出锅，写的程序都将出现相同问题。</p><p>步骤：工具-&gt;编辑器属性-&gt;代码-&gt;缺省源，更改后确定即可。</p><h4 id="编译器选项"><a href="#编译器选项" class="headerlink" title="编译器选项"></a>编译器选项</h4><p>如果想自己加高版本的编译器，就这样做吧。</p><p>步骤：工具-&gt;编译选项-&gt;由文件夹添加编译器设置-&gt;选择文件夹（你下载的mingw)，这样是最方便的。</p><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><p>非常好的一款编辑器，优点是功能全面、可扩展性高、打开文件速度快、手感极佳、安装较方便。</p><p>当然也有一点缺点和问题，对C++的支持仍需改进，GDB调试监视变量需要优化，文件夹及文件名不支持汉字，写项目不易配置。</p><p>但是我还是非常推荐，写前端、JS非常好用。</p><h4 id="基本插件"><a href="#基本插件" class="headerlink" title="基本插件"></a>基本插件</h4><p>Chinese language简体中文支持，自己选择一个喜欢的图标主题、主题。</p><h3 id="编写调试C"><a href="#编写调试C" class="headerlink" title="编写调试C++"></a>编写调试C++</h3><p>首先需要下载扩展C/C++，才能正常编写调试C++。</p><p>然后进行配置，如果你不使用调试可以使用另一种方法。</p><p>先创建一个文件夹并通过vscode打开，下载mingw，此文章后面会给出下载地址。</p><p>然后在当前打开的文件夹下创建一个名为.vscode的文件夹（若未自动创建），再创建一个名为c_cpp_properties.json的文件，然而这步现在似乎可有可无，不过做了也没有坏处。</p><p>将以下内容写入c_cpp_properties.json文件：</p><pre><code class="json">{    &quot;configurations&quot;: [        {            &quot;name&quot;: &quot;Win32&quot;,            &quot;includePath&quot;: [                &quot;${workspaceFolder}/**&quot;,                &quot;D:/Ciyang/mingw64/include&quot;,                &quot;D:/Ciyang/mingw64/x86_64-w64-mingw32/include&quot;,                &quot;D:/Ciyang/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include&quot;,                &quot;D:/Ciyang/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++&quot;,                &quot;D:/Ciyang/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward&quot;,                &quot;D:/Ciyang/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32&quot;            ],            &quot;defines&quot;: [                &quot;_DEBUG&quot;,                &quot;UNICODE&quot;,                &quot;_UNICODE&quot;            ],            &quot;intelliSenseMode&quot;: &quot;gcc-x64&quot;,            &quot;browse&quot;: {                &quot;path&quot;: [                    &quot;${workspaceFolder}&quot;                ],                &quot;limitSymbolsToIncludedHeaders&quot;: true            }        }    ],    &quot;version&quot;: 4}</code></pre><p><code>includePath</code>中的<code>D:/Ciyang/mingw64</code>改为你的mingw路径，都改为可用的存在的路径，甚至你可以用DevC++自带的mingw。</p><p>其他不需要管，可以自行查阅，不影响正常编写代码。现在创建一个HelloWorld.cpp，随便写一些代码，如果有莫名其妙的报错先不用管。</p><p>在vscode中，F5可以调试运行。现在我们按下F5，将会显示没有配置launch.json，然后就可以点击创建。（当然你可以自己在.vscode文件夹中创建launch.json文件）。</p><p>将以下内容写入launch.json文件：</p><pre><code class="json">{    &quot;version&quot;: &quot;0.2.0&quot;,    &quot;configurations&quot;: [        {            &quot;name&quot;: &quot;C++ Luauch (GDB)&quot;,            &quot;type&quot;: &quot;cppdbg&quot;,            &quot;request&quot;: &quot;launch&quot;,            &quot;program&quot;: &quot;${fileDirname}/${fileBasenameNoExtension}.exe&quot;,            &quot;args&quot;: [],            &quot;stopAtEntry&quot;: false,            &quot;cwd&quot;: &quot;${fileDirname}&quot;,            &quot;environment&quot;: [],            &quot;externalConsole&quot;: true,            &quot;preLaunchTask&quot;: &quot;build-bug&quot;,            &quot;MIMode&quot;: &quot;gdb&quot;,            &quot;miDebuggerPath&quot;: &quot;D:/mingw64/bin/gdb.exe&quot;,            &quot;setupCommands&quot;: [                {                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,                    &quot;ignoreFailures&quot;: true                }            ]        }    ]}</code></pre><p>悬停一些字符串上面会显示帮助信息，<code>miDebuggerPath</code>需要改为你的gdb路径，一般在mingw/bin中。</p><p><code>preLaunchTask</code>是预启动任务，通俗来说，启动程序前运行的任务。如果你想每次运行程序都重新编译，就需要设置。</p><p>这时候回到cpp再按F5就会让你配置任务，在.vscode文件夹中创建tasks.json文件，我们将要配置编译任务。</p><p>将以下内容写入tasks.json文件：</p><pre><code class="json">{    &quot;version&quot;: &quot;2.0.0&quot;,    &quot;tasks&quot;: [        {            &quot;label&quot;: &quot;build&quot;,            &quot;command&quot;: &quot;g++&quot;,            &quot;args&quot;: [                &quot;\&quot;${file}\&quot;&quot;,                &quot;-o&quot;,                &quot;\&quot;${fileDirname}\\${fileBasenameNoExtension}\&quot;.exe&quot;,                &quot;-O2&quot;            ],            &quot;type&quot;: &quot;shell&quot;,            &quot;problemMatcher&quot;: [                &quot;$gcc&quot;            ]        },        {            &quot;label&quot;: &quot;build-bug&quot;,            &quot;command&quot;: &quot;g++&quot;,            &quot;args&quot;: [                &quot;-g&quot;,                &quot;\&quot;${file}\&quot;&quot;,                &quot;-o&quot;,                &quot;\&quot;${fileDirname}\\${fileBasenameNoExtension}\&quot;.exe&quot;            ],            &quot;type&quot;: &quot;shell&quot;,            &quot;problemMatcher&quot;: [],        },        {            &quot;label&quot;: &quot;build-bug-Wall&quot;,            &quot;command&quot;: &quot;g++&quot;,            &quot;args&quot;: [                &quot;-g&quot;,                &quot;-Wall&quot;,                &quot;\&quot;${file}\&quot;&quot;,                &quot;-o&quot;,                &quot;\&quot;${fileDirname}\\${fileBasenameNoExtension}.exe\&quot;&quot;            ],            &quot;type&quot;: &quot;shell&quot;,            &quot;problemMatcher&quot;: [],        }    ]}</code></pre><p>共有三个任务，分别是build（开启O2优化编译程序）、build-bug（开启调试信息编译程序）、build-bug-Wall（开启调试信息并打开最多的警告编译程序）。</p><p>其中有些<code>${file}</code>、<code>${fileDirname}</code>等为vscode提供的变量，将自动转换为一些内容。</p><p>现在再按下F5，即可运行程序，F9设置断点即可暂停程序。</p><p>更多内容可以看：<a href="https://code.visualstudio.com/docs/editor/tasks#vscode" target="_blank" rel="noopener">https://code.visualstudio.com/docs/editor/tasks#vscode</a></p><h4 id="编写运行C"><a href="#编写运行C" class="headerlink" title="编写运行C++"></a>编写运行C++</h4><p>上面的方法过于复杂，还有一种简单的方法。<strong>下载C/C++ Compile Run插件</strong></p><p>下载后，直接按F6即可自动编译cpp文件并运行。</p><p><strong>现在发现有很多BUG，不推荐使用。</strong></p><h4 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h4><p>vscode支持代码格式化，并且无需配置，<strong>快捷键Alt + Shift + F。</strong></p><p>当然，某些语言可以下载插件进行格式化。也可以自定义格式化，我写过具体的步骤。</p><p>方法：<a href="\2019-02\15-du-liu-ma-feng-tui-jian">毒瘤码风推荐</a></p><h4 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h4><blockquote><p>Q: 头文件一直报错？<br>A: 有时候出BUG无法解决，请重启vscode。如果一直报错请下载名为Include Autocomplete的扩展。</p></blockquote><blockquote><p>Q: 库关键字报错？<br>A: 检查c_cpp_properties.json文件。</p></blockquote><h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p>这里只介绍MinGW。</p><h3 id="MinGW"><a href="#MinGW" class="headerlink" title="MinGW"></a>MinGW</h3><p>此工具包含G++、GCC，并且可以安装很多C++库，可以直接选择下载配置完成的版本。</p><h4 id="下载方式"><a href="#下载方式" class="headerlink" title="下载方式"></a>下载方式</h4><p>安装版：<a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe/download" target="_blank" rel="noopener">https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe/download</a></p><p>机房的电脑一直安装失败，安装版似乎需要科学上网。</p><p>解压版：[<a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains" target="_blank" rel="noopener">https://sourceforge.net/projects/mingw-w64/files/Toolchains</a> targetting Win64/Personal Builds/mingw-builds/8.1.0/threads-win32/sjlj/x86_64-8.1.0-release-win32-sjlj-rt_v6-rev0.7z](<a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains" target="_blank" rel="noopener">https://sourceforge.net/projects/mingw-w64/files/Toolchains</a> targetting Win64/Personal Builds/mingw-builds/8.1.0/threads-win32/sjlj/x86_64-8.1.0-release-win32-sjlj-rt_v6-rev0.7z)</p><p>旧版本安装版：<a href="https://sourceforge.net/projects/mingw/files/latest/download" target="_blank" rel="noopener">https://sourceforge.net/projects/mingw/files/latest/download</a></p><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>下载安装（解压）后，仍需要配置环境变量。</p><p>步骤：右键计算机-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;系统变量-&gt;找到path。</p><p>如果是win7点击编辑，将原来的mingw路径删掉，我们机房电脑开机就有个Cena评测机的mingw。在末尾添加新下载的mingw/bin路径，如<code>D:\Ciyang\mingw64\bin</code>，不要忘了分号。</p><p>如果是win10，将原有的mingw移除，添加新下载的mingw路径，与win7同理。</p><p>在终端（cmd或powershell）中输入<code>g++ --version</code>查看版本号是否与下载的一致，如果未知指令表明未成功配置。</p><h4 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h4><p>常用的有<code>-o</code>、<code>-g</code>、<code>-O2</code>、<code>-Wall</code>，还有扩大栈内存指令。</p><p>更多指令，可以看：<a href="https://www.cnblogs.com/bugutian/p/4490902.html" target="_blank" rel="noopener">https://www.cnblogs.com/bugutian/p/4490902.html</a></p><h4 id="相关问题-1"><a href="#相关问题-1" class="headerlink" title="相关问题"></a>相关问题</h4><blockquote><p>Q: 为什么配置完环境变量，vscode（cmd）仍显示未知指令？<br>A: 请确保更改环境变量后重启了vscode（cmd）。</p></blockquote><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>所以为什么要讲远程仓库的使用？当然是存储代码和工作区配置，为了不同电脑（机房、自己的笔记本）能<strong>快速同步</strong>。</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>主要是为了更加酷炫，存储代码，<del>还有搭博客</del>。</p><h4 id="下载方式-1"><a href="#下载方式-1" class="headerlink" title="下载方式"></a>下载方式</h4><p>官方链接：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p><p><strong>不科学上网下载完成率0.1%。</strong></p><p>镜像下载：<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">https://github.com/waylau/git-for-win</a></p><h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><p>随机找到一个指南：<a href="https://www.bootcss.com/p/git-guide/" target="_blank" rel="noopener">https://www.bootcss.com/p/git-guide/</a></p><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><h4 id="建立仓库"><a href="#建立仓库" class="headerlink" title="建立仓库"></a>建立仓库</h4><p>步骤：注册一个账号并登录-&gt;右上角点击加号-&gt;New Repositorie-&gt;填写Repository name（库名）-&gt;可填写Description（描述）-&gt;选择Private（私有）-&gt;可选择license授权规则-&gt;选择.gitignore-&gt;Create。</p><p>如果要存储不能公开的信息就选择Private，如果都可以公开也可以设为Public。</p><p>如果要存储写的C++代码，推荐.gitignore选择C++，就不会存储exe文件和一些其他烂七八糟的文件。</p><h4 id="ssh配置"><a href="#ssh配置" class="headerlink" title="ssh配置"></a>ssh配置</h4><p>一般来说我们可以用https链接对github进行访问，当然<strong>选择ssh更加安全。</strong></p><p>随机找了个教程：<a href="https://blog.csdn.net/u013778905/article/details/83501204" target="_blank" rel="noopener">https://blog.csdn.net/u013778905/article/details/83501204</a></p><h4 id="增加远程仓库"><a href="#增加远程仓库" class="headerlink" title="增加远程仓库"></a>增加远程仓库</h4><p>我理解为给远程仓库地址起个别名</p><pre><code>git remote add &lt;name&gt; &lt;address&gt;example : git remote add cw https://github.com/Xciyang/CodeWork.git</code></pre><h4 id="更新本地仓库-拉取远程仓库"><a href="#更新本地仓库-拉取远程仓库" class="headerlink" title="更新本地仓库/拉取远程仓库"></a>更新本地仓库/拉取远程仓库</h4><p>一般称作更新、拉取。</p><pre><code>git fetch &lt;name&gt; &lt;branch&gt;example : git fetch cw mastergit pull &lt;name&gt; &lt;branch&gt;example : git pull cw master</code></pre><h4 id="暂存更改"><a href="#暂存更改" class="headerlink" title="暂存更改"></a>暂存更改</h4><p>如果你写了一道新题，改了一些代码，就会造成一些更改。此命令默认会按照当前文件夹下的.gitignore进行忽略。<code>.</code>为暂存所有更改。</p><pre><code>git add &lt;file&gt;git add .</code></pre><h4 id="查看当前状态"><a href="#查看当前状态" class="headerlink" title="查看当前状态"></a>查看当前状态</h4><p>查看当前暂存的更改。</p><pre><code>git status</code></pre><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><p>提交当前暂存的更改，并附加某些信息</p><pre><code>git commit -m &quot;Message&quot;</code></pre><h4 id="推送远程仓库"><a href="#推送远程仓库" class="headerlink" title="推送远程仓库"></a>推送远程仓库</h4><pre><code>git push &lt;name&gt; &lt;branch&gt;example : git push cw master</code></pre><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>如果安装了Git，并且存在.git文件夹，vscode会自动启用源代码管理插件。还是比较好用的，<strong>通过点击就能帮你使用指令拉取提交推送文件</strong>。你唯一要做的事就是增加仓库。</p><p>拉取代码的步骤：增加仓库-&gt;拉取自-&gt;选择仓库。</p><p>推送代码的步骤：增加仓库-&gt;更改文件-&gt;暂存所有更改-&gt;编辑消息-&gt;全部提交-&gt;推送到-&gt;选择仓库，然后就完成了一次上传。</p><p><img src="/images/Code3.jpg" alt="Vscode with git"></p><h3 id="相关问题-2"><a href="#相关问题-2" class="headerlink" title="相关问题"></a>相关问题</h3><blockquote><p>Q: Connection reset by [server_ip] port 22 ？<br>A: 发现是网络问题，多试几次就好了。</p></blockquote><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果有什么需要解决的问题可以评论或其他方式指出，希望能帮到一些人。</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 闲聊 </tag>
            
            <tag> 技巧 </tag>
            
            <tag> 颓废 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛 - AtCoder Beginner Contest 142</title>
      <link href="/2019-09/29-atbeginner142/"/>
      <url>/2019-09/29-atbeginner142/</url>
      
        <content type="html"><![CDATA[<p>【AtCoder Beginner Contest 142】<br>比赛链接: <a href="https://atcoder.jp/contests/abc142" target="_blank" rel="noopener">https://atcoder.jp/contests/abc142</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这次比赛略水，真是上分的好比赛。作为仅有300+rating的我直接安排，AK比赛后直接上到900+。</p><p>比赛中有几个题对我还是比较有意义的。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="A"><a href="#A" class="headerlink" title="A"></a>A</h4><p>题意翻译：</p><p>给出一个数$N$，从$1~N$中随机抽取，求抽到奇数的概率。</p><p>这题还挺简单，再看数据范围$1 &lt;= N &lt;= 100$，太水了！</p><h4 id="B"><a href="#B" class="headerlink" title="B"></a>B</h4><p>题意翻译：</p><p>第一行给出一个数$N$代表一个数列的长度，再给出$K$。第二行给出数列各项的值。求数列中大于等于$K$的个数。</p><p>数据范围$1 &lt;= N &lt;= 10^5$，也很水，入门难度。</p><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><p>题意翻译：</p><p>一个教室中有$N$名同学，给出每个同学到达教室时教室中的人$A_i$（包括自己），求出到达顺序。</p><p>数据范围$1 &lt;= N &lt;= 10^5$，正常范围。</p><p>直接上排序，按$A_i$从小到大排序，最后依次输出编号。</p><h4 id="D"><a href="#D" class="headerlink" title="D"></a>D</h4><p>这题看了好长时间才看懂题目。</p><p>题意翻译：</p><p>给出两个数$A$、$B$，求出两个数的共同约数集合的一个子集。这个子集满足各元素两两直接都互质，求出子集最多包含多少元素。</p><p>数据范围$1 &lt;= A,B &lt;= 10^{12}$。</p><p>看起来好像有点麻烦，但实际上我们先求出$C=gcd(A, B)$，那么$C$的约数就是两个数的共同约数。然后再分解质因数即可，题目转换为求一个较大的数的质因数个数。</p><p>核心代码：</p><pre><code class="cpp">long long gcd(long long a, long long b) {    return b ? gcd(b, a % b) : a;}</code></pre><pre><code class="cpp">long long ans= 1;for(long long i= 2; i * i &lt;= m; i++) {    if(m % i == 0) {        ++ans;        while(m % i == 0) m/= i;    }}if(m &gt; 1) ++ans;</code></pre><h4 id="E"><a href="#E" class="headerlink" title="E"></a>E</h4><p>题目到这已经不再那么水了。</p><p>题意翻译：</p><p>给出一个数$N$代表多少上锁的盒子，再给出一个数$M$代表有多少钥匙。每个钥匙需要花$A_i$来购买，可以打开$B_i$个盒子，分别为$C_{ij}$，一个钥匙可以多次使用。问打开所有盒子的最小花费，若无解输出-1。</p><p>数据范围$1 &lt;= N &lt;= 12$、$1 &lt;= M &lt;= 10^3$、$1 &lt;= A_i &lt;= 10^5$</p><p>一开始没看数据范围我以为是舞蹈链，差点自闭了。然后再看数据范围，$N$比较小，于是想到状压DP。</p><p>设置一个数组$F[1 &lt;&lt; N]$表示打开某些盒子的最小花费。</p><p>先枚举$M$个钥匙钥匙，对将钥匙能打开的盒子二进制压缩到数$X$，然后取最小值。</p><p>核心代码：</p><pre><code class="cpp">int getx(int x) {    int res= 0;    for(int i= 1; i &lt;= b[x]; i++) res+= (1 &lt;&lt; (c[x][i] - 1));    return res;}</code></pre><p>然后再写转移方程，由于我比较傻，所以一开始写了$F[i | j] = min(F[i] + F[j])$，结果反而枚举的是$x = i | j$。看起来复杂度$2^{3N}$，然后确实TLE了。</p><p>然后我想把方程改为$F[i] = min(F[i], f[j] + f[i ^ j])$，现在想想好像枚举i,j就可以了，那样复杂度$2^{2N}$好像能过，可惜我比赛时没想这种方法。</p><p>我在比赛时用了更麻烦的方法，因为我想起了之前一道题，在初始化时枚举二进制所有子集全部更新。这样预处理复杂度最大$M * 2^{N}$能过，然后再DP。我就来Blog上擅用搜索引擎，搜到了<a href="https://xciyang.github.io/2019-04/22-luoguat2657/">AT2657 - Mole and Abandoned Mine</a>。</p><p>然后非常套路的预处理出每个数二进制下1的个数。</p><p>核心代码：</p><pre><code class="cpp">int getg(int x) {    int res= 0;    while(x) ++res, x-= (x &amp; -x);    return res;}</code></pre><pre><code class="cpp">int maxx= (1 &lt;&lt; n);for(int i= 0; i &lt; maxx; i++) w[i]= getg(i);memset(f, 0x3f, sizeof(f));for(int i= 1, j; i &lt;= m; i++) {    j= getx(i);    for(int k= j; k; k= (k - 1) &amp; j) f[k]= min(f[k], a[i]);}for(int i= 1; i &lt;= n; i++) {    for(int j= 0; j &lt; maxx; j++) {        if(w[j] != i) continue;        for(int k= 0; k &lt; maxx; k++) {            if(j == k || w[k] &gt;= i || (k &amp; (~j))) continue;            f[j]= min(f[j], f[k] + f[k ^ j]);        }    }}</code></pre><h4 id="F"><a href="#F" class="headerlink" title="F"></a>F</h4><p>终于到最后一题，比较激动。题目还挺复杂的。</p><p>题意翻译：</p><p>给出一个图G，有$N$个点，$M$条单向边，无自环和重边。求出一个子图包含$N’$个点，$M’$为这些点构成的边，满足所有点的入度和出度都为1。如果有多个子图，输出任意一个。输出$N’$和包含的点。无解输出-1。</p><p>数据范围$1 &lt;= N &lt;= 1000$、$1 &lt;= M &lt;= 2000$</p><p>感觉有点难，但毕竟SpecialJudge可以一试，可能会有简单做法。</p><p>先手膜一些图，发现暴力DFS可做。虽然是类似ACM的赛制，但剩余时间不多了，先打个试试吧。</p><p>再膜一下第三组数据，发现只要有环就一定有解。</p><p>因为入度出度为一，可以把这个图称为单环。我们从每个点DFS，让途中经过的点的所有能到达的点入度+1。这样DFS时，如果一个点入度已经大于1，那么从起始点开始一定不能与当前状态构成单环。所以我们每次DFS一个能到达的入度为1的点。点。再记录我们已经走过的点，如果又一次到达某点，那么一定形成了单环。如果某次更新时，途中走过的点的入度&gt;1了，那么这个点也不能与当前状态构成单环。</p><p>解释不清楚，核心代码：</p><pre><code class="cpp">int n, m, tmpx, tmpy, r[1005], st[1005], ans[1005];vector&lt; int &gt; edg[1005];int dfs(int nown) {    if(st[nown]) return 1;    st[nown]= 1;    for(int i= 0; i &lt; edg[nown].size(); i++) {        ++r[edg[nown][i]];        if(r[edg[nown][i]] &gt; 1 &amp;&amp; st[edg[nown][i]]) {            for(int j= 0; j &lt;= i; j++) --r[edg[nown][j]];            st[nown]= 0;            return 0;        }    }    for(int i= 0; i &lt; edg[nown].size(); i++) {        if(r[edg[nown][i]] == 1 &amp;&amp; dfs(edg[nown][i])) {            ans[++ans[0]]= nown;            return 1;        }    }    for(int i= 0; i &lt; edg[nown].size(); i++) --r[edg[nown][i]];    st[nown]= 0;    return 0;}</code></pre><p>我一开始的做法是，枚举每个点为起始点跑一次DFS，直到找出答案，然后就TLE了几个点，但是AC了大部分就还能救。</p><p>既然DFS都是乱搞，那就再加一个随机化。本题时限2s，那么不到1.8s我们就继续DFS。</p><p>然后复杂度我也不太会证明，因为DFS复杂度也非常玄学。大概是O(能过)。最后输出答案我还sort了一遍，因为样例是排序好的。</p><p>核心代码：</p><pre><code class="cpp">srand(time(0));while(clock() &lt; CLOCKS_PER_SEC * 1.8)    if(dfs(rand() % n + 1)) break;</code></pre><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>仍犯了很多错误，A题一开始竟把奇数看成质数，D题枚举因数没开long long。</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 比赛 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 状压DP </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 随机化搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2001 - 统计单词个数</title>
      <link href="/2019-09/25-luogu1026/"/>
      <url>/2019-09/25-luogu1026/</url>
      
        <content type="html"><![CDATA[<p>【NOIP2001】【LuoguP1026】统计单词个数<br>题目链接: <a href="https://www.luogu.org/problem/P1026" target="_blank" rel="noopener">https://www.luogu.org/problem/P1026</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这题要不是有DP标签我还真想不出这种思路。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先题目描述有点不清楚，结合样例更加好理解。差不多为，字符串长度不超过200，单词种类不超过6个，将字符串分40段求最大单词匹配总数。</p><p>然后给出了一个性质，一个字符自能被当做一次首字符，所以就可以用线性做法。</p><p>我们先预处理，求出每个单词在字符串中的所有匹配位置。那么如果几个单词重叠了该怎么办呢？</p><p>很容易想到，字符串中某字符被当做首字母时，匹配最短的单词最优。因此我们可以求出字符串中每一个字符当首字母时的最短长度。</p><p>如果使用string可以使用find函数，但输入时较为麻烦。所以我用char数组存储，并使用strstr函数。</p><p>接下来考虑DP方程。（因为有DP标签，才会拼凑DP思路，考场上还真不一定想出DP解法）</p><p>非常典型的设一个$F[N][K]$，表示处理到第N个字符，分割为K部分。</p><p>先上经典转移方程进行修改。</p><p>$$F[i][j] = max(F[i - 1][j], f[i - 1][j - 1])$$</p><p>但你会发现这样没地方加入预处理出的最短长度。因为后面转移时，单词有可能从中间被切开，这样求出答案就是错了。</p><p>然后就写了个鬼畜的方程，设$W_i$为字符串中第i字符当首字母时最短长度（如果不能匹配则无限大）。</p><p>所以$i$会影响到$i + W_i$后的答案，使他们答案+1，取个max。</p><p>然后我们以j为第一关键字，i为第二关键字枚举即可。因为我们分隔字符只会让答案变小，所以将方程改为。</p><p>$$F[i][j] = max(F[i][j], f[i - 1][j - 1])$$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;using namespace std;int p, k, s, w[405], len[7], a[405], f[205][45];char tmps[405], zd[7][205];int main() {    cin &gt;&gt; p &gt;&gt; k;    for(int i= 0; i &lt; p; i++) cin &gt;&gt; (tmps + i * 20 + 1);    p*= 20;    memset(w, 0x3f, sizeof(w));    cin &gt;&gt; s;    for(int i= 1; i &lt;= s; i++) {        cin &gt;&gt; zd[i], len[i]= strlen(zd[i]);        char *st= strstr(tmps + 1, zd[i]);        while(st) {            w[st - tmps]= min(w[st - tmps], len[i]);            st= strstr(st + 1, zd[i]);        }    }    for(int l= 1; l &lt;= k; l++) {        for(int i= l; i &lt;= p; i++) {            f[i][l]= max(f[i][l], f[i - 1][l - 1]);            if(w[i] != 0x3f3f3f3f) {                for(int j= max(i + w[i] - 1, i + 1); j &lt;= p; j++) f[j][l]= max(f[j][l], f[i][l]) + 1;                if(w[i] == 1) ++f[i][l];            }        }    }    cout &lt;&lt; f[p][k] &lt;&lt; endl;    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2015 - 斗地主增强版</title>
      <link href="/2019-09/20-luogu2540/"/>
      <url>/2019-09/20-luogu2540/</url>
      
        <content type="html"><![CDATA[<p>【NOIP2015】【LuoguP2540】斗地主增强版<br>题目链接: <a href="https://www.luogu.org/problem/P2540" target="_blank" rel="noopener">https://www.luogu.org/problem/P2540</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>暴力出奇迹，<del>我是搜索小名士</del>。</p><p>早在一年前就用贪心完成了普通版，然后现在忘了。</p><p>所以重新写一遍这道题，并且提高难度做增强版。看了仅剩的智商，我选择搜索。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>其实我一开始没有想着去写100分的代码，因为爆搜的复杂度太大，然后这题好像我只会爆搜。</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>首先，很容易想到一种最纯粹的爆搜。每层都将当前剩余牌可行的情况全部枚举判断，然后打出一种可行的牌进入下一层继续搜索。</p><pre><code>搜索是盲目的，我们考虑剪枝。    ——某金牌教练</code></pre><p>一个剪枝是搜索必备，如果当前答案大于或等于已知的最小答案，我们接下来的搜索一定不会更新答案，所以回到上一层。</p><p>然后再继续想，可以加一个启发式剪枝，计算打出所有剩余牌的最大出牌次数。</p><p>用肉眼就能推出，一副牌的最大出牌次数就是牌的数码种类数，两个王在此可以算一种。然后我们计算出当前最大出牌次数加上当前已出牌次数去更新答案，这样就会剪去接下来的一些较差的出牌方法。</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>上面的方法必不能通过本题，不需要尝试也能猜测。所以还要继续剪枝。</p><p>再稍微思考一下，我们每层搜索将全部出牌方法都枚举一遍过于暴力。我们发现，有些出牌方法自始至终永远不可行，并且可行的出牌方法一定越来越少。然后就想到了预处理，我们预处理出最开始的手牌的可行出牌方法。</p><p>这里我的代码极其鬼畜，可能对代码能力有些要求。我用了一些自认为省空间，用起来舒服的方法。将可行方法的信息写成结构体，就不演示，代码中在讲讲。</p><p>最关键的是，我们要计算每种方法的出牌数量，可用来后续我们继续优化。</p><p>这些代码全部可在输入后搜索前执行，我是将这些可行方法放到了vector中。在搜索时，枚举vector的所有元素。再进行一次针对性判断，也就是判断需要打的那几张牌就够了。</p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>我们说记录了每种方法的出牌数量。那我们从大到小排序，这样大概能优化时间，我也不知道。</p><p>在这我们提个醒，如果你将王炸、对子、三张牌放入可行方法中，那你一定会TLE，因为我一开始就是这样。（实践出真知，但其实非加强版不需要，到这里已经通过了）</p><p>我们每层搜索，只枚举上一层搜索枚举没有枚举到的就行了，这是个小剪枝。如果当前方法的出牌数大于当前剩余数量，就直接枚举下一个出牌方法，这也可算上个小剪枝。然后还要再次判断当前剩余的牌下这种方法是否可行。</p><p>还有几个小的要点，我们不管是预处理，还是每层搜索都要用到一个小动态规划，用来求某个牌当左端点，可以连成（单、双、三）顺子的最大长度。鉴于这个题的难度，我相信大家都会这个小动归。</p><p>然后还有几个提示，四带二可以带两个相同数码的对子（俗称炸弹），同理，可以带两个相同数码的一张牌（俗称对子）。然后1当14，大小王当15、16比较好写代码。</p><p>经过多次提交更改调试，终于通过了本题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>不开O2两秒多通过。</p><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;int T, n;struct PAI {    int num, col;} ps[30];// 记录牌的数码，颜色（没啥用）#define SHUNZI 3#define SANDAI 4#define SIDAI 5//顺子、三带、四带struct CP {    // 记录出牌方法的信息    int typ, l, r, k1, k2, siz;    // typ 为宏定义的值    // siz 为出牌数量    // l r 多种使用。l：顺子左端点，其他为最多的那张牌。r：顺子右端点，其他为少的那张牌需要的个数    // k1 k2 三带、四带使用，表示附带哪一（两）张牌。    CP(int typ, int siz, int l= 0, int r= 0, int k1= 0, int k2= 0) {        this-&gt;typ= typ, this-&gt;siz= siz, this-&gt;l= l, this-&gt;r= r, this-&gt;k1= k1, this-&gt;k2= k2;    }    inline int operator&lt;(const CP &amp;c2) const {        return siz &gt; c2.siz;    }};int pai[20], bestans, us3[20], us2[20], us1[20];vector&lt; CP &gt; v;void dfs(int nown, int nowa, int ls) {    if(nowa &gt;= bestans) return;    // 小剪枝    bestans= min(bestans, nowa + nown);    // 更新答案，全部单打（没什么用）    if(!nown) return;    int res= 0, us[4][20];    memset(us, 0, sizeof(us));    for(int i= 2; i &lt;= 16; i++) res+= (pai[i] != 0);    if(pai[15] &amp;&amp; pai[16]) --res;    // 15、16为大小王，主程序中有，大小王可以王炸    bestans= min(bestans, nowa + res);    // 再次更新答案（剪枝）    for(int i= 14, cnt= 0; i &gt;= 2; i--) {        if(pai[i] &lt; 1) continue;        us[1][i]= us[1][i + 1] + 1;        if(pai[i] &lt; 2) continue;        us[2][i]= us[2][i + 1] + 1;        if(pai[i] &lt; 3) continue;        us[3][i]= us[3][i + 1] + 1;    }    // DP出可行的顺子长度    for(int i= ls; i &lt; v.size(); i++) {        if(v[i].siz &gt; nown) continue;        switch(v[i].typ) {            case SHUNZI: {                if(v[i].r - v[i].l + 1 &gt; us[v[i].k1][v[i].l]) break;                for(int j= v[i].l; j &lt;= v[i].r; j++) pai[j]-= v[i].k1;                dfs(nown - v[i].siz, nowa + 1, i + 1);                for(int j= v[i].l; j &lt;= v[i].r; j++) pai[j]+= v[i].k1;                // 判断顺子                break;            }            case SANDAI: {                if(pai[v[i].l] &lt; 3 || pai[v[i].k1] &lt; v[i].r) break;                pai[v[i].l]-= 3, pai[v[i].k1]-= v[i].r;                dfs(nown - v[i].siz, nowa + 1, i + 1);                pai[v[i].l]+= 3, pai[v[i].k1]+= v[i].r;                // 判断三带                break;            }            case SIDAI: {                if(pai[v[i].l] &lt; 4) break;                if(pai[v[i].k1] &lt; 1 || pai[v[i].k2] &lt; 1) break;                if(v[i].r == 2 &amp;&amp; (pai[v[i].k1] &lt; 2 || pai[v[i].k2] &lt; 2)) break;                // 都需要两张                if(v[i].r == 2 &amp;&amp; v[i].k1 == v[i].k2 &amp;&amp; pai[v[i].k1] &lt; 4) break;                // 两对相同数码                if(v[i].r == 1 &amp;&amp; v[i].k1 == v[i].k2 &amp;&amp; pai[v[i].k1] &lt; 2) break;                // 两张相同数码                pai[v[i].l]-= 4;                pai[v[i].k1]-= v[i].r;                pai[v[i].k2]-= v[i].r;                dfs(nown - v[i].siz, nowa + 1, i + 1);                pai[v[i].l]+= 4;                pai[v[i].k1]+= v[i].r;                pai[v[i].k2]+= v[i].r;                // 判断四带            }            default: break;        }    }    return;}int main() {    scanf(&quot;%d%d&quot;, &amp;T, &amp;n);    while(T--) {        memset(pai, 0, sizeof(pai)), bestans= 0x3f3f3f3f;        for(int i= 1; i &lt;= n; i++) {            scanf(&quot;%d%d&quot;, &amp;ps[i].num, &amp;ps[i].col);            if(ps[i].num == 1) ps[i].num= 14;            // 1 当 14            if(ps[i].num == 0) ps[i].num= ps[i].col + 14;            // 大小王当15、16            ++pai[ps[i].num];        }        memset(us3, 0, sizeof(us3)), memset(us2, 0, sizeof(us2)), memset(us1, 0, sizeof(us1));        v.clear();        for(int i= 14; i &gt;= 3; i--) {            if(pai[i] &lt; 1) continue;            us1[i]= us1[i + 1] + 1;            if(pai[i] &lt; 2) continue;            us2[i]= us2[i + 1] + 1;            if(pai[i] &lt; 3) continue;            us3[i]= us3[i + 1] + 1;        }        // DP出顺子长度        for(int i= 2; i &lt;= 16; i++) {            for(int j= 5; j &lt;= us1[i]; j++) v.push_back(CP(SHUNZI, j, i, i + j - 1, 1));            for(int j= 3; j &lt;= us2[i]; j++) v.push_back(CP(SHUNZI, j * 2, i, i + j - 1, 2));            for(int j= 2; j &lt;= us3[i]; j++) v.push_back(CP(SHUNZI, j * 3, i, i + j - 1, 3));            // i 当左端点的顺子            if(pai[i] &lt; 3) continue;            for(int j= 2; j &lt;= 16; j++) {                if(i == j || !pai[j]) continue;                v.push_back(CP(SANDAI, 4, i, 1, j));                if(pai[j] &lt; 2) continue;                v.push_back(CP(SANDAI, 5, i, 2, j));            }            // 三带            if(pai[i] &lt; 4) continue;            for(int j= 2; j &lt;= 16; j++) {                if(i == j || !pai[j]) continue;                for(int k= j + 1; k &lt;= 16; k++) {                    if(i == k || !pai[k]) continue;                    v.push_back(CP(SIDAI, 6, i, 1, j, k));                    if(pai[j] &lt; 2 || pai[k] &lt; 2) continue;                    v.push_back(CP(SIDAI, 8, i, 2, j, k));                }                if(pai[j] == 4) v.push_back(CP(SIDAI, 8, i, 2, j, j));                if(pai[j] &gt; 2) v.push_back(CP(SIDAI, 6, i, 1, j, j));            }            // 四带        }        sort(v.begin(), v.end());        // 排序        dfs(n, 0, 0);        cout &lt;&lt; bestans &lt;&lt; endl;    }    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuoguP1282 - 多米诺骨牌</title>
      <link href="/2019-09/19-luogu1282/"/>
      <url>/2019-09/19-luogu1282/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP1041】多米诺骨牌<br>题目链接: <a href="https://www.luogu.org/problem/P1282" target="_blank" rel="noopener">https://www.luogu.org/problem/P1282</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近重点做动态规划。今天自己成功推出了两三道题，然后开始水多年未更新的博客？</p><p>不能颓废！</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先看数据范围$(N &lt;= 1000, A_i/B_i &lt;= 6)$，那么搜索当然不可能，肯定是考虑动态规划。</p><p>还是回归搜索上，比较好分析。一个牌只有两种状态，旋转与不旋转。我们只需要先找到最小差，再考虑最小旋转次数。</p><p>再看数据范围，$O(6N^2)$不会超时。我们既要求最小差又要求最小最小旋转次数，又可知所有数的总和是确定的，不如就设个背包。</p><p>$F[N(1000)][SUM(6000)]$表示处理到第N个点，上方块的和为SUM时最小的旋转次数。</p><p>一开始除$F[0]$为0外都赋值为无穷大，然后转移$A_i$表示上方块,$B_i$表示下方块。</p><p>$$F[N][i] = min(F[N - 1][i - A_i], F[N - 1][i - B_i] + 1)$$</p><p>然后由于比较闲（怕超空间，然而并不会？）。显然，只要记录N-1的状态，就开了滚动数组$F[2][SUM]$。</p><p>最后先找最小差，我们计算$X = \lfloor\frac{SUM}{2} \rfloor$。</p><p>如果$SUM$为奇，那么上下差不可能为0，并且上方块和为$X$或$X + 1$时差都为1，因此再设置$Y = X + 1$。</p><p>如果$SUM$为偶，那么上方块和为$X$时上下差就为0，$Y = X$。</p><p>我们枚举一个数$i$从0开始，不断增大，表示一个范围（大概是这样）。</p><p>判断$F[N][X - i]$和$F[N][Y + i]$是否有值，若有则输出小的那个。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码较丑，推荐自己写代码。</p><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;using namespace std;int n, a[1005], b[1005], c[1005], f[2][8000], sum;int main() {    cin &gt;&gt; n;    for(int i= 1; i &lt;= n; i++) cin &gt;&gt; a[i] &gt;&gt; b[i], c[i]= a[i] - b[i], sum+= a[i] + b[i];    memset(f, 0x3f, sizeof(f));    f[0][0]= 0;    for(int i= 1; i &lt;= n; i++) {        for(int j= 0; j &lt;= sum; j++) f[i &amp; 1][j]= 0x3f3f3f3f;        for(int j= sum; j &gt;= a[i]; j--) f[i &amp; 1][j]= f[(i &amp; 1) ^ 1][j - a[i]];        for(int j= sum; j &gt;= b[i]; j--) f[i &amp; 1][j]= min(f[i &amp; 1][j], f[(i &amp; 1) ^ 1][j - b[i]] + 1);    }    int res= 0x3f3f3f3f, sum1= sum / 2, sum2= sum1 + sum % 2;    for(int i= 0; i &lt; sum; i++) {        if(sum1 + i &gt; n &amp;&amp; sum2 - i &lt; 1) break;        res= min(f[n &amp; 1][sum1 + i], f[n &amp; 1][sum2 - i]);        if(f[n &amp; 1][sum1 + i] != 0x3f3f3f3f || f[n &amp; 1][sum2 - i] != 0x3f3f3f3f) break;    }    cout &lt;&lt; res &lt;&lt; endl;    return 0;}</code></pre><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>我的代码必须开8000，如果开8000以下好像会RE。</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HAOI2011 - Problem b</title>
      <link href="/2019-09/02-luogu2522/"/>
      <url>/2019-09/02-luogu2522/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP2522】【BZOJ2301】【HAOI2011】Problem b<br>题目链接1: <a href="https://www.luogu.org/problem/P2522" target="_blank" rel="noopener">https://www.luogu.org/problem/P2522</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2301" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=2301</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>机房很久前就人均会反演，今天我终于看懂是啥了。</p><p>然后把整除分块理解透彻！</p><a id="more"></a><p>先做道最简单的题练练手，感谢<a href="https://oi-wiki.org/math/mobius/" target="_blank" rel="noopener">莫比乌斯反演 - OI WIKI</a>和<a href="https://ctz45562.github.io/" target="_blank" rel="noopener">大佬CTZ</a>的帮助。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>本题题目翻译成公式：</p><p>$$ \sum_{x=a}^{b}\sum_{y=c}^{d} [gcd(x,y)=k] $$</p><p>可以按照二维前缀和的思想分治一下，先设</p><p>$$ F(n,m) = \sum_{i=1}^{n}\sum_{j=1}^{m} [gcd(i,j)=k] $$</p><p>那么</p><p>$$ ans = F(b,d) - F(b,c-1) - F(a-1,d) + F(a-1,c-1) $$</p><p>然后对F(n,m)进行化简，首先两边同除以K，至于可行性，记录一下大佬的亲自讲解</p><p>如果原式中$gcd(i,j)=k$，那么$i,j$一定是k的倍数，现在设</p><p>$$ i = i’ * k , j = j’ * k $$ </p><p>那么一定$gcd(i’,j’)=1$，所以得出</p><p>$$ F(n,m) = \sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor} [gcd(i,j)=1] $$</p><p>这就可以莫比乌斯反演了，首先记住一个通用公式</p><p>$$ [gcd(i,j)=1] = \sum_{d \mid gcd(i,j)}\mu(d) $$</p><p>然后代入F(n,m)中</p><p>$$ F(n,m) = \sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor} \sum_{d \mid gcd(i,j)}\mu(d) $$</p><p>先默认$n &lt; m$，那么可知$d \in [1,\lfloor \frac{n}{k} \rfloor]$</p><p>然后改变一下位置</p><p>$$ F(n,m) = \sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\mu(d)\sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}[i \mid p]\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor}[j \mid p] $$</p><p>注意，右边是一个整体，后面的$[i\mid d],[j\mid d]$取1或0，也就是表示能否整除。</p><p>这样还能进一步化简，根据常识易得</p><p>$$ \sum_{i=1}^{n} i \mid p = \lfloor \frac{n}{p} \rfloor$$</p><p>从而推出</p><p>$$ F(n,m) = \sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\mu(d)\lfloor \frac{n}{kd} \rfloor{\lfloor \frac{m}{kd} \rfloor} $$</p><p>式子终于推完了，然后就是整除分块。</p><p>其实我一开始没看懂整除分块是因为不知道有啥用，其实是用来$O(\sqrt{n})$求这个式子</p><p>$$ \sum_{i=1}^{n} \lfloor \frac{i}{p} \rfloor $$</p><p>这样就好说了，我们知道某些$\lfloor \frac{i}{p} \rfloor$的值是相等的，并且这些项在一个连续区间$[l,r]$内。</p><p>所以枚举时找一个右端点$r$，直接计算$[i,r]$这个区间的结果，这个$r= \lfloor \frac{n}{\lfloor \frac{n}{i} \rfloor} \rfloor$。</p><p>具体证明不难，<a href="https://oi-wiki.org/math/mobius/#_3" target="_blank" rel="noopener">数论分块 - OI WIKI</a>有略证。</p><p>然后就写代码，还需要写莫比乌斯函数筛、前缀和。</p><p>这个莫比乌斯函数筛我有待研究。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#define MAXA 50001using namespace std;int miu[50005], notzs[50005], zs[50005], sum[50005];void shai() {    notzs[1]= 1, miu[1]= 1;    for(int i= 2; i &lt;= MAXA; i++) {        if(!notzs[i]) miu[i]= -1, zs[++zs[0]]= i;        for(int j= 1; j &lt;= zs[0] &amp;&amp; i * zs[j] &lt;= MAXA; j++) {            notzs[i * zs[j]]= 1;            if(i % zs[j] == 0) {                miu[i * zs[j]]= 0;                break;            }            miu[i * zs[j]]= -miu[i];        }    }    for(int i= 1; i &lt;= MAXA; i++) sum[i]= sum[i - 1] + miu[i];    return;}int query(int n, int m, int k) {    int res= 0;    n/= k, m/= k;    if(n &gt; m) swap(n, m);    for(int i= 1, j; i &lt;= n; i= j + 1) {        j= min(n / (n / i), m / (m / i));        res+= (sum[j] - sum[i - 1]) * (n / i) * (m / i);    }    return res;}#define query(x, y) query(x, y, k)int t;int main() {    shai();    cin &gt;&gt; t;    int a, b, c, d, k;    while(t--) {        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; k;        cout &lt;&lt; query(b, d) - query(b, c - 1) - query(a - 1, d) + query(a - 1, c - 1) &lt;&lt; endl;    }    return 0;}</code></pre><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>然后你还可以把<a href="https://www.luogu.org/problem/P3455" target="_blank" rel="noopener">【LuoguP3455】【POI2007】ZAP-Queries</a> 一块通过了，只需要改一下输入输出。</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
            <tag> 整除分块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技巧 - 写一个应用于Luogu的油猴插件</title>
      <link href="/2019-08/22-luogusearcher/"/>
      <url>/2019-08/22-luogusearcher/</url>
      
        <content type="html"><![CDATA[<p>写一个应用于Luogu的油猴插件，拥有在任意页面上快捷搜索跳转题目的功能。</p><p>安装链接（插件发布地址）: <a href="https://greasyfork.org/zh-CN/scripts/389291-luogu-quick-searcher" target="_blank" rel="noopener">https://greasyfork.org/zh-CN/scripts/389291-luogu-quick-searcher</a></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>应同机房大佬要求，做一个洛谷快捷题目搜索的油猴插件。</p><h4 id="一些鲜为人知的历史"><a href="#一些鲜为人知的历史" class="headerlink" title="一些鲜为人知的历史"></a>一些鲜为人知的历史</h4><p>其实这个早在洛谷??.9版本（大概是18年底的一次UI更新）就写过一次了。</p><p>那段时间luogu把搜索框去掉了，以致于不能方便的搜索题目，才写了这个插件，并且使用luogu很早前搜索框的css。</p><p>过了半个月洛谷又更新了，然后右上角个人头像旁边多了搜索框。我当时直接退坑了，后来没多长时间插件就无法使用了。</p><h4 id="为什么要重构插件"><a href="#为什么要重构插件" class="headerlink" title="为什么要重构插件"></a>为什么要重构插件</h4><p>然后我发现洛谷新的搜索框非常不贴近人意（小声），然后同机房大佬又一次要求。</p><p>趁着没东西颓废一晚上颓了出来，恰好半年时间，我的JS、HTML能力已经大幅提高，所以这个插件做起来相当简单。</p><h4 id="那现在和半年前有什么区别"><a href="#那现在和半年前有什么区别" class="headerlink" title="那现在和半年前有什么区别"></a>那现在和半年前有什么区别</h4><p>首先洛谷把半年前已经废了的CSS都删了（包括半年前的搜索框CSS）。</p><p>并且洛谷的页面也有很大变化。误人子弟的说一句，好像洛谷现在是二次加载动态渲染？然后不用jQuery了？</p><p>然后是个人原因，现在的我有一定JS写代码能力，对一些基础语法比较熟练，熟悉很多方法。之前傻傻分不清jQuery和Web API的函数，只能一次一次测试来运用（哪个能用就用哪个）。</p><h3 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h3><p>可以先进入文章开头的链接查看介绍，也可以查看全部代码。</p><p>首先我们设定 F1 打开搜索框，若已打开就关闭，F1键码为112。注册按键：</p><pre><code class="js">document.onkeydown = function (event) { if (event.keyCode == 112) mainfunc(); };</code></pre><p>mainfunc 函数就是用来打开关闭对话框。但是这个页面本来没有对话框，该怎么打开呢？</p><p>那么就需要新建，新建需要在网页中插入HTML。根据经验，我们需要在页面加载完成之后才能插入HTML，否则有不可预料的BUG。判断网页是否加载完成：</p><pre><code class="js">if (document.readyState == &quot;complete&quot;) {    /*    Write your code here.    */}</code></pre><p>然后就是新建元素、改样式、插入到网页中，这些很语法基础就直接给出，相关函数请自行了解。</p><p>我们选择把元素加入到页面的app（洛谷设计的）中。初始化：</p><pre><code class="js">var newElement = document.createElement(&quot;div&quot;);newElement.id = &quot;CiyangSearch&quot;;newElement.innerHTML = &quot;&lt;input type = &#39;text&#39;&gt; | &lt;a&gt;&lt;i class = &#39;fas fa-search&#39;&gt;&lt;/i&gt;&lt;/a&gt; | &lt;a&gt;&lt;i class= &#39;fa fa-cog&#39;&gt;&lt;/i&gt;&lt;/a&gt;&quot;;newElement.style.position = &quot;fixed&quot;;newElement.style.zIndex = &quot;2&quot;;newElement.style.top = &quot;10%&quot;;newElement.style.left = &quot;30%&quot;;newElement.style.width = &quot;240px&quot;;newElement.style.backgroundColor = &quot;rgb(128,128,128)&quot;;var appElement = document.getElementById(&#39;app&#39;);appElement.appendChild(newElement);</code></pre><p>上面的代码就已经可以打开一个搜索框，还有搜索按钮和设置按钮，但非常丑陋。</p><p>只有搜索框但是不能进行搜索，所以要绑定点击搜索按钮和回车键，回车键的键码为13。注册函数：</p><pre><code class="js">newElement.children[0].onkeydown = function (event) {    if (event.keyCode == 13) {        var str = this.value;        /*        Write your code here.        */    }    return;};newElement.children[1].onclick = function () {    var str = newElement.children[0].value;    /*    Write your code here.    */    return;};</code></pre><p>str就是搜索框中输入的内容，获取后就可以跳转题目了。</p><p>我们想让它可自动识别是否为题目，如果是就打开题目页面，否则就打开题目列表进行搜索。</p><p>比如：输入P1001打开P1001题目页面，输入1001就进入题目列表搜索1001。</p><p>因为OI不学正则表达式，所以一般情况下我们想到if判断。这非常麻烦，会使代码复杂冗长，这个时候正则表达式就能大显身手了。</p><p>此处借鉴了另一个油猴插件<a href="https://greasyfork.org/zh-CN/scripts/388947-luogu-problem-jumper" target="_blank" rel="noopener">Luogu Problem Jumper</a>的匹配代码，应该是匹配洛谷题目最好的代码。</p><pre><code class="js">function judegeProblem(str) {    if (str.match(/AT[0-9]{1,4}/) == str) return true;    if (str.match(/CF[0-9]{1,4}[A-Z][0-9]{0,1}/) == str) return true;    if (str.match(/SP[0-9]{1,5}/) == str) return true;    if (str.match(/P[0-9]{4}/) == str) return true;    if (str.match(/UVA[0-9]{1,5}/) == str) return true;    if (str.match(/U[0-9]{1,6}/) == str) return true;    if (str.match(/T[0-9]{1,6}/) == str) return true;    return false;}</code></pre><p>接下来是打开页面，有两种方式，前者是从当前页跳转，后者是新标签页打开。</p><pre><code class="js">window.location = url;window.open(url);</code></pre><p>我们想要设计为用户选择首选方式，可首选其中一种方式，搜索时先输入 # 才能用优先级低的方式。</p><pre><code class="js">var dUrl = 1;/*A lot of code.*/function judgeURL(way, str) {    if (str.length == 0) return;    if (judegeProblem(str)) go(dUrl ^ way, &#39;/problemnew/show/&#39; + str);    else go(dUrl ^ way, &#39;/problem/list?keyword=&#39; + str);    return;}function go(k, url) {    if (k == 0) window.location = url;    else window.open(url);    removek();}</code></pre><p>dUrl设为1就是首选新标签页，way表示是否先输入了 # 。</p><p>再回到绑定按键、点击搜索按钮的地方，比较懒所以代码没有合并到一起：</p><pre><code class="js">newElement.children[0].onkeydown = function (event) {    if (event.keyCode == 13) {        var str = this.value;        if (str.length == 0) return;        if (str[0] == &#39;#&#39;) judgeURL(1, str.substring(1, str.length));        else judgeURL(0, str);    }    return;};newElement.children[1].onclick = function () {    var str = newElement.children[0].value;    if (str.length == 0) return;    if (str[0] == &#39;#&#39;) judgeURL(1, str.substring(1, str.length));    else judgeURL(0, str);    return;};</code></pre><p>主体基本完成，然后就是一些小功能。若打开搜索框，再次按下 F1 关闭。使设置打开页面方式更加可视化，完善设置按钮。</p><p>在 mainfuc 函数中，先加入一行代码：</p><pre><code class="js">if (removek()) return;</code></pre><p>之前我们为了方便，将搜索框整体的元素ID改为了CiyangSearch，可以直接根据此ID来获取控件。代码简单：</p><pre><code class="js">function removek() {    var search = document.getElementById(&quot;CiyangSearch&quot;);    if (search) {        search.parentNode.removeChild(search);        return true;    }    return false;}</code></pre><p>完善设置按钮也很简单，首先在 mainfunc 绑定按键、搜索按钮处理下加入一行代码：</p><pre><code class="js">newElement.children[2].onclick = function () { setLink(); };</code></pre><p>先介绍两个油猴自带的函数，GM_setValue和GM_getValue，可以非常方便的存储和读取数据，具体原理可以自行搜索。</p><p>点击设置按钮后跳出对话框，用户输入1或者0，设置首选方式。将之前的dUrl设置为读取数据。</p><pre><code class="js">var dUrl = GM_getValue(&quot;default_way&quot;);function setLink() {    var defaultWay = prompt(&quot;请输入首选打开网页方式，1 为新标签页，0为从当前页跳转。当前为&quot; + dUrl + &quot;，搜索先输入 # 可使用优先级低的方式。&quot;);    if (defaultWay == null) return;    if (defaultWay != &quot;0&quot; &amp;&amp; defaultWay != &quot;1&quot;) {        alert(&quot;您的输入有误&quot;);        return;    }    GM_setValue(&quot;default_way&quot;, defaultWay);    location.reload();}</code></pre><p>我们还有需要一个使搜索的输入框自动获得焦点的小特性，只要在元素（控件）插入页面后加入一行代码：</p><pre><code class="js">newElement.children[0].focus();</code></pre><p>然后8.23美化了一下UI，具体就不给出了。增加了设置背景颜色，换汤不换药。其中较为重要的修改：</p><pre><code class="js">var dUrl = GM_getValue(&quot;default_way&quot;), bgColor = GM_getValue(&quot;searcher_bg&quot;);if (bgColor == undefined) {    GM_setValue(&quot;searcher_bg&quot;, &quot;rgba(135,206,235,0.5)&quot;);    bgColor = &quot;rgba(135,206,235,0.5)&quot;;}newElement.innerHTML = &quot;&lt;input type = &#39;text&#39;&gt; | &lt;i class = &#39;fas fa-search&#39;&gt;&lt;/i&gt; | &lt;i class= &#39;fas fa-cog&#39;&gt;&lt;/i&gt; | &lt;i class =&#39;fas fa-crosshairs&#39;&gt;&lt;/i&gt; |&quot;;function setBGColor() {    var searcherBG = prompt(&quot;请输入背景颜色码，支持RGB和十六进制。当前为&quot; + bgColor + &quot;。&quot;, bgColor);    if (searcherBG == null) return;    GM_setValue(&quot;searcher_bg&quot;, searcherBG);    location.reload();}</code></pre><p>分别处于代码各个位置，思路与设置打开方式类似，自行了解即可。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>还有什么问题可以在博客或发布网站评论提出，也可以用社交软件联系我。</p><p>在greasyfork发布，链接：<a href="https://greasyfork.org/zh-CN/scripts/389291-luogu-quick-searcher" target="_blank" rel="noopener">https://greasyfork.org/zh-CN/scripts/389291-luogu-quick-searcher</a></p><p>如果时间充足还会一直更新，有要求也可以提出。</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> 颓废 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Daily Literary - 文艺日常</title>
      <link href="/2019-08/21-literatureandart/"/>
      <url>/2019-08/21-literatureandart/</url>
      
        <content type="html"><![CDATA[<p>最近更新: 2019.09.20</p><p>图片来源于网络，如有侵权请联系我。</p><p>日常收集文艺语句，来源于知乎、网页、原创。</p><a id="more"></a><ol><li><p>喜欢上一个人很容易，爱上一个人很难，但是忘掉一个人是最难的。</p></li><li><p>喜欢一样东西就不要问别人好不好看。这个世界上永远没有感同身受，真正能治愈自己的，只有你自己。</p></li><li><p>太敏感的人会体谅到他人的痛苦，自然就无法轻易做到坦率。所谓的坦率，其实就是暴力。</p></li><li><p>世上的事情都经不起推敲，一推敲，哪一件都藏着委屈。</p></li><li><p>我慢慢明白了我为什么不快乐，因为我总是期待一个结果。</p></li><li><p>人生所有的希望，都是在绝望中得到了领悟。</p></li><li><p>拥有的总是不安，没得到的都喜欢 你和余生正相反，而我曾一度，混为一谈</p></li></ol><hr><h4 id="关于本篇"><a href="#关于本篇" class="headerlink" title="关于本篇"></a>关于本篇</h4><p>持续更新，作者也不知道怎么回事就开了这个专栏。</p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
            <tag> 语录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuoguP1456 - Monkey King</title>
      <link href="/2019-08/20-luogu1456/"/>
      <url>/2019-08/20-luogu1456/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP1456】Monkey King<br>题目链接: <a href="https://www.luogu.org/problem/P1456" target="_blank" rel="noopener">https://www.luogu.org/problem/P1456</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>左偏树真是我见过最好写的（高级？）数据结构。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题其实就是个板子题。</p><p>看题意发现要维护大根堆，然后还有合并操作，那直接上左偏树。</p><p>话说左偏树找根的时候需要路径压缩，不然会被卡。所以直接上并查集，这样复杂度就正确了。</p><p>假设 X 和 Y 打架，我们先找他们的根 FX 和 FY 就是最牛叉的朋友，如果是一个人就输出-1，否则给 FX 和 FY的值都减半。</p><p>然后合并 FX 和 FY 的左右子树，视为将 FX 、FY 删去。</p><p>最后再把减半后的值当做一个子树再插入就完成了。</p><p>提醒一下，这题多组数据，我第一次交就被坑了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;using namespace std;int n, m, v[100005], f[100005], l[100005], r[100005], d[100005];int tmpx, tmpy;inline int getf(int x) {    return f[x] == x ? x : f[x]= getf(f[x]);}int merge(int x, int y) {    if(!x || !y) return x + y;    if(v[x] &lt; v[y]) swap(x, y);    r[x]= merge(r[x], y), f[l[x]]= f[r[x]]= f[x]= x;    if(d[r[x]] &gt; d[l[x]]) swap(r[x], l[x]);    d[x]= d[r[x]] + 1;    return x;}int solve(int x, int y) {    x= getf(x), y= getf(y);    if(x == y) return -1;    v[x]&gt;&gt;= 1, v[y]&gt;&gt;= 1;    int newx= merge(l[x], r[x]), newy= merge(l[y], r[y]);    l[x]= r[x]= l[y]= r[y]= d[x]= d[y]= 0;    newx= merge(newx, x), newy= merge(newy, y), newx= merge(newx, newy);    return v[newx];}int main() {    while(cin &gt;&gt; n) {        for(int i= 1; i &lt;= n; i++) cin &gt;&gt; v[i], f[i]= i, l[i]= r[i]= d[i]= 0;        cin &gt;&gt; m;        for(int i= 1; i &lt;= m; i++) {            cin &gt;&gt; tmpx &gt;&gt; tmpy;            cout &lt;&lt; solve(tmpx, tmpy) &lt;&lt; endl;        }    }    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 左偏树 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新开始</title>
      <link href="/2019-08/15-chong-xin-kai-shi/"/>
      <url>/2019-08/15-chong-xin-kai-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="关于重新搭建"><a href="#关于重新搭建" class="headerlink" title="关于重新搭建"></a>关于重新搭建</h3><p>之前的主题用了半年多了，打算换个主题提高RP？</p><p>然后又是先试了一个主题，发现太简洁没几个功能然后换成了现在这个。</p><p>总体来说还不错，不知道博客还能用几天。唉~</p><p>关于现在搭建的方法,使用Github + Hexo + Nexmoe.</p><a id="more"></a><p>下面都是从第一篇博客复制过来的，有细微修改。</p><br><p>测试一下HelloWorld</p><pre><code class="cpp">#include &lt;iostream&gt;int main() {  std::cout &lt;&lt; &quot;Hello, world!&quot; &lt;&lt; std:endl;  return 0;}</code></pre><br><p>测试一下LaTeX</p><p>$$ \LARGE{S_k=\sum_{i=1}^{k}a_i} $$</p><br><p>测试一下内嵌JS</p><p style="text-align: center"><a href="/" style="font-size:25px; text-align:center;"> Ciyang's Blog </a></p><br><h3 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h3><p>作者:Ciyang </p><p>现于 SD-SLYZ 上高中,是一名现役OIer,爱搞一些黑科技,写点高（la）端（ji）题解,出点毒（jian）瘤（dan）题,其实还仍是个中二少年……</p><p>顺便说一句，头像还是很沙雕，所以凑活着看，以后再改。</p><p>然后最近颓的挺多，但是都没什么意义，希望有大佬跟给我推荐一些颓的东西。</p><p>联系方式:</p><pre><code>  QQ: 896681584  Github: Xciyang  网站通用昵称: Ciyang</code></pre><h3 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h3><p>这个博客不一定只发题解,多数应该还是一些黑科技,学习总结和经历之类的东西吧.</p><h3 id="利益相关"><a href="#利益相关" class="headerlink" title="利益相关"></a>利益相关</h3><p>欢迎收藏~互加友链在那个友链页面评论吧！</p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuoguP5440 - 【XR-2】奇迹</title>
      <link href="/2019-07/15-luogu5440/"/>
      <url>/2019-07/15-luogu5440/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP5440】【XR-2】奇迹<br>题目链接: <a href="https://www.luogu.org/problemnew/show/P5440" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P5440</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>不要学那些很酷很炫的算法，不要看不起那些基础算法，比如说搜索。</p></blockquote><p>然后我就天天做搜索，最后退役。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>正解搜索或暴力枚举，代码区已经几乎是相同的思路，只是有些大佬有很多优化，效率快，但是特批有很多并且极其复杂。经对比我觉得我的代码可视性还是不错的，并且没有乱七八糟的特判，可以说是常规DFS代码+筛质数优化的代码。</p><p>下面说一下思路。首先题目很好理解，一个有效日期，日、月+日、年+月+日组成的数字均为质数，那就先不考虑优化，直接上模拟。</p><p>按DFS的常规模板（自己总结出来的），先有一个参数，代表搜索到哪一位。在本题中就是日期的第几位数字，我选择的顺序为：日-&gt;月-&gt;年，这样可以逐层判断，而且效率较高代码优雅。</p><p>第二个参数，是为了方便和小幅提升效率，我们把已经枚举完的位编成一个整数$ x $，然后日就是 x % 100 ，月就是 x % 10000 /  100 ，年就是x / 10000<br>。</p><p>这道题中还需要考虑到特殊情况，是否必须为闰年或大月。我为了方便，当成两个参数来传递，现在想想好像可以改一个。因为一个只考虑年份，一个只考虑月份。DFS带详细注释代码如下，自己觉得算得上优雅。</p><pre><code class="cpp">// 调用方法: dfs(8, 0, 0, 0)int dfs(int nown, int num, int rn, int jy) {    if(nown == 0) {    // 日期全部枚举完        if(num / 10000 == 0) return 0;    // 非常关键，0不能当年份（我一开始没加就得10分）        if(rn &amp;&amp; pdrn(num / 10000) == 0) return 0;    // 如果必须为闰年就判断年份        return pdzs(num);    // 总日期还得为质数    }    if(nown == 6) {    // 枚举完日        if(num == 0 || num &gt; 31 || !pdzs(num)) return 0;    // 如果是等于0日、31日以上或不是质数就return        if(num == 31) jy= 1;    // 如果是31日就必须为大月    }    if(nown == 4) {    // 判断完日、月        if(num &lt; 32 || num &gt; 1231 || !pdzs(num)) return 0;    // 如果是等于0月、13月以上或不是质数就return        if(jy &amp;&amp; !yue[num / 100]) return 0;    // 如果必须为大月就判断月份num / 100，yue数组代表是否为大月        if(num / 100 == 2) {            if(num % 100 &gt; 29) return 0;        // 2月最多29天            if(num % 100 == 29) rn= 1;        // 如果是2月29日就必须为闰年        }    }    if(a[nown] != -1) return dfs(nown - 1, a[nown] * p10[8 - nown] + num, rn, jy);    // 如果输入给出就直接进入下一层，p10数组相当于pow10    int res= 0;    for(int i= 0; i &lt;= 9; i++) res+= dfs(nown - 1, i * p10[8 - nown] + num, rn, jy);    // 枚举0~9为此位    return res;}</code></pre><p>如果是用复杂度为$ O(\sqrt{n}) $ 的判断质数就只有90分，所以还得用线性筛预处理出$  \sqrt{100000000} = 10000 $ 以内的质数，然后我们判断质数就对这些数取模就行了，具体原理不再解释。</p><pre><code class="cpp">// 筛10005以内的质数inline void init() {    flag[1]= 1;    for(int i= 2; i &lt; 10005; i++) {        if(!flag[i]) prim[++tot]= i;        for(int j= 1; j &lt;= tot; j++) {            if(i * prim[j] &gt;= 10005) break;            flag[i * prim[j]]= 1;            if(i % prim[j] == 0) break;        }    }    return;}// 判断质数inline int pdzs(int x) {    if(x &lt; 2) return 0;    for(int i= 1; i &lt;= tot; i++)        if(x % prim[i] == 0) return x == prim[i];    return 1;}</code></pre><p>然后就可以愉快的AC了，总代码只有70行且简单优雅。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;math.h&gt;using namespace std;int n, a[9], prim[10005], flag[10005], tot;char tmpc;int p10[]= {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000};int yue[]= {0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1};inline void init() {    flag[1]= 1;    for(int i= 2; i &lt; 10005; i++) {        if(!flag[i]) prim[++tot]= i;        for(int j= 1; j &lt;= tot; j++) {            if(i * prim[j] &gt;= 10005) break;            flag[i * prim[j]]= 1;            if(i % prim[j] == 0) break;        }    }    return;}inline int pdrn(int x) {    return (x % 4 == 0 &amp;&amp; x % 100 != 0) || (x % 400 == 0 &amp;&amp; x % 3200 != 0);}inline int pdzs(int x) {    if(x &lt; 2) return 0;    for(int i= 1; i &lt;= tot; i++)        if(x % prim[i] == 0) return x == prim[i];    return 1;}int dfs(int nown, int num, int rn, int jy) {    if(nown == 0) {        if(num / 10000 == 0) return 0;        if(rn &amp;&amp; pdrn(num / 10000) == 0) return 0;        return pdzs(num);    }    if(nown == 6) {        if(num == 0 || num &gt; 31 || !pdzs(num)) return 0;        if(num == 31) jy= 1;    }    if(nown == 4) {        if(num &lt; 32 || num &gt; 1231 || !pdzs(num)) return 0;        if(jy &amp;&amp; !yue[num / 100]) return 0;        if(num / 100 == 2) {            if(num % 100 &gt; 29) return 0;            if(num % 100 == 29) rn= 1;        }    }    if(a[nown] != -1) return dfs(nown - 1, a[nown] * p10[8 - nown] + num, rn, jy);    int res= 0;    for(int i= 0; i &lt;= 9; i++) res+= dfs(nown - 1, i * p10[8 - nown] + num, rn, jy);    return res;}char get() {    char ch= getchar();    while((ch &lt; &#39;0&#39; || ch &gt; &#39;9&#39;) &amp;&amp; ch != &#39;-&#39;) ch= getchar();    return ch;}void put(int x) {    if(x &gt; 9) put(x / 10);    putchar(&#39;0&#39; + x % 10);    return;}int main() {    init(), cin &gt;&gt; n;    while(n--) {        for(int i= 1; i &lt;= 8; i++) tmpc= get(), a[i]= (tmpc == &#39;-&#39; ? -1 : tmpc - &#39;0&#39;);        put(dfs(8, 0, 0, 0)), putchar(&#39;\n&#39;);    }    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技巧 - 在OJ上出交互题</title>
      <link href="/2019-07/12-zai-oj-shang-chu-jiao-hu-ti/"/>
      <url>/2019-07/12-zai-oj-shang-chu-jiao-hu-ti/</url>
      
        <content type="html"><![CDATA[<p>有关在OJ上出交互题的一些技巧</p><p>本博客所指的OJ仅指SYZOJ，即搭建LOJ使用的在线评测系统。</p><p>SYZOJ源码链接(Github仓库): <a href="https://github.com/syzoj/syzoj" target="_blank" rel="noopener">https://github.com/syzoj/syzoj</a></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在校内使用SYZOJ搭建内网OJ已经有些时日了。其实之前就看到有交互题这一说，但一直没有去关注和了解。</p><p>今天正颓废时，突然想起了交互题，然后开始便研究。</p><p>本以为是testlib，现在才发现SYZOJ有自己特有的交互方式。</p><h3 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h3><p>SYZOJ帮助中的原话如下：</p><blockquote><p>交互器和选手程序同时运行，交互器的标准输入和标准输出连接了选手程序的标准输出和标准输入 —— 交互通过输入输出进行。<br>交互器运行时，其目录下会有 input 文件，表示该测试点的输入文件。交互器运行结束后，需要将选手得分写入 score.txt 文件中，并将提供给用户的额外信息输出到标准错误输出（stderr）中。<br>如果您希望实现 NOI 试题风格的交互（选手通过函数调用与交互器交互），请编写一些头文件作为「附加源文件」并封装标准输入输出的交互。</p></blockquote><p>要学习出交互题，前提是要会出一道传统题。对于出传统题就需要知道的知识就不予讲解。</p><h4 id="如何交互"><a href="#如何交互" class="headerlink" title="如何交互"></a>如何交互</h4><p>根据帮助，<code>交互通过输入输出进行</code>，那么意为选手程序使用std::cout输出给交互器程序，而交互器程序使用std::cin读取选手的输出，反过来也是如此。</p><p>LOJ中交互题系统测试题<a href="https://loj.ac/problem/6" target="_blank" rel="noopener">Guess Number</a>可以自行了解一下。</p><h4 id="输入文件"><a href="#输入文件" class="headerlink" title="输入文件"></a>输入文件</h4><p>根据帮助，<code>目录下会有 input 文件，表示该测试点的输入文件</code>，那么就需要用文件流操作，我选择使用std::ifstream来读取input文件。交互器从输入文件读取一个整数的实例：</p><pre><code class="cpp">#include &lt;fstream&gt;int n;int main() {    std::ifstream datin(&quot;input&quot;);    datin &gt;&gt; n;    return 0;}</code></pre><h4 id="选手得分"><a href="#选手得分" class="headerlink" title="选手得分"></a>选手得分</h4><p><code>将选手得分写入 score.txt 文件中</code> 也是同理，使用std::ofstream打开score.txt文件，写入一个数即可。</p><p>可以根据查询次数等信息来确定得分，支持部分正确（0 &lt;= 得分 &lt;= 100）。</p><h4 id="额外信息"><a href="#额外信息" class="headerlink" title="额外信息"></a>额外信息</h4><p>继续看帮助，<code>将提供给用户的额外信息输出到标准错误输出（stderr）中</code>。额外信息就是测试点的反馈信息，我们常在传统题WA时看到<code>Files user_out and answer differ</code>。给出一个交互器判定选手输出的实例（不完整）：</p><pre><code class="cpp">#include &lt;iostream&gt;int n, ans;int main() {    // main_code    std::cerr &lt;&lt; &quot;Wrong answer! The correct answer is &quot; &lt;&lt; ans &lt;&lt; &quot; .&quot; &lt;&lt; std::endl;    return 0;}</code></pre><p>当WA时输出正确的答案以供选手参考，与Special Judge类似。</p><h4 id="封装交互"><a href="#封装交互" class="headerlink" title="封装交互"></a>封装交互</h4><p>帮助最后一句，是可选的。我们可以封装标准输入输出的交互，我们对于C++而言，可以写一个头文件interactor.h。</p><p>我们模拟一个很简单的题来示范interactor.h，选手输出两个数（代表一个坐标）与交互器进行交互，交互器返回一个数表示与终点的曼哈顿距离。</p><p>代码如下（只是interactor.h）：</p><pre><code class="cpp">#include &lt;iostream&gt;int query(int x, int y){    std::cout &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; y &lt;&lt; std::endl &lt;&lt; std::flush;    int res;    std::cin &gt;&gt; res;    return res;}</code></pre><p>你可以把它当做附加源文件提供给选手，方便不太懂的选手交互。</p><h4 id="数据判断"><a href="#数据判断" class="headerlink" title="数据判断"></a>数据判断</h4><p>在交互过程中，交互器需要面对选手提供的各种输出数据。这些数据可能不合法，为了节省代码，介绍一个assert函数，貌似testlib中有类似的函数。</p><pre><code class="cpp">template &lt; typename T &gt;inline void assert(const T &amp;condition, const std::string &amp;message) {    if(!condition) {        std::cerr &lt;&lt; message &lt;&lt; std::endl;        score &lt;&lt; -1 &lt;&lt; std::endl;        exit(0);    }    return;}</code></pre><p>此函数是模板函数，刚入门C++的人可能不太懂。对于这个函数来讲，模板就是为了适用所有类型。condition为一个表达式，message为提供的额外信息。</p><p>判断选手输出是否为整数可以用以下代码，如果不是，cin就会出错，然后执行if中的语句（选手的输出等同于交互器的输入）。</p><pre><code class="cpp">int x, y;assert(std::cin &gt;&gt; x &gt;&gt; y, &quot;Invalid `x` or `y`!&quot;);</code></pre><p>交互器判断选手输出的数的范围也是如此：</p><pre><code class="cpp">assert(x &gt;= 1 &amp;&amp; x &lt;= n &amp;&amp; y &gt;= 1 &amp;&amp; y &lt;= n, &quot;`x` and `y` must in [1, n]!&quot;);</code></pre><h4 id="data-yml"><a href="#data-yml" class="headerlink" title="data.yml"></a>data.yml</h4><p>写好标程、题面，造好数据之后，对于SYZOJ的交互题必须用data.yml来指明交互器。</p><p>交互题与传统题的data.yml差别较小，只是增加交互器名称即可。使用C++11编写名为interactor.cpp的交互器，要在其中增加以下内容：</p><pre><code class="json">interactor:  language: cpp11  fileName: interactor.cpp</code></pre><p>然后数据文件的ZIP中需要包含interactor.cpp文件。</p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>总体来说比较简单。交互题一般能增大难度、限制选手的算法，也是强制在线的一种实现方法。</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 闲聊 </tag>
            
            <tag> 技巧 </tag>
            
            <tag> 颓废 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2003 - 文本编辑器</title>
      <link href="/2019-07/11-luogu4008/"/>
      <url>/2019-07/11-luogu4008/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP4008】【BZOJ1507】【NOI2003】文本编辑器 Editor<br>题目链接1: <a href="https://www.luogu.org/problemnew/show/P4008" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4008</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1507" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=1507</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这题放在任务计划里已经有些时日了，又拿出来看了看题面。原本是练习Splay用的，但因为不够熟练和懒得缘故，一直不想动手写。看了题解，发现了一个思路简单，代码较为暴力的数据结构——“块状链表”。</p><a id="more"></a><p>然后就愉快的做（抄）完了，首先感谢<a href="https://www.cnblogs.com/HenryHuang-Never-Settle/p/10803406.html" target="_blank" rel="noopener">@HenryHuang的题解</a>，他的题解使我学习块状链表得到了很大帮助。</p><p>我才不会告诉你很久以前我以为这是STL中string的练手题。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先这道题有一个光标，只需用一个变量就可以维护光标。</p><p>然后就只剩下Insert、Delete、Get操作了，一般我们都会想到平衡树（Splay），但是难理解且代码复杂。</p><p>首先我们都听说过甚至用过链表，STL中的list就是使用链表实现。这种数据结构只能$ O(1) $获得首节点和尾结点，需要逐个遍历才能获得中间的节点。</p><p>不过链表也有优点，由于它的结构为一条链，每个节点维护了前节点指针和后节点指针，因此向中间插入一个数的复杂度为$ O(1) $。</p><p>然而对于这道题，使用链表并不可行，数据范围太大。</p><p>还有一个最简单最常见的数据结构，名叫数组。这个数据结构支持$ O(1) $访问。STL中有封装好的类数组数据结构vector，其中有封装好的函数insert用来插入操作。</p><p>对于数组，插入操作只需要2次memcpy函数，一次赋值操作就能完成，但是复杂度是极高的。每次插入的理论最大复杂度是 $ O(\frac{n}{2}) $</p><p>那么这题就不能投机取巧了吗？万一把数组和链表通过一定方式结合起来，复杂度不就会均衡了吗？</p><p>众所周知，优化暴力的方法有很多，其中分块（根号）算法就非常热门。那么我们让数组的大小$ \sqrt{n} $，然后将这些数组通过链表链接起来，那复杂度不就均衡了吗。</p><p>这种数据结构就是我使用的——块状链表。首先是定义一个结构体，用来存储某一节点的信息。我们只需要维护一个指向下一元素指针即可。</p><p>题目中说明了最大数据范围：</p><blockquote><p>所有 INSERT 插入的字符数之和不超过 2M（1M=1024*1024 字节） ，正确的输出文件长度不超过 3M 字节。</p></blockquote><p>所以我设置每个块的大小为1300，其实块大小在一定范围内即可。在这范围内，块大小和效率只有微小的关系。</p><pre><code class="cpp">const int sqrtn= 1300;struct BLOCK {    int siz, nxt;    char ch[sqrtn &lt;&lt; 1];} b[sqrtn &lt;&lt; 2];</code></pre><h4 id="内存池"><a href="#内存池" class="headerlink" title="内存池"></a>内存池</h4><p>为了节点数组循环利用，学习原题解的做法，使用内存池。注意，程序开始时需要初始化内存池。</p><pre><code class="cpp">int blocks[sqrtn &lt;&lt; 2], bp, cur;inline int newb() {    return blocks[bp++];}inline void delb(int x) {    blocks[--bp]= x;    return;}</code></pre><p>肯定会有人问，块状链表怎么维护呢？这是最核心的部分。</p><h4 id="Split"><a href="#Split" class="headerlink" title="Split"></a>Split</h4><p>当某一个块较大时我们需要分裂成两个块。在某些操作（插入、删除等）时，我们可以先从光标位置分裂这个块，然后就可以很方便的对后面的内容进行操作。</p><pre><code class="cpp">// x 代表块编号，p代表分裂的位置（相对于块x）void split(int x, int p) {    if(x == -1 || p == b[x].siz) return;    add(x, newb(), b[x].ch + p, b[x].siz - p);    b[x].siz= p;    return;}</code></pre><h4 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h4><p>上面的split函数中用到了add，这个函数是用来在某一块后面插入一个块。但add函数用作插入，那样就不能维护块状链表的性质了。</p><p>add函数与链表的插入类似，只不过赋值变成了memcpy函数。</p><pre><code class="cpp">// x 代表块编号// y 常为一个未初始的块// st 为块 y 中的内容// siz 为 st 的长度inline void add(int x, int y, char *st, int siz) {    if(y != -1) b[y].nxt= b[x].nxt, b[y].siz= siz, memcpy(b[y].ch, st, siz);    b[x].nxt= y;    return;}</code></pre><h4 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h4><p>如果两个相邻的块都很小，那么维护时就要需要合并。我选择将靠后的块合并到靠前的块中，这样比较简单。</p><pre><code class="cpp">// x 代表块的编号// y 代表合并到 x 的块的编号void merge(int x, int y) {    memcpy(b[x].ch + b[x].siz, b[y].ch, b[y].siz);    b[x].siz+= b[y].siz, b[x].nxt= b[y].nxt, delb(y);    return;}</code></pre><h4 id="何时维护"><a href="#何时维护" class="headerlink" title="何时维护"></a>何时维护</h4><p>其实我学习的时候，一开始也对维护有些不解。虽然知道了如何维护，但没有具体的思路，不知道什么时候需要维护。</p><p>根据前人的题解，维护只需要部分维护，即在插入和删除操作之后，维护相关的块。只要保证相邻两块大小之和大于$ \sqrt{n} $，每块大小不超过$ \sqrt{n} $，并且不考虑当块较大时的分裂操作，可以保证块的数量控制在 $ [\sqrt{n},\sqrt{2n}] $ 范围内。</p><p>这里再次感谢<a href="https://www.cnblogs.com/HenryHuang-Never-Settle/p/10803406.html" target="_blank" rel="noopener">@HenryHuang的题解</a>所给予的帮助。</p><h4 id="对于本题"><a href="#对于本题" class="headerlink" title="对于本题"></a>对于本题</h4><p>本题中有插入和删除操作，两者类似。先得到光标当前所属的块，将此块在光标位置分裂。</p><p>对于插入，N 代表要插入的字符串长度。我们在分裂的位置先插入$ \frac{N}{\sqrt{n}} $个长度为$ \sqrt{n} $的块，剩下不足$ \sqrt{n} $长度的再独自插入，因为思路简单就不做解释。然后判断大小合并分裂位置前的块$ x $与$ x $的next块，合并刚插入的最后一个块$ y $与$ y $的next块。</p><p>对于删除，N 代表要删除的长度。在分裂的位置后逐个删除回收即可，如果最后一个块的长度大于剩余删除数，就再次分裂最后一个块，然后删除。</p><p>这部分代码将最后给出，先给出遍历块查找当前光标位置的代码。</p><pre><code class="cpp">// x 为要找的位置，// 因为 x 也是一个引用，最后将赋值为相对于块res的位置inline int pos(int &amp;x) {    int res= 0;    while(res != -1 &amp;&amp; b[res].siz &lt; x) x-= b[res].siz, res= b[res].nxt;    return res;}</code></pre><p>对于Get操作更简单，不需要分裂操作，我为了方便直接在函数中输出了。推荐学习者自行构思，有助于对块状链表的理解。</p><p>提示，此题读入较大，建议使用极速IO优化。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;using namespace std;struct IOBUF {    struct {        char buff[1 &lt;&lt; 24], *p, *pend;    } in;    struct {        char buff[1 &lt;&lt; 24], *p;    } out;    IOBUF() {        in.p= in.buff, out.p= out.buff, in.pend= in.buff + fread(in.buff, 1, 1 &lt;&lt; 24, stdin);    }    ~IOBUF() {        fwrite(out.buff, 1, out.p - out.buff, stdout);    }} IOB;#define getchar() (*(IOB.in.p++))#define putchar(c) (*(IOB.out.p++)= (c))int read() {    int e= 0;    char ch= getchar();    while(ch &lt; &#39;0&#39; || ch &gt; &#39;9&#39;) ch= getchar();    while(ch &gt;= &#39;0&#39; &amp;&amp; ch &lt;= &#39;9&#39;) e= e * 10 + ch - &#39;0&#39;, ch= getchar();    return e;}const int sqrtn= 1300;struct BLOCK {    int siz, nxt;    char ch[sqrtn &lt;&lt; 1];} b[sqrtn &lt;&lt; 2];int blocks[sqrtn &lt;&lt; 2], bp, cur;inline void init() {    for(int i= 1; i &lt; (sqrtn &lt;&lt; 2); i++) blocks[i]= i;    b[0].nxt= -1, bp= 1;    return;}inline int newb() {    return blocks[bp++];}inline void delb(int x) {    blocks[--bp]= x;    return;}inline void add(int x, int y, char *st, int siz) {    if(y != -1) b[y].nxt= b[x].nxt, b[y].siz= siz, memcpy(b[y].ch, st, siz);    b[x].nxt= y;    return;}inline int pos(int &amp;x) {    // &amp;x    int res= 0;    while(res != -1 &amp;&amp; b[res].siz &lt; x) x-= b[res].siz, res= b[res].nxt;    return res;}void split(int x, int p) {    if(x == -1 || p == b[x].siz) return;    add(x, newb(), b[x].ch + p, b[x].siz - p);    b[x].siz= p;    return;}void merge(int x, int y) {    memcpy(b[x].ch + b[x].siz, b[y].ch, b[y].siz);    b[x].siz+= b[y].siz, b[x].nxt= b[y].nxt, delb(y);    return;}void insert(int w, int siz, char *st) {    int nowp= pos(w);    split(nowp, w);    int nextp, fp= nowp;    while(sqrtn &lt; siz) {        nextp= newb();        add(nowp, nextp, st, sqrtn);        st+= sqrtn, siz-= sqrtn, nowp= nextp;    }    nextp= newb(), add(nowp, nextp, st, siz);    if(b[nextp].nxt != -1 &amp;&amp; b[nextp].siz + b[b[nextp].nxt].siz &lt; sqrtn) merge(nextp, b[nextp].nxt);    if(b[fp].nxt != -1 &amp;&amp; b[fp].siz + b[b[fp].nxt].siz &lt; sqrtn) merge(fp, b[fp].nxt);    return;}void erase(int w, int siz) {    int nowp= pos(w);    split(nowp, w);    int nextp= b[nowp].nxt;    while(siz &gt; b[nextp].siz) siz-= b[nextp].siz, b[nowp].nxt= b[nextp].nxt, delb(nextp), nextp= b[nowp].nxt;    split(nextp, siz), b[nowp].nxt= b[nextp].nxt, delb(nextp);    while(b[nowp].nxt != -1 &amp;&amp; b[nowp].siz + b[b[nowp].nxt].siz &lt; sqrtn) merge(nowp, b[nowp].nxt);    return;}void get(int w, int siz) {    int nowp= pos(w), mins;    mins= min(siz, b[nowp].siz - w), siz-= mins;    for(int i= w; i &lt; w + mins; i++) putchar(b[nowp].ch[i]);    while(siz) {        nowp= b[nowp].nxt, mins= min(siz, b[nowp].siz), siz-= mins;        for(int i= 0; i &lt; mins; i++) putchar(b[nowp].ch[i]);    }    putchar(&#39;\n&#39;);    return;}char readopt() {    char ch= getchar();    while(ch != &#39;M&#39; &amp;&amp; ch != &#39;I&#39; &amp;&amp; ch != &#39;D&#39; &amp;&amp; ch != &#39;G&#39; &amp;&amp; ch != &#39;P&#39; &amp;&amp; ch != &#39;N&#39;) ch= getchar();    return ch;}int m, n;char str[1048576];int main() {    init(), m= read();    while(m--) {        switch(readopt()) {            case &#39;M&#39;: cur= read(); break;            case &#39;P&#39;: --cur; break;            case &#39;N&#39;: ++cur; break;            case &#39;I&#39;: {                n= read();                for(int i= 0; i &lt; n; i++) {                    str[i]= getchar();                    if(str[i] &lt; 32 || str[i] &gt; 126) --i;                }                insert(cur, n, str);                break;            }            case &#39;D&#39;: {                n= read();                erase(cur, n);                break;            }            case &#39;G&#39;: {                n= read();                get(cur, n);                break;            }            default: break;        }    }    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 分块 </tag>
            
            <tag> 块状链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuoguP3396 - 哈希冲突</title>
      <link href="/2019-07/09-luogu3396/"/>
      <url>/2019-07/09-luogu3396/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP3396】哈希冲突<br>题目链接: <a href="https://www.luogu.org/problemnew/show/P3396" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3396</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>话说快暑假了…但是好像没有几天假期啊。</p><p>然后期末考试之际做了找到题，发现暴力好像都能用分块优化。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>读完题目，发现想不到任何复杂度较低思路。对于几乎不接触分块的我，数据范围似乎没有什么用。</p><p>然后就打开了题解，才知道可以根号算法（不指分块），不过我统一把用sqrt函数的解法都叫做分块。</p><p>暴力的复杂度大概是$ O(mn) $ ，每次查询我们都需要$ O(n) $ 来遍历数组，修改是$ O(1) $。如果预处理的话那更玄学，每次查询时$ O(1) $，而修改是$ O(n^2) $ ，那么很有可能变成$ O(n^2m) $算法。</p><p>所以考虑只预处理$ \sqrt{n} $的模数，复杂度为$ O(n \sqrt{n}) $。</p><p>对于查询，如果查询的模数不超过$ \sqrt{n} $那么可以直接输出答案。如果模数超过$ \sqrt{n} $，我们只需要枚举模$ p $后的结果，把他们加起来，那么复杂度仍为$ \frac{n}{\sqrt{n}} = \sqrt{n} $。</p><p>对于修改，与预处理类似，还是只修改$ \sqrt{n} $的模数，由于只是单点修改，所以少了一层循环，那么复杂度为$ O(\sqrt{n}) $。</p><p>总复杂度最大是$ O((m + n)\sqrt{n}) $，然后就可以写代码了，代码极为简单，感觉像是暴力。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;math.h&gt;using namespace std;int n, m, nb, v[150001], sum[1500][1500], tmpx, tmpy;char cmd;int main() {    cin &gt;&gt; n &gt;&gt; m, nb= sqrt(n);    for(int i= 1; i &lt;= n; i++) cin &gt;&gt; v[i];    for(int i= 1; i &lt;= nb; i++)        for(int j= 1; j &lt;= n; j++) sum[i][j % i]+= v[j];    while(m--) {        cin &gt;&gt; cmd &gt;&gt; tmpx &gt;&gt; tmpy;        if(cmd == &#39;A&#39;) {            if(tmpx &lt;= nb)                cout &lt;&lt; sum[tmpx][tmpy] &lt;&lt; endl;            else {                int ans= 0;                for(int i= tmpy; i &lt;= n; i+= tmpx) ans+= v[i];                cout &lt;&lt; ans &lt;&lt; endl;            }        }        else {            for(int i= 1; i &lt;= nb; i++) sum[i][tmpx % i]= sum[i][tmpx % i] - v[tmpx] + tmpy;            v[tmpx]= tmpy;        }    }    return 0;}</code></pre><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>因为之前根号算法做比较少，而这道题给我很大的启示，以后一些只能想到暴力的题可以尝试使用根号来优化。</p><p>听说这题不用根号，而使用1/3次方作为块的大小效率更高。但是不会证明，而且复杂度比较玄学，可能只适用这一道题的数据吧。</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 分块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuoguP3709 - 大爷的字符串题</title>
      <link href="/2019-07/01-luogu3709/"/>
      <url>/2019-07/01-luogu3709/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP3709】大爷的字符串题<br>题目链接: <a href="https://www.luogu.org/problemnew/show/P3709" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3709</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近一个月是各种忙啊。先是准备了半个多月的合格考，然后终于回归了OI。最近一周又生病请假等就没有更新过题解。上次更新题解也是很久之前，因为中间有段时间颓废过度做项目，现在那个项目基本已经咕咕，因为懒得再下Visual Studio了。</p><p>这几天一直在做莫队，然后做到这道题，打算水篇题解。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题可以说是语文阅读理解神题，丝毫看不懂出题人意图是什么。</p><p>根据出题人的解释，一句话概括如下: </p><blockquote><p>给你 N 个数, M 次询问区间[l, r]中众数的出现次数</p></blockquote><p>然后就非常容易，但是字符集数据范围1e9需要离散化，我直接边读入边使用map处理。</p><p>根据一些其他题解的提示，我们开一个cnt数组记录区间内某个数出现的次数，然后用cntt数组记录cnt数组中数出现的次数。</p><p>在区间扩大时ans和cnt数组取max，然后区间缩小时就判断cntt是否已经为0，如果是就让ans减一。当然不能忘了区间更改时cnt和cntt肯定都会有所改变。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>评测详情(未开O2): Accepted 100 用时: 1634ms / 内存: 9740KB</p><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;map&gt;#include &lt;math.h&gt;#include &lt;algorithm&gt;using namespace std;int read() {    int x= 0, f= 1;    char ch= getchar();    while(ch &lt; &#39;0&#39; || ch &gt; &#39;9&#39;) {        if(ch == &#39;-&#39;) f= -1;        ch= getchar();    }    while(ch &gt;= &#39;0&#39; &amp;&amp; ch &lt;= &#39;9&#39;) x= x * 10 + ch - &#39;0&#39;, ch= getchar();    return x * f;}inline void write(int x) {    if(x &lt; 0) x= -x, putchar(&#39;-&#39;);    if(x &gt; 9) write(x / 10);    putchar(&#39;0&#39; + x % 10);    return;}int n, m, a[200001], mapptr, cnt[200001], cntt[200001], nowans, ans[200001], ns;map&lt; int, int &gt; mapping;struct QUERY {    int id, l, r, bl;    int operator&lt;(const QUERY &amp;q2) const {        return bl == q2.bl ? r &lt; q2.r : l &lt; q2.l;    }} qs[200001];inline void add(int x) {    --cntt[cnt[x]];    ++cntt[++cnt[x]];    nowans= max(nowans, cnt[x]);    return;}inline void del(int x) {    --cntt[cnt[x]];    if(!cntt[cnt[x]] &amp;&amp; nowans == cnt[x]) --nowans;    ++cntt[--cnt[x]];    return;}int main() {    n= read(), m= read(), ns= sqrt(n);    for(int i= 1; i &lt;= n; i++) {        a[i]= read();        if(!mapping[a[i]]) mapping[a[i]]= ++mapptr;        a[i]= mapping[a[i]];    }    for(int i= 1; i &lt;= m; i++) qs[i].l= read(), qs[i].r= read(), qs[i].id= i, qs[i].bl= (qs[i].l - 1) / ns;    sort(qs + 1, qs + m + 1);    int l= 1, r= 0;    for(int i= 1; i &lt;= m; i++) {        while(l &lt; qs[i].l) del(a[l++]);        while(l &gt; qs[i].l) add(a[--l]);        while(r &gt; qs[i].r) del(a[r--]);        while(r &lt; qs[i].r) add(a[++r]);        ans[qs[i].id]= nowans;    }    for(int i= 1; i &lt;= m; i++) write(-ans[i]), putchar(&#39;\n&#39;);    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> STL </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目日记 - 开发图片爬虫 Ⅲ</title>
      <link href="/2019-06/03-spiking3/"/>
      <url>/2019-06/03-spiking3/</url>
      
        <content type="html"><![CDATA[<p>用C++开发一个图片爬虫 Ⅲ ：URL预处理 【咕咕】<br>封面图片来自网络，如有侵权将删除。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一节说这节介绍WinHTTP，现在好像鸽子了。经过我再三思考后，还是先深入学习WinInet吧。</p><p>关于根据链接下载网页的各种方式在第一节已经介绍过了。这里再补充一下，还有一种方式是使用外部库libcurl，使用方便代码简洁，但我不把它当做我们主要学习的对象，因为它太过于简单。</p><p>这节可以说是个扩展篇，并不是这个项目优先考虑的内容。先介绍它主要是因为这部分东西更有意思，大家可能会更感兴趣。</p><a id="more"></a><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>这个预处理是我自己勉强定义的，所以大家可能不理解。</p><p>通俗的说，URL预处理意为对一个URL链接本体进行处理，请大家不要误以为是对HTML网页内容进行分析。</p><p>再说清楚一些，获取链接所指向的内容前，程序并不知道这个内容是什么类型的。也就是说，它可能是一个HTML也可能是图片，又或者是一个CSS文件。所以我们要对URL进行一定的预处理，然后判断文件后缀之类的。</p><p>先给出本节流程图：</p><p><img src="/images/spiKing5.png" alt="项目流程图"></p><p>很多人可能不理解获得内容类型为什么需要先分解URL，那就接着往下看。</p><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>从基础说起，大家都模糊地知道URL是什么，我给出它的定义：</p><blockquote><p>URL是统一资源定位符（英语Uniform Resource Locator的缩写）也被称为网页地址，是因特网上标准的资源的地址。它最初是由蒂姆·伯纳斯·李发明用来作为万维网的地址。现在它已经被万维网联盟编制为互联网标准RFC1738了。</p></blockquote><p>URL由多部分组成，详细说有9部分，我们一个一个介绍。有关资料部分来自于<a href="https://blog.csdn.net/u014686399/article/details/84726335" target="_blank" rel="noopener">going_han的博客</a>。</p><p>一个URL的实例: <code>scheme://user:password@host:port/path;params?query#frag</code></p><table><thead><tr><th align="center">编号</th><th align="center">名称</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">协议(protocol)</td><td align="left">为进行网络中的数据交换而建立的规则、标准或约定。有时也叫scheme，常用的协议有http、https、ftp、file、mailto。</td></tr><tr><td align="center">2</td><td align="center">用户名(user)</td><td align="left">一般用不到，为访问资源使用的用户名。</td></tr><tr><td align="center">3</td><td align="center">密码(password)</td><td align="left">一般也用不到，为访问资源使用的密码。</td></tr><tr><td align="center">4</td><td align="center">域名(domain)</td><td align="left">域名（英语：Domain Name），简称域名、网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。有时也叫host，可以使用IP地址作为域名使用。</td></tr><tr><td align="center">5</td><td align="center">端口(port)</td><td align="left">在网络技术中，端口（Port）有好几种意思。我们这里所指的端口不是指物理意义上的端口，而是特指TCP/IP协议中的端口，是逻辑意义上的端口。端口不是一个必须部分，如果省略将采用协议默认使用的端口。</td></tr><tr><td align="center">6</td><td align="center">路径(path)</td><td align="left">由零或多个“/”符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。</td></tr><tr><td align="center">7</td><td align="center">参数(params)</td><td align="left">这是用于指定特殊参数的可选项。</td></tr><tr><td align="center">8</td><td align="center">查询(query)</td><td align="left">可选项。用于给动态网页传递参数，可有多个参数，用“&amp;”符号隔开，每个参数的名和值用“=”符号隔开。</td></tr><tr><td align="center">9</td><td align="center">片段(frag)</td><td align="left">主要用于对资源进行分类。例如一个网页中有多个名词解释，可使用fragment直接定位到某一名词解释。访问一个帮助文档时，文档的各个章节就可以表述为片段。</td></tr></tbody></table><p>所以分解URL有什么用呢？我们再简单了解一下HTTP访问的步骤，HTTP访问时会进行多步操作，其中有两步我想重点介绍一下，分别是：发送请求头(Request Headers)和接受响应头(Response Headers)。</p><p>其实大家现在就可以直观的了解它，介绍一种方法。</p><p>随便找一个可用网页（比如这篇博客） -&gt; 点击键盘上的F12，弹出开发人员调试工具 -&gt; 进入’Network’选项页 -&gt; 点击录制按钮（黑色的圆点），按钮变红色 -&gt; 刷新页面。</p><p>然后会有很多信息，我们要找的一般在第一个位置，Name一般为URL最后一个’/‘后的字符串。如果是在这篇博客进行的上述操作，则Name为’03-spiking3/‘，点击会显示详细信息。</p><p>我使用的浏览器效果如下图，部分进行了打码处理，URL为localhost是因为我在本地测试。</p><p><img src="/images/spiKing6.png" alt="开发人员调试工具截图"></p><p>这里已经很直观了，我们需要的就是Response Headers中的’Content-Type:text/html’，这个可以用来判断内容的类型。大家可以再打开一个图片URL进行观察，比如上面那个截图，发现其中’Content-Type:image/png’。我们根据此信息来判断内容的类型。</p><p>其他信息大家可以自行了解，对项目作用不大，我就不作介绍了。</p><p>另外，本节含有大量string类的内容，但只要不是初学者都很熟悉了，因此不作理论上的介绍。</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>这部分理论易理解，但代码部分比较长。先给出本节所有的代码:</p><pre><code class="cpp">string _trim(const string &amp;str) {    size_t start= str.find_first_not_of(&quot; \n\r\t&quot;);    size_t until= str.find_last_not_of(&quot; \n\r\t&quot;);    string::const_iterator i= start == string::npos ? str.begin() : str.begin() + start;    string::const_iterator x= until == string::npos ? str.end() : str.begin() + until + 1;    return string(i, x);}void parse_url(const string &amp;raw_url, string &amp;port, string &amp;domain, string &amp;path) {    string x= _trim(raw_url), protocol, query;    int offset= 0;    size_t pos1, pos2, pos3, pos4;    offset= offset == 0 &amp;&amp; x.compare(0, 8, &quot;https://&quot;) == 0 ? 8 : offset;    offset= offset == 0 &amp;&amp; x.compare(0, 7, &quot;http://&quot;) == 0 ? 7 : offset;    pos1= x.find_first_of(&#39;/&#39;, offset + 1);    path= pos1 == string::npos ? &quot;&quot; : x.substr(pos1);    domain= string(x.begin() + offset, pos1 != string::npos ? x.begin() + pos1 : x.end());    path= (pos2= path.find(&quot;#&quot;)) != string::npos ? path.substr(0, pos2) : path;    port= (pos3= domain.find(&quot;:&quot;)) != string::npos ? domain.substr(pos3 + 1) : &quot;0&quot;;    domain= domain.substr(0, pos3 != string::npos ? pos3 : domain.length());    protocol= offset &gt; 0 ? x.substr(0, offset - 3) : &quot;&quot;;    query= (pos4= path.find(&quot;?&quot;)) != string::npos ? path.substr(pos4 + 1) : &quot;&quot;;    path= pos4 != string::npos ? path.substr(0, pos4) : path;    return;}void judgeUrlType(const char *Url, string &amp;fileSuffix) {    static byte Temp[MAXBLOCKSIZE];    HINTERNET hSession= InternetOpenA(&quot;DownloadKit&quot;, INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0), hConnect= 0, hRequest= 0;    if(hSession != NULL) {        INTERNET_PORT nPort= 0;        DWORD dwReadSize= MAXBLOCKSIZE;        string sPort, sServer, sObject;        parse_url(Url, sPort, sServer, sObject);        for(size_t i= 0; i &lt; sPort.size(); i++) nPort= nPort * 10 + sPort[i] - &#39;0&#39;;        hConnect= InternetConnectA(hSession, sServer.c_str(), nPort, NULL, NULL, INTERNET_SERVICE_HTTP, 0, NULL);        if(hConnect == NULL) goto fail;        hRequest= HttpOpenRequestA(            hConnect, &quot;GET&quot;, sObject.c_str(), NULL, NULL, NULL, INTERNET_FLAG_KEEP_CONNECTION | INTERNET_FLAG_NO_AUTH | INTERNET_FLAG_NO_COOKIES | INTERNET_FLAG_NO_UI | INTERNET_FLAG_IGNORE_CERT_CN_INVALID | INTERNET_FLAG_RELOAD, NULL);        if(hRequest == NULL || !HttpSendRequest(hRequest, NULL, 0, NULL, 0)) goto fail;        if(!HttpQueryInfoA(hRequest, HTTP_QUERY_RAW_HEADERS, Temp, &amp;dwReadSize, NULL)) goto fail;        Temp[dwReadSize]= &#39;\0&#39;;        for(unsigned long i= 0; i &lt; dwReadSize; i= i + strlen((const char *)Temp + i) + 1) {            if(string((const char *)Temp + i).compare(0, 13, &quot;Content-Type:&quot;) == 0) {                printf(&quot;%s\n&quot;, Temp + i + 14);                fileSuffix= &quot;&quot;;                fileSuffix= (string((const char *)Temp + i + 14).compare(&quot;text/html&quot;) == 0) ? &quot;html&quot; : fileSuffix;                fileSuffix= (string((const char *)Temp + i + 14).compare(&quot;image/png&quot;) == 0) ? &quot;png&quot; : fileSuffix;                fileSuffix= (string((const char *)Temp + i + 14).compare(&quot;image/jpeg&quot;) == 0) ? &quot;jpg&quot; : fileSuffix;                fileSuffix= (string((const char *)Temp + i + 14).compare(&quot;image/gif&quot;) == 0) ? &quot;gif&quot; : fileSuffix;                // Add what you want                break;            }        }        if(hRequest) InternetCloseHandle(hRequest);        if(hConnect) InternetCloseHandle(hConnect);        if(hSession) InternetCloseHandle(hSession);        return;    }fail:    if(hRequest) InternetCloseHandle(hRequest);    if(hConnect) InternetCloseHandle(hConnect);    if(hSession) InternetCloseHandle(hSession);    printf(&quot;Internet Error\n&quot;);    return;}</code></pre><p><em>_trim</em>函数作用为去除字符串的空白换行符。</p><p><em>parse_url</em>函数作用为分解URL，分解为端口、域名和路径。</p><p><em>judgeUrlType</em>函数作用为获得HTTP响应头并分析URL内容类型。</p><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><p>本节使用C++STL中的string类比较多，简单的大家都使用过，所以介绍一下几个比较陌生的函数。</p><h5 id="find-first-not-of"><a href="#find-first-not-of" class="headerlink" title="find_first_not_of"></a>find_first_not_of</h5><pre><code class="cpp">size_t find_first_not_of (const string&amp; str, size_t pos = 0) const;size_t find_first_not_of (const char* s, size_t pos = 0) const;size_t find_first_not_of (const char* s, size_t pos, size_t n) const;size_t find_first_not_of (char c, size_t pos = 0) const;</code></pre><p><em>Return Value</em>即返回值，返回第一个不匹配字符的位置，如果没有不匹配字符则返回string::npos。若使用字符串作参数，则此处不匹配字符指参数中不包含的字符。</p><h5 id="string-npos"><a href="#string-npos" class="headerlink" title="string::npos"></a>string::npos</h5><pre><code class="cpp">static const size_t npos = -1;</code></pre><h5 id="find-last-not-of"><a href="#find-last-not-of" class="headerlink" title="find_last_not_of"></a>find_last_not_of</h5><pre><code class="cpp">size_t find_last_not_of (const string&amp; str, size_t pos = npos) const;size_t find_last_not_of (const char* s, size_t pos = npos) const;size_t find_last_not_of (const char* s, size_t pos, size_t n) const;size_t find_last_not_of (char c, size_t pos = npos) const;</code></pre><p><em>Return Value</em>即返回值，与find_first_not_of类似，返回最后一个不匹配字符的位置。</p><h5 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h5><pre><code class="cpp">string substr (size_t pos = 0, size_t len = npos) const;</code></pre><p><em>Return Value</em>即返回值，返回从pos开始长度为len的子串。</p><h4 id="InternetConnectA"><a href="#InternetConnectA" class="headerlink" title="InternetConnectA"></a>InternetConnectA</h4>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 颓废 </tag>
            
            <tag> 项目 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目日记 - 开发图片爬虫 Ⅱ</title>
      <link href="/2019-05/28-spiking2/"/>
      <url>/2019-05/28-spiking2/</url>
      
        <content type="html"><![CDATA[<p>用C++开发一个图片爬虫 Ⅱ ：编码转换</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们上一节学习了获取网页的代码，那么大家可能会以为接下来就是分析网页了。但事实上，我们还需要先转换编码。我们都知道，C++编程常用的是ASCII编码，而网页大部分使用的是UTF-8编码。</p><p>因此我们要先将获取后的网页转换成我们想要的编码，再去分析内容。</p><a id="more"></a><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>我们写编码转换的代码，肯定要知道这些编码之间的关系。</p><p>ASCII编码我们再熟悉不过了，然而我相信很多人和我一样，分不清什么是Unicode，UTF-8，UTF-16，UTF-32。</p><p>我不想用长篇大论来解释这些东西，就给出它们各自的定义和我们需要知道的东西。如果想更深入的了解，可以自行搜索。</p><blockquote><p>Unicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准，包括字符集、编码方案等。</p></blockquote><p>至于它为什么诞生，我简单说明一下。因为我们熟知的ASCII码能表示的字符是非常有限的，根本无法承受那么多国家的字符。因此国际组织就又发明了一个新的编码，几乎收尽所有国家的字符，甚至包括特殊字符。</p><p>Unicode与其他编码类似，也是每一个字符都对应一个数字来表示它。但Unicode也仅仅如此，它没有规定这个二进制代码如何存储。</p><p>那么问题来了，在Unicode编码下，假设有一个3字节的二进制代码，计算机怎么知道表示的是一个字符还是两个字符或者是三个字符呢？因此UTF-8、UTF-16这一系列东西就诞生了。</p><p>先介绍UTF-8，这是开发网页首选的编码存储方式。</p><blockquote><p>UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码，又称万国码，由Ken Thompson于1992年创建。</p></blockquote><p>如果略懂编码的话，可变长度是最大特点。但是为了实现可变长度，就需要一些二进制位来表示长度，我认为它的编码规则可以说是非常典型了。</p><table><thead><tr><th>字节数</th><th>二进制编码形式</th></tr></thead><tbody><tr><td>1字节</td><td>0xxxxxxx</td></tr><tr><td>2字节</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>3字节</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>4字节</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>5字节</td><td>111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>6字节</td><td>1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><p>再简单说一下UTF-16，定义：</p><blockquote><p>UTF-16是Unicode字符编码五层次模型的第三层：字符编码表（Character Encoding Form，也称为 “storage format”）的一种实现方式。</p></blockquote><p>UTF-16虽然也可变长度，但不如UTF-8灵活。它有大尾序和小尾序两种储存形式，这个可以自行查阅。</p><blockquote><p>UTF-32 (或 UCS-4)是一种将Unicode字符编码的协定，对每一个Unicode码位使用恰好32位元。其它的Unicode transformation formats则使用不定长度编码。</p></blockquote><p>网上找到一个工具，<a href="https://www.qqxiuzi.cn/bianma/Unicode-UTF.php" target="_blank" rel="noopener">Unicode和UTF编码转换</a>，有兴趣可以试一下。</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>我们为什么要了解上面那些东西，最终还是为了更容易理解代码。先给出一个将一个字符串从UTF-8转为ASCII的示例代码，从网上抄下来的。</p><pre><code class="cpp">const char *changeTxtEncoding(const char *szU8) {    int wcsLen= MultiByteToWideChar(CP_UTF8, NULL, szU8, strlen(szU8), NULL, 0);    wchar_t *wszString= new wchar_t[wcsLen + 1];    MultiByteToWideChar(CP_UTF8, NULL, szU8, strlen(szU8), wszString, wcsLen);    wszString[wcsLen]= &#39;\0&#39;;    int ansiLen= WideCharToMultiByte(CP_ACP, NULL, wszString, wcslen(wszString), NULL, 0, NULL, NULL);    char *szAnsi= new char[ansiLen + 1];    WideCharToMultiByte(CP_ACP, NULL, wszString, wcslen(wszString), szAnsi, ansiLen, NULL, NULL);    szAnsi[ansiLen]= &#39;\0&#39;;    delete[] wszString;    return szAnsi;}</code></pre><p>此函数是将一个字符串，先从UTF-8转为UTF-16，再转为ASCII。</p><h4 id="MultiByteToWideChar"><a href="#MultiByteToWideChar" class="headerlink" title="MultiByteToWideChar"></a>MultiByteToWideChar</h4><p>此函数可将字符串映射到UTF-16(宽字符)字符串。字符串不一定来自多字节字符集。在这里，字符集或代码页我们都可以理解为编码映射表。</p><pre><code class="cpp">int WINAPI MultiByteToWideChar(    _In_ UINT CodePage,    _In_ DWORD dwFlags,    _In_NLS_string_(cbMultiByte) LPCCH lpMultiByteStr,    _In_ int cbMultiByte,    _Out_writes_to_opt_(cchWideChar,return) LPWSTR lpWideCharStr,    _In_ int cchWideChar    );</code></pre><p>定义简化如下：</p><pre><code class="cpp">int WINAPI MultiByteToWideChar(    UINT CodePage,     DWORD dwFlags,     LPCCH lpMultiByteStr,     int cbMultiByte,     LPWSTR lpWideCharStr,     int cchWideChar    );</code></pre><p><em>CodePage</em>为指定执行转换的字符集。如果原字符串为ASCII通常选择CP_ACP，关于CP_ACP与CP_THREAD_ACP的区别可以自己了解。我们这里原字符串为UTF-8，因此选择CP_UTF8。数值表：</p><table><thead><tr><th>数值</th><th>说明</th></tr></thead><tbody><tr><td>CP_ACP</td><td>Windows系统默认的ANSI代码页。</td></tr><tr><td>CP_MACCP</td><td>Mac系统代码页。</td></tr><tr><td>CP_ACP</td><td>OEM系统代码页。</td></tr><tr><td>CP_SYMBOL</td><td>符号字符集。</td></tr><tr><td>CP_THREAD_ACP</td><td>当前Windows线程的ANSI代码页。</td></tr><tr><td>CP_UTF7</td><td>使用UTF-7。</td></tr><tr><td>CP_UTF8</td><td>使用UTF-8。</td></tr></tbody></table><p><em>dwFlags</em>设定转换类型。缺省值为MB_PRECOMPOSED，对于UTF-8必须为0或MB_ERR_INVALID_CHARS，此参数作用较小，数值表就不给出了。</p><p><em>lpMultiByteStr</em>指向一个要转换的字符串。</p><p><em>cbMultiByte</em>指定长度，如果lpMultiByteStr指向的字符串为空结束，此参数可设为-1。如果设为-1，函数将处理包括终止空字符在内的所有字符。我们可以用strlen来自行获得长度。</p><p><em>lpWideCharStr</em>为指向接收缓冲器的指针。</p><p><em>cchWideChar</em>为lpWideCharStr指示的缓冲器的大小(以字符为单位)。如果此值为0不使用lpWideCharStr缓冲区。</p><p><em>Return Value</em>即返回值，返回写入到缓冲器的字符数。如果cchWideChar为0则返回缓冲器所需大小(以字符为单位)。</p><p>我们第一次调用此函数时应将cchWideChar设为0，并记录函数返回值，第二次调用时将cchWideChar设为此值。</p><h4 id="WideCharToMultiByte"><a href="#WideCharToMultiByte" class="headerlink" title="WideCharToMultiByte"></a>WideCharToMultiByte</h4><p>与MultiByteToWideChar恰恰相反，但多两个参数，此函数可将UTF-16(宽字符)字符串映射到新字符串。</p><pre><code class="cpp">int WINAPI WideCharToMultiByte(    UINT CodePage,     DWORD dwFlags,     LPCWCH lpWideCharStr,     int cchWideChar,     LPSTR lpMultiByteStr,     int cbMultiByte,     LPCCH lpDefaultChar,     LPBOOL lpUsedDefaultChar    );</code></pre><p><em>CodePage</em>为指定执行转换的字符集。可选数值与MultiByteToWideChar相同，我们这里选择CP_ACP。</p><p><em>dwFlags</em>设定转换类型。设为0即可。</p><p><em>lpWideCharStr</em>指向一个要转换的字符串。</p><p><em>cchWideChar</em>指定长度。对于宽字符，自行使用wcslen来获得。</p><p><em>lpMultiByteStr</em>为指向接收缓冲器的指针。</p><p><em>cbMultiByte</em>为lpMultiByteStr指示的缓冲器的大小(以字符为单位)。</p><p><em>lpDefaultChar</em>为指向另一个接收缓冲器的指针，如果某个字符不能在指定的代码页中表示将使用此缓冲器。我们不需要，设为NULL即可。</p><p><em>lpUsedDefaultChar</em>为一个指向BOOL变量的指针。如果使用了lpDefaultChar将被设为TRUE，否则为FALSE。我们也设为NULL即可。</p><p><em>Return Value</em>即返回值，与MultiByteToWideChar相类比。</p><p>调用两次，步骤也与MultiByteToWideChar相似。</p><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p>网上给的代码没有释放内存的语句，可能会造成内存泄露。</p><p><em>delete</em>语句使用过指针都知道，释放一个指针指向的内存。</p><p><em>delete[]</em>语句释放一个数组指针指向的内存。</p><p>如果想深入了解其中的原理，可以自行查阅。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这一节简单介绍了编码的知识和使用C++进行编码转换的代码。我们这个项目深入了解编码系统，所介绍的也不过是冰山一角。</p><p>现在大家已经可以自己写代码对网页进行简单分析了。下一节我打算介绍关于WinHTTP的内容和用途。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 颓废 </tag>
            
            <tag> 项目 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目日记 - 开发图片爬虫 Ⅰ</title>
      <link href="/2019-05/26-spiking1/"/>
      <url>/2019-05/26-spiking1/</url>
      
        <content type="html"><![CDATA[<p>用C++开发一个图片爬虫 Ⅰ ：获取网页内容</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个项目很久前就开始写了，但一直没有很完善。最近想起来，打算重新完善这个项目。</p><p>本教程仅适用于C++。内容较为复杂，可以根据自己需要来阅读。</p><a id="more"></a><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>做一个项目，首先需要知道你的目标是什么。这个项目名为图片爬虫，当然是为了下载图片。</p><p>再具体一点，用户先给出一个网址，我们先保存网页，抓取网页上的图片链接和其他网址链接。然后保存每一张图片到用户设置的文件夹中。深入其他网址链接，循环这一步骤。</p><p>那么我们去爬一个图片网站，就可以找到很多好（<del>康</del>）看的图片了。</p><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>先了解爬虫的定义，如下：</p><blockquote><p>网络爬虫（英语：web crawler），也叫网络蜘蛛（spider），是一种用来自动浏览万维网的网络机器人。其目的一般为编纂网络索引。</p></blockquote><p>对于这个东西我还想补充一下，爬虫操作不当可能是违法的，但对于我们这些小项目来说，请求服务器资源的速度一般达不到攻击服务器的要求。爬虫有一个国际互联网界通行的道德规范，名叫robots协议，有兴趣可以去了解一下。我们就先不管那么多，还是技术更要紧些，不干扰网站正常运行就行了。</p><p>那么如何去开发呢？我们目的很明确，所以大概分为几个步骤。我制作了一个流程图来演示：<br><img src="/images/spiKing2.png" alt="项目流程图"></p><p>现在对每个步骤进行解释，先设置爬取的网站，这个很简单。第一个要实现的就是如何获取网页，关于这个我做一个较为详细的理论说明。</p><p>关于用C++实现获取网页内容，我所知有两种方法，使用Winsock或WinInet。相信大家对这两个东西一定有所了解，不了解的可以细读定义。</p><p>先大致了解Winsock的定义：</p><blockquote><p>Windows Sockets API (WSA), 简短记为Winsock, 是Windows的TCP/IP网络编程接口（API）。</p></blockquote><p>具体是什么可以再自行了解，我这个项目选择使用的是WinInet。</p><blockquote><p>WinInet（“Windows Internet”）API帮助程序员使用三个常见的Internet协议，这三个协议是用于World Wide Web万维网的超文本传输协议（HTTP：Hypertext Transfer Protocol）、文件传输协议（FTP：File Transfer Protocol）和另一个称为Gopher的文件传输协议。WinInet函数的语法与常用的Win32 API函数的语法类似，这使得使用这些协议就像使用本地硬盘上的文件一样容易。</p></blockquote><p>定义中已经说了，这个API非常容易使用，这也是我为什么选择使用它。</p><p>再补充一下，我最近又查阅到了第三种方法，使用WinHTTP。我会在以后的章节对它进行详细的说明。相比而言，它其实更适合对网页的操作。定义：</p><blockquote><p>Microsoft Windows HTTP Services(WinHTTP)为开发者提供了HTTP客户端应用程序编程接口(API)，用于通过HTTP协议向其他HTTP服务器发送请求。</p></blockquote><p>在官方有WinHTTP与WinInet的对比，如果用简短的话来说明他俩的关系，那就是：</p><blockquote><p>除了少数例外，WinInet是WinHTTP的超集。在两者之间进行选择时，应使用WinInet，除非您计划在需要模拟和会话隔离的服务或类似服务的进程中运行。</p></blockquote><p>如果还想了解更多WinInet与WinHTTP的区别，可以看<a href="https://docs.microsoft.com/zh-cn/windows/desktop/wininet/wininet-vs-winhttp" target="_blank" rel="noopener">官方英文文档</a>。</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>相信大家已经对这些东西都有了大致了解，那么就开始写代码了。输入网址的主程序代码就不给出了，我先放出获取页面的代码实例，是从网上找到并改编之后的。</p><pre><code class="cpp">#include &lt;wininet.h&gt;#define MAXBLOCKSIZE 1024 * 1024void downloadUrl(const char *Url, const char *FilePath) {    static byte Temp[MAXBLOCKSIZE];    HINTERNET hSession= InternetOpenA(&quot;DownloadKit&quot;, INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0), hOpenUrl= 0;    if(hSession != NULL) {        hOpenUrl= InternetOpenUrlA(hSession, Url, NULL, 0, INTERNET_FLAG_DONT_CACHE, NULL);        if(hOpenUrl == NULL) goto fail;        FILE *stream= fopen(FilePath, &quot;wb&quot;);        ULONG Number= 1;        while(Number &gt; 0) {            InternetReadFile(hOpenUrl, Temp, MAXBLOCKSIZE, &amp;Number);            fwrite(Temp, sizeof(char), Number, stream);        }        fclose(stream);        if(hOpenUrl) InternetCloseHandle(hOpenUrl);        if(hSession) InternetCloseHandle(hSession);        return;    }fail:    if(hOpenUrl) InternetCloseHandle(hOpenUrl);    if(hSession) InternetCloseHandle(hSession);    printf(&quot;Internet Error\n&quot;);    return;}</code></pre><p>先大致说明一下函数参数，Url为你想下载网页的网址，filePath为保存到电脑的路径。</p><p>你可以找一个网址，选一个存文件的路径，调用函数并编译，你会发现这段代码是无法通过编译的，因为还需要连接静态链接库。</p><p>如果使用Visual Studio，需要在函数之前加入以下这句，并且忽略编号为4996的警告。</p><pre><code class="cpp">#pragma comment(lib, &quot;wininet.lib&quot;)</code></pre><p>如果使用MinGW，需要添加编译命令来/MinGW64/lib/libwininet.a文件。如果使用DevC++还可以通过项目属性来添加，这里不作细说。如果遇到了其他困难可以下方留言，我将会在第一时间解答。</p><h4 id="InternetOpenA"><a href="#InternetOpenA" class="headerlink" title="InternetOpenA"></a>InternetOpenA</h4><p>先来讲解InternetOpenA函数。这个是我头文件里的定义。如果你使用Unicode遍码就改成InternetOpenW，用法类似。</p><pre><code class="cpp">INTERNETAPI_(HINTERNET) InternetOpenA(    _In_opt_ LPCSTR lpszAgent,    _In_ DWORD dwAccessType,    _In_opt_ LPCSTR lpszProxy,    _In_opt_ LPCSTR lpszProxyBypass,    _In_ DWORD dwFlags    );</code></pre><p><em>lpszAgent</em>指向一个空结束的字符串，用来设置UserAgent。对于我们用处不大，可以随意设置。</p><p><em>dwAccessType</em>指定访问类型，用于是否使用代理或注册表配置。我们选择使用IE代理，如果想设置代理服务器则使用INTERNET_OPEN_TYPE_PROXY。数值表：</p><table><thead><tr><th>数值</th><th>说明</th></tr></thead><tbody><tr><td>INTERNET_OPEN_TYPE_DIRECT</td><td>使用直接连接网络。</td></tr><tr><td>INTERNET_OPEN_TYPE_PRECONFIG</td><td>获取代理或直接从注册表中的配置，使用代理连接网络。</td></tr><tr><td>INTERNET_OPEN_TYPE_PRECONFIG_WITH_NO_AUTOPROXY</td><td>获取代理或直接从注册表中的配置，并防止启动Microsoft JScript或Internet设置（INS）文件的使用。</td></tr><tr><td>INTERNET_OPEN_TYPE_PROXY</td><td>通过代理的请求，除非代理旁路列表中提供的名称解析绕过代理,在这种情况下，该功能的使用。</td></tr></tbody></table><p><em>lpszProxy</em>指向一个空结束的字符串，该字符串指定的代理服务器的名称，我们此参数应该设置为NULL。设置代理还要在这里深入研究，由于比较麻烦，我们先不去了解了。</p><p><em>lpszProxyBypass</em>指向一个空结束的字符串，该字符串指定的可选列表的主机名或IP地址。我们此参数也设置为NULL。</p><p><em>dwFlags</em>是设定一些要求的，值可以组合组合，我们设置为0。数值表：</p><table><thead><tr><th>数值</th><th>说明</th></tr></thead><tbody><tr><td>INTERNET_FLAG_ASYNC</td><td>使异步请求处理的后裔从这个函数返回的句柄。</td></tr><tr><td>INTERNET_FLAG_FROM_CACHE</td><td>不进行网络请求，从缓存返回的所有实体，如果请求的项目不在缓存中，则返回一个合适的错误，如ERROR_FILE_NOT_FOUND。</td></tr><tr><td>INTERNET_FLAG_OFFLINE</td><td>同INTERNET_FLAG_FROM_CACHE。</td></tr></tbody></table><p><em>Return Value</em>即返回值是一个HINTERNET句柄，用于接下来的WinINet函数。计算机正常且函数参数规范的情况下，都能够成功返回。如果返回NULL就是失败了，那么请检查自己的参数。</p><h4 id="InternetOpenUrlA"><a href="#InternetOpenUrlA" class="headerlink" title="InternetOpenUrlA"></a>InternetOpenUrlA</h4><p>接下来就是用于打开网页的InternetOpenA函数了，如果使用Unicode编码请改为InternetOpenUrlW。</p><p>相比而言，这个函数参数比较多。</p><pre><code class="cpp">INTERNETAPI_(HINTERNET) InternetOpenUrlA(    _In_ HINTERNET hInternet,    _In_ LPCSTR lpszUrl,    _In_reads_opt_(dwHeadersLength) LPCSTR lpszHeaders,    _In_ DWORD dwHeadersLength,    _In_ DWORD dwFlags,    _In_opt_ DWORD_PTR dwContext    );</code></pre><p><em>hInternet</em>为当前的Internet会话句柄，也就是我们刚刚使用InternetOpen 函数返回的句柄。</p><p><em>lpszUrl</em>指向一个空结束的字符串，用于指定读取的网址。非常容易理解。</p><p><em>lpszHeaders</em>指向一个空结束的字符串，指定发送到HTTP服务器的头信息。我们不必做过多了解，设为NULL即可。</p><p><em>dwHeadersLength</em>指定的长度，字符，额外的标头。对于我们说也没什么用，设为0即可。</p><p><em>dwFlags</em>设定一些要求，我们设置的INTERNET_FLAG_NO_CACHE，与INTERNET_FLAG_NO_CACHE_WRITE有相同作用。有较多数值，可以了解后选择其中一个。数值表：</p><table><thead><tr><th>数值</th><th>说明</th></tr></thead><tbody><tr><td>INTERNET_FLAG_EXISTING_CONNECT</td><td>如果使用相同的必须属性创建会话，会尝试利用现有的InternetConnect对象。这只对FTP操作非常有用，因为FTP是唯一在同一会话中执行多种操作的协议。WinINet API 为每个由InternetOpen产生的HINTERNET句柄缓冲一个单独链接句柄。InternetOpenUrl使用此标志的HTTP和FTP连接。</td></tr><tr><td>INTERNET_FLAG_HYPERLINK</td><td>当决定何时从网络重载时，如果服务器没有返回 Expires time 和 LastModified，那么强制重载。</td></tr><tr><td>INTERNET_FLAG_IGNORE_CERT_CN_INVALID</td><td>停用检查从服务器对必须的主机名称返回的SSL/PCT-based证书。 WinINet函数使用简单的比较匹配主机名称和通配符的规则检查证书。</td></tr><tr><td>INTERNET_FLAG_IGNORE_CERT_DATE_INVALID</td><td>停用检查的SSL/PCT-based的证书的适当的有效日期。</td></tr><tr><td>INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP</td><td>禁用检测这中特殊的重定向。当使用此标志， WinINet 透明允许从HTTPS到HTTP URL的重定向。</td></tr><tr><td>INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS</td><td>禁用检测这中特殊的重定向。当使用此标志， WinINet 透明的允许的HTTP到HTTPS URL的重定向。</td></tr><tr><td>INTERNET_FLAG_KEEP_CONNECTION</td><td>如果可能的话，为连接使用保活语义。这个标志要求微软网络（ MSN ），NTLM和其他类型的身份验证。</td></tr><tr><td>INTERNET_FLAG_NEED_FILE</td><td>如果要创建的文件不能被缓存，创建临时文件。</td></tr><tr><td>INTERNET_FLAG_NO_AUTH</td><td>不试图自动验证。</td></tr><tr><td>INTERNET_FLAG_NO_AUTO_REDIRECT</td><td>不自动处理HttpSendRequest中的重定向。s</td></tr><tr><td>INTERNET_FLAG_NO_CACHE_WRITE</td><td>不添加返回实体到缓存。</td></tr><tr><td>INTERNET_FLAG_NO_COOKIES</td><td>不会自动添加的Cookie头到请求，并且不自动添加返回的cookie到cookie数据库。</td></tr><tr><td>INTERNET_FLAG_NO_UI</td><td>禁用Cookie的对话框。</td></tr><tr><td>INTERNET_FLAG_PASSIVE</td><td>使用被动FTP语义。InternetOpenUrl为FTP的文件和目录使用此标志。</td></tr><tr><td>INTERNET_FLAG_PRAGMA_NOCACHE</td><td>即使代理中存在缓存副本，也强制要求由源服务器返回。</td></tr><tr><td>INTERNET_FLAG_RAW_DATA</td><td>检索的Gopher目录信息时，传回的数据作为GOPHER_FIND_DATA结构，如果检索的FTP目录信息时，作为一个WIN32_FIND_DATA结构。如果此标志没有指定，或者请求通过CERN代理创建， InternetOpenUrl返回的HTML版本的目录。</td></tr><tr><td>INTERNET_FLAG_RELOAD</td><td>从原服务器强制下载所要求的文件，对象，或目录列表，而不是从缓存下载。</td></tr><tr><td>INTERNET_FLAG_RESYNCHRONIZE</td><td>重新加载的HTTP资源，如果资源在最后一次下载后已被修改。所有FTP和Gopher资源将被重载。</td></tr><tr><td>INTERNET_FLAG_SECURE</td><td>使用安全传输语义。这次传输使用安全套字节层/专用通信技术（的SSL / PCT ），这只有在HTTP请求时有意义。</td></tr></tbody></table><p><em>dwContext</em>为指向一个变量的指针，将随着返回的句柄，一起传递给回调函数。有兴趣可以自行查阅，我们设为NULL即可。</p><p><em>Return Value</em>即返回值，若成功连接则返回一个有效的HINTERNET句柄，如果失败将放回NULL。如果失败可以使用GetLastError检索特定的错误讯息。请调用InternetGetLastResponseInfo确定为什么对服务器的访问被拒绝，这些函数大家有兴趣可以查阅更多资料来了解。</p><h4 id="FILE"><a href="#FILE" class="headerlink" title="FILE"></a>FILE</h4><p>这一步就不作过多讲解了，只简单介绍这几个函数。</p><p>fopen用来打开文件，返回文件指针。</p><pre><code class="cpp">FILE * fopen(const char * path, const char * mode);</code></pre><p>fwrite用于向文件中写入一个数据块，可以看实际代码自行理解。</p><pre><code class="cpp">size_t fwrite(const void * ptr, size_t size, size_t count, FILE * stream);</code></pre><p>fclose用于关闭一个流。</p><pre><code class="cpp">int fclose(FILE * stream); </code></pre><h4 id="InternetReadFile"><a href="#InternetReadFile" class="headerlink" title="InternetReadFile"></a>InternetReadFile</h4><p>InternetReadFile的官方定义为，从一个由InternetOpenUrl，FtpOpenFile或HttpOpenRequest函数打开的句柄中读取数据。我们使用它来将网页上的内容保存到一个字符数组中。</p><p>InternetReadFile函数每次获取的内容长度有限，所以应多次调用，直到全部获取完毕。</p><pre><code class="cpp">BOOLAPI InternetReadFile(    _In_ HINTERNET hFile,    _Out_writes_bytes_(dwNumberOfBytesToRead) __out_data_source(NETWORK) LPVOID lpBuffer,    _In_ DWORD dwNumberOfBytesToRead,    _Out_ LPDWORD lpdwNumberOfBytesRead    );</code></pre><p><em>hFile</em>为InternetOpenUrl，FtpOpenFile或HttpOpenRequest函数返回的句柄。我们使用InternetOpenUrl获得的HINTERNET句柄。</p><p><em>lpBuffer</em>为指向缓冲器的指针。因此我们需要定义一个字符数组，然后将它作为参数。</p><p><em>dwNumberOfBytesToRead</em>为要读取的字节数。这个需要根据自己的网络情况，我使用的为1024 * 1024，也就是1M。</p><p><em>lpdwNumberOfBytesRead</em>为接收读取字节量的变量。我们用它来判断是否将网页内容全部获取完毕。</p><p><em>Return Value</em>即返回值，成功为TRUE，失败为FALSE。若失败可用GetLastError查看更多错误信息。</p><h4 id="InternetCloseHandle"><a href="#InternetCloseHandle" class="headerlink" title="InternetCloseHandle"></a>InternetCloseHandle</h4><p>到这，获取网页的代码基本完工了。但做事应善始善终，那些句柄占用的资源还需要释放。InternetCloseHandle函数用来关闭一个Internet句柄。</p><pre><code class="cpp">BOOLAPI InternetCloseHandle(    _In_ HINTERNET hInternet    );</code></pre><p><em>hInternet</em>为要关闭的句柄。我们要依次关闭那俩个HINTERNET句柄。</p><p><em>Return Value</em>即返回值，成功为TRUE，失败为FALSE。若失败可用GetLastError查看更多错误信息。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>其实获取网页内容的代码是非常简单的，然而其中还蕴含着许许多多的知识。这段代码不仅可以获取网页，也可以用来获取图片或其他格式的文件。</p><p>这段函数下载后一般为Unicode编码文件，下一节我将讲解如何将它转换为ASCII编码。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 颓废 </tag>
            
            <tag> 项目 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuoguP5145 - 漂浮的鸭子</title>
      <link href="/2019-05/22-luogu5145/"/>
      <url>/2019-05/22-luogu5145/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP5145】漂浮的鸭子<br>题目链接: <a href="https://www.luogu.org/problemnew/show/P5145" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P5145</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近颓的东西太多了, 终于又来做搜索题.</p><p><del>这题很水</del> 随手交了个暴力随机化就A了.</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题正解思路非常妙, 代码比较短. 但我们能不能想一个更简单粗暴的方法呢?</p><p>先交一下能被卡成接近 $ O(n^2) $ 的暴力, 对于每一个点跑一遍DFS, 如果能回到此点就更新答案, 再加一个玄学剪枝, 将这个环上所有点打标记, 这些点就不用再DFS了.</p><p>开O2只有50分</p><pre><code class="cpp">// luogu-judger-enable-o2#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;using namespace std;int n, tox[100001], toy[100001], rex[100001], tmpx, ans, walkpast[100001], lw[100001];void dfs(int nown) {    memcpy(walkpast, lw, sizeof(walkpast));    int sum= 0, to= nown;    while(!walkpast[to]) {        walkpast[to]= 1;        sum+= toy[to], to= tox[to];    }    if(to != nown) return;    memcpy(lw, walkpast, sizeof(walkpast));    ans= max(ans, sum);    return;}int main() {    cin &gt;&gt; n;    for(int i= 1; i &lt;= n; i++) cin &gt;&gt; tox[i] &gt;&gt; toy[i], rex[tox[i]]= i;    for(int i= 1; i &lt;= n; i++)        if(!walkpast[i]) dfs(i);    cout &lt;&lt; ans &lt;&lt; endl;    return 0;}</code></pre><p>考虑优化, 其实复杂度是可以玄学过去的 <del>先把cin换成scnaf</del>.</p><p>然后我加了判断有环, 但此点不在环上的一个小剪枝.</p><pre><code class="cpp">    if(to != nown) {        lw[nown]= 1;        return;    }</code></pre><p>通俗一点讲, 让以后到达这个点的鸭子都知道自己的水坑不在环里就不用继续搜了.</p><p>要是还T怎么办, 那改一下搜索顺序说不定就A了, 为了防止从 N 到 1 一条链卡暴力的情况, 我选择随机起点, 再加一个卡时限.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;time.h&gt;#include &lt;stdlib.h&gt;using namespace std;int n, tox[100001], toy[100001], rex[100001], tmpx, ans, walkpast[100001], lw[100001];void dfs(int nown) {    memcpy(walkpast, lw, sizeof(walkpast));    int sum= 0, to= nown;    while(!walkpast[to]) {        walkpast[to]= 1;        sum+= toy[to], to= tox[to];    }    if(to != nown) {        lw[nown]= 1;        return;    }    memcpy(lw, walkpast, sizeof(walkpast));    ans= max(ans, sum);    return;}int main() {    scanf(&quot;%d&quot;, &amp;n);    for(int i= 1; i &lt;= n; i++) scanf(&quot;%d%d&quot;, tox + i, toy + i), rex[tox[i]]= i;    while(clock() &lt; CLOCKS_PER_SEC * 0.9) {        int tmpx= rand() % n + 1;        if(!walkpast[tmpx]) dfs(tmpx);    }    printf(&quot;%d\n&quot;, ans);    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 随机化搜索 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2014 - 起床困难综合症</title>
      <link href="/2019-04/27-luogu2114/"/>
      <url>/2019-04/27-luogu2114/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP2114】【BZOJ3668】【UOJ2】【VijosP1864】【NOI2014】起床困难综合症<br>题目链接1: <a href="https://www.luogu.org/problemnew/show/P2114" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2114</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3668" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3668</a><br>题目链接3: <a href="http://uoj.ac/problem/2" target="_blank" rel="noopener">http://uoj.ac/problem/2</a><br>题目链接4: <a href="https://vijos.org/p/1864" target="_blank" rel="noopener">https://vijos.org/p/1864</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用了一个原创的做法, 模拟配合搜索, 非常玄学的过了这道题. 好像还没有这种做法的题解.</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题意比较好理解, 当我看到这句话:</p><blockquote><p>最终受到的伤害为对方初始攻击力x依次经过所有n扇防御门后转变得到的攻击力</p></blockquote><p>依次经过N扇门是重点, 大大降低了这道题的难度. </p><p>由此想到最为暴力的方法, 从1到M枚举每一个数, 然后模拟N个操作, 算出每个数最后的伤害取个最大. 复杂度$ O(NM) $ 太大了.</p><p>然后考虑到位运算的性质, 我们只需要求出每一个二进制位上的变化就行了, 然后再把这些位组合起来, 求出一个初始不大于M但最终最大的数. 这个组合可以用搜索, 复杂度大概是 $ O(N \log t + t) $</p><p>看数据范围, $\log t$ 比30小, 我使用一个数组$ num[31][2] $, 第一维代表二进制的位数, 第二维代表初始为 0 还是 1, 初始化这个数组.</p><p>然后可以$ O(n \log t) $ 在线预处理, 直接模拟就行了. 预处理后的num数组就是每一个二进制位的变化. </p><p>然后就是求最终那个数, 因为M不是一个二的次幂, 所以不能循环求解, 但是可以用搜索.</p><p>如果学过01Trie, 上面的操作可以和它很相似, 求异或最大和本题的搜索的思路也类似. 然后加个条件判断和最优化剪枝就能完美通过本题了.</p><p>然后开int貌似会炸, 需要开long long, 但是最终答案应该是不会超int.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>未吸氧评测详情: Accepted  100</p><p>用时: 371ms / 内存: 932KB</p><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;limits.h&gt;using namespace std;#define int long longint n, m, tmpx, num[32][2];char tmps[4];int ans= -1;void dfs(int nown, int total, int tmpans) {    if(total &gt; m || tmpans &lt;= ans) return;    if(nown == -1) {        ans= tmpans;        return;    }    dfs(nown - 1, total, tmpans + (num[nown][0] &lt;&lt; nown));    dfs(nown - 1, total + (1 &lt;&lt; nown), tmpans + (num[nown][1] &lt;&lt; nown));    return;}signed main() {    cin &gt;&gt; n &gt;&gt; m;    for(int i= 0; i &lt; 31; i++) num[i][1]= 1;    for(int i= 0; i &lt; n; i++) {        cin &gt;&gt; tmps &gt;&gt; tmpx;        for(int j= 0; j &lt; 31; j++) {            int ch= (tmpx &gt;&gt; j) &amp; 1;            if(tmps[0] == &#39;A&#39;)                num[j][0]&amp;= ch, num[j][1]&amp;= ch;            else if(tmps[0] == &#39;O&#39;)                num[j][0]|= ch, num[j][1]|= ch;            else                num[j][0]^= ch, num[j][1]^= ch;        }    }    dfs(30, 0, 0);    cout &lt;&lt; ans &lt;&lt; endl;    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2003 - 传染病控制</title>
      <link href="/2019-04/24-luogu1041/"/>
      <url>/2019-04/24-luogu1041/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP1041】【NOIP2003】传染病控制<br>题目链接: <a href="https://www.luogu.org/problemnew/show/P1041" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1041</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这道题正解搜索, 然而可能有一些同学和我一样一开始觉得能用DP做的…推完递推式, 打完DP只有40, 然后也没有找出错误. 我这篇题解主要就来说一下这个DP的思路和错误.</p><p>如果你已经懂了DFS思路, 可以理解一下错误DP的思想, 如果看不出错误, 很可能是你对这个题的题意还不够清楚.</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先建图, 是以1节点为根的一棵树.</p><p>我们开一个一维数组f, 下标代表节点编号. 记录传染到这个点最少再传染给几个人.</p><p>我们分类讨论, 先不考虑儿子节点还会继续传染的情况. 如果这个点没有儿子或者只有一个儿子, 那么最少再传染0个人. 否则传染节点数就是儿子数 - 1.</p><p>如果儿子节点还会继续传染, 那么我们就切断求出的f值最大的那个.</p><p>$$ f[now] = (\sum_i^{i∈sons[now]}f[i] + 1) - (\max_i^{i∈sons[now]}f[i]) - 1 $$<br>这个式子我实在不会写的更好了, sons代表节点的所有儿子.</p><p>看懂的话应该很快就能发现DP的错误在哪.结合这两个说明:</p><blockquote><p>这种疾病的传播有周期性，在一个疾病传播周期之内，传染病将只会感染一代患者，而不会再传播给下一代</p></blockquote><blockquote><p>以致他们在一个疾病传播周期内，只能设法切断一条传播途径</p></blockquote><p>单独看好像还是找不出这个DP的错误.然后我给出一张图.</p><p><img src="/images/P1041_1.png" alt="Example"></p><p>正解应该是4, 然后DP竟跑出更优解3…其实是因为他在同一个疾病传播周期内切断了两条.DP将会先切断2, 然后切断7和8. 然而7和8在同一个传播周期内, 所以不能同时切断.</p><p>这就是DP的错误, 不符合题目要求. 然后就只能考虑搜索, 因为DP的启发, 就很容易想到按深度来搜索了.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>错误DP代码(40分):</p><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;using namespace std;int n, p, sums, f[301], head[301], edptr= 1;int tmpx, tmpy;struct edge {    int to, nexty;} eds[1001];void add(int a, int b) {    eds[edptr].to= b, eds[edptr].nexty= head[a];    head[a]= edptr++;    return;}void dp(int nown, int fa) {    int sons= 0, maxs= 0, tot= 0;    for(int i= head[nown], to; i; i= eds[i].nexty) {        to= eds[i].to;        if(to == fa) continue;        dp(to, nown);        ++sons, maxs= max(maxs, f[to]), tot+= f[to];    }    if(sons &gt;= 2) f[nown]= tot - maxs + sons - 1;    return;}int main() {    cin &gt;&gt; n &gt;&gt; p;    for(int i= 0; i &lt; p; i++) {        cin &gt;&gt; tmpx &gt;&gt; tmpy;        add(tmpx, tmpy), add(tmpy, tmpx);    }    dp(1, -1);    cout &lt;&lt; f[1] + 1 &lt;&lt; endl;    return 0;}</code></pre><p>正解搜索代码(100分):</p><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;vector&gt;using namespace std;int n, p, head[301], edptr= 1;int tmpx, tmpy;struct edge {    int to, nexty;} eds[1001];void add(int a, int b) {    eds[edptr].to= b, eds[edptr].nexty= head[a];    head[a]= edptr++;    return;}int dep[301], f[301], cutd[301];vector&lt; int &gt; node[302];void cut(int nown, int s) {    cutd[nown]= s;    for(int i= head[nown], to; i; i= eds[i].nexty) {        to= eds[i].to;        if(to != f[nown]) cut(to, s);    }    return;}void dfs1(int nown, int fa) {    dep[nown]= dep[fa] + 1, f[nown]= fa;    node[dep[nown]].push_back(nown);    for(int i= head[nown], to; i; i= eds[i].nexty) {        to= eds[i].to;        if(to != fa) dfs1(to, nown);    }    return;}int ans= 0x3f3f3f3f;void dfs2(int deep, int cost) {    if(cost &gt;= ans) return;    int notsolve= 0;    for(int i= 0; i &lt; (int)node[deep].size(); i++)        if(!cutd[node[deep][i]]) ++notsolve;    if(!notsolve) {        ans= cost;        return;    }    for(int i= 0; i &lt; (int)node[deep].size(); i++) {        if(cutd[node[deep][i]]) continue;        cut(node[deep][i], 1);        dfs2(deep + 1, cost + notsolve - 1);        cut(node[deep][i], 0);    }    return;}int main() {    cin &gt;&gt; n &gt;&gt; p;    for(int i= 0; i &lt; p; i++) {        cin &gt;&gt; tmpx &gt;&gt; tmpy;        add(tmpx, tmpy), add(tmpy, tmpx);    }    dfs1(1, 0), dfs2(2, 1);    cout &lt;&lt; ans &lt;&lt; endl;    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AT2657 - Mole and Abandoned Mine</title>
      <link href="/2019-04/22-luoguat2657/"/>
      <url>/2019-04/22-luoguat2657/</url>
      
        <content type="html"><![CDATA[<p>【AT2657】【LuoguAT2657】Mole and Abandoned Mine<br>题目链接1: <a href="https://www.luogu.org/problemnew/show/AT2657" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/AT2657</a><br>题目链接2: <a href="https://www.luogu.org/jump/atcoder/2657" target="_blank" rel="noopener">https://www.luogu.org/jump/atcoder/2657</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>时隔一月, 我又回来了写题解了. </p><p>以后可能颓的时间会变少. 现在文化课好像更重要些, 还是要专心学习吧. </p><p>本题是一个状压练手好题.</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我再大致翻译描述一下题目, 我一开始因为没看样例就理解错了.</p><p>本题给出N点M边的无向图, 然后要割掉其中一些边, 使从1到N只有一条不经过重复顶点的边, 求删掉的边的边权和最小.</p><blockquote><p>重点是这条路径不需要经过所有点</p></blockquote><p>看数据范围, 只可能是状压或者暴力搜索, 然而难度说明只能是状压了.</p><p>很容易想到, 求删边边权最少, 相当于求留下边的边权和最大.</p><p>然而我没有想到具体怎么求, 搜到了一个<a href="https://www.cnblogs.com/lcxer/p/10719030.html" target="_blank" rel="noopener">大佬的题解</a>, 最终的图还有一个重要性质:</p><blockquote><p>每个点最多只与保留下来的那条路径上的一个点有边相连</p></blockquote><p>所以我们先预处理出所有的联通块中的边权和.</p><p>然后进行DP, 二维数组, 第一维为处理了哪些点, 第二维为到达哪个点(当前终点).</p><p>有两种转移, 一种是新处理一个点, 一种是将一个联通块与当前终点相连.</p><p>我从这道题还学习了一个新的二进制性质.枚举一个数二进制下的所有子集:</p><pre><code>int num = 59; // 某个数for(int i= num; i; i= (i - 1) &amp; num) {    // i 为 num 的一个二进制子集}</code></pre><p>比如（0101）的子集为（0101）,（0100）,（0001）,（0000）.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;using namespace std;int n, m, nn, edge[16][16], tmpx, tmpy, tmpz, sums;int blocks[1 &lt;&lt; 16], len, f[1 &lt;&lt; 16][16];int main() {    cin &gt;&gt; n &gt;&gt; m;    nn= 1 &lt;&lt; n;    for(int i= 1; i &lt;= m; i++) {        cin &gt;&gt; tmpx &gt;&gt; tmpy &gt;&gt; tmpz;        sums+= edge[tmpx][tmpy]= edge[tmpy][tmpx]= tmpz;    }    for(int i= 0; i &lt; nn; i++) {        for(int j= 1; j &lt;= n; j++) {            if(!(i &amp; (1 &lt;&lt; (j - 1))) &amp;&amp; !(blocks[i | (1 &lt;&lt; (j - 1))])) {                blocks[i | (1 &lt;&lt; (j - 1))]= blocks[i];                for(int k= 1; k &lt;= n; k++)                    if((i &amp; (1 &lt;&lt; (k - 1)))) blocks[i | (1 &lt;&lt; (j - 1))]+= edge[j][k];            }        }    }    memset(f, -1, sizeof(f));    f[1][1]= 0;    for(int i= 0; i &lt; nn; i++) {        for(int j= 1; j &lt;= n; j++) {            if(f[i][j] != -1 &amp;&amp; (i &amp; (1 &lt;&lt; (j - 1)))) {                for(int k= 1; k &lt;= n; k++)                    if(!(i &amp; (1 &lt;&lt; (k - 1))) &amp;&amp; edge[j][k]) f[i | (1 &lt;&lt; (k - 1))][k]= max(f[i | (1 &lt;&lt; (k - 1))][k], f[i][j] + edge[j][k]);                tmpx= ((nn - 1) ^ i) | (1 &lt;&lt; (j - 1));                for(int k= tmpx; k; k= (k - 1) &amp; tmpx)                    if(k &amp; (1 &lt;&lt; (j - 1))) f[i | k][j]= max(f[i | k][j], f[i][j] + blocks[k]);            }        }    }    cout &lt;&lt; sums - f[nn - 1][n] &lt;&lt; endl;    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 状压DP </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2015 - 程序自动分析</title>
      <link href="/2019-03/31-luogu1955/"/>
      <url>/2019-03/31-luogu1955/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP1955】【BZOJ4195】【NOI2015】程序自动分析<br>题目链接1: <a href="https://www.luogu.org/problemnew/show/P1955" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1955</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4195" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4195</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>最近变得越来越颓废. 介于好长时间没更新博客, 强行水一篇题解.</p><p>这道题没看题解15分钟就A了, 真的有点水了…</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题意大概就是有 N 个关系, 每个代表X1 = X2 或者 X1 ≠ X2, 求出这些关系能不能成立.</p><p>很容易就想到并查集, 先将相等的X合并, 然后判断不等关系的两个变量在不在一个并查集里就行了.那么就只需要排下序, 先进行合并操作再去判断.</p><p>判断不等关系过程中发现X1和X2在同一个并查集里, 那直接输出NO就行了.</p><p>然而X的下标可能会很大. 所以考虑离散化, 那么肯定直接上map.</p><p>输入的时候就离散化, 然后排个序, 打完合并和查询就AC了.</p><p>不过map常数巨大, 需要开O2稳过.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>评测详情（O2）:<br>Accepted  100<br>用时: 1623ms / 内存: 11960KB</p><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;map&gt;#include &lt;algorithm&gt;using namespace std;int t, n, f[200001], mptr, cnt, flag;struct date {    int x, y, d;    bool operator&lt;(const date &amp;d2) const {        return d &gt; d2.d;    }} dat[100001];int query(int x) {    if(f[x] == x) return x;    return f[x]= query(f[x]);}map&lt; int, int &gt; m;int main() {    scanf(&quot;%d&quot;, &amp;t);    while(t--) {        scanf(&quot;%d&quot;, &amp;n);        mptr= cnt= flag= 0;        m.clear();        for(int i= 1; i &lt;= n; i++) {            scanf(&quot;%d%d%d&quot;, &amp;dat[i].x, &amp;dat[i].y, &amp;dat[i].d);            if(!m.count(dat[i].x)) m[dat[i].x]= ++mptr;            if(!m.count(dat[i].y)) m[dat[i].y]= ++mptr;            dat[i].x= m[dat[i].x], dat[i].y= m[dat[i].y];            cnt+= dat[i].d;        }        sort(dat + 1, dat + n + 1);        for(int i= 1; i &lt;= mptr; i++) f[i]= i;        for(int i= 1; i &lt;= cnt; i++) {            int fx= query(dat[i].x);            f[query(dat[i].y)]= fx;        }        for(int i= cnt + 1; i &lt;= n; i++) {            if(query(dat[i].x) == query(dat[i].y)) {                printf(&quot;NO\n&quot;);                flag= 1;                break;            }        }        if(!flag) printf(&quot;YES\n&quot;);    }    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 并查集 </tag>
            
            <tag> STL </tag>
            
            <tag> 离散化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2005 - 智慧珠游戏</title>
      <link href="/2019-03/17-luogu4205/"/>
      <url>/2019-03/17-luogu4205/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP4205】【BZOJ1501】【NOI2005】智慧珠游戏<br>题目链接1: <a href="https://www.luogu.org/problemnew/show/P4205" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4205</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1501" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=1501</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>最近忙于各种事, 又有十天没写题解了, 好像这十天又变颓废了好多</p><p>实在学习不下去很酷很炫的算法, 特意找搜索模拟等类题, 然后看到了这道题</p><p>做题的时候教练还在说:”不要看不起搜索…”</p><p>然后因为看我做这道题, 旁边的大佬还作了一首诗</p><pre><code>生命诚可贵搜索价更高若为暴力故二者皆可抛    --Steve_Braveman</code></pre><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我就直接把题目描述的图搬过来了</p><p><img src="https://www.lydsy.com/JudgeOnline/images/1501_1.jpg" alt="题目描述"></p><p>一眼看上去就直接劝退, 当然其实也没那么严重, 好像还是可做的</p><p>具体分析一下这道题, 所有的零件都允许旋转和翻转, 那么每种零件都有多种放置的方法</p><p>所以我们就可以画一下不同的方法, 可以在草稿纸上或者上画图</p><p>为了区别什么是不同的摆放方法, 就要确定搜索的方式, 我们枚举每一个点, 如果这个点当前没有被覆盖过, 那么我们就可以选择当前剩余的零件进行判断.</p><p>我选择零件最左上角的那个珠子来填当前这个点, 因此有这些种不同的摆放方式</p><pre><code>A: 4种B: 2种C: 8种D: 1种E: 4种F: 8种G: 4种H: 8种I: 8种J: 1种K: 4种L: 8种</code></pre><p>加起来的确有很多种, 然后就开始写DFS了.</p><p>我写的还是比较暴力的, 暴力模拟, 只做了一些小的技巧.</p><p>在某次DFS种, 第一次判断某条件时就把他以一个变量存起来, 起一个较为直观的变量名, 然后等下次判断就可以直接判断这个变量了.</p><p>写的时候得有耐心, 确实是有想死的感觉.</p><p>写完后, 你还是AC不了这道题, 会有一个点TLE. </p><p>这个点是No solution…我先选择了卡时限, 到0.95s之后就输出无解</p><p>但是事实证明不可行, 因为clock函数效率不高, 许多点的耗时飙升, 并导致另一个本来有解的却输出了无解…</p><p>然后就考虑卡DFS次数, 我在本地试了一下, 10000000就不会错判无解了, 然后提交AC了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>注释中A1代表A零件的第1种摆放方法, 以此类推</p><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;time.h&gt;#include &lt;stdlib.h&gt;using namespace std;int chose[126], cnt;char tmc, inits[20][20];inline int getlimit(int nowx, int nowy) {    return nowx &gt; 0 &amp;&amp; nowx &lt; 11 &amp;&amp; nowy &gt; 0 &amp;&amp; nowy &lt; nowx + 1;}int dfs(int nowx, int nowy) {    if(++cnt &gt; 10000000) return false;    if(nowx == 11) return true;    if(nowy == nowx + 1) return dfs(nowx + 1, 1);    if(inits[nowx][nowy] != &#39;.&#39;) return dfs(nowx, nowy + 1);    int right= (getlimit(nowx, nowy + 1) &amp;&amp; inits[nowx][nowy + 1] == &#39;.&#39;);    int rdown= (getlimit(nowx + 1, nowy + 1) &amp;&amp; inits[nowx + 1][nowy + 1] == &#39;.&#39;);    int down= (getlimit(nowx + 1, nowy) &amp;&amp; inits[nowx + 1][nowy] == &#39;.&#39;);    int dleft= (getlimit(nowx + 1, nowy - 1) &amp;&amp; inits[nowx + 1][nowy - 1] == &#39;.&#39;);    if(!chose[&#39;A&#39;]) {        chose[&#39;A&#39;]= true, inits[nowx][nowy]= &#39;A&#39;;        // A1        if(right &amp;&amp; rdown) {            inits[nowx][nowy + 1]= &#39;A&#39;, inits[nowx + 1][nowy + 1]= &#39;A&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;;        }        // A2        if(down &amp;&amp; dleft) {            inits[nowx + 1][nowy]= &#39;A&#39;, inits[nowx + 1][nowy - 1]= &#39;A&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy - 1]= &#39;.&#39;;        }        // A3        if(down &amp;&amp; rdown) {            inits[nowx + 1][nowy]= &#39;A&#39;, inits[nowx + 1][nowy + 1]= &#39;A&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;;        }        // A4        if(right &amp;&amp; down) {            inits[nowx][nowy + 1]= &#39;A&#39;, inits[nowx + 1][nowy]= &#39;A&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy]= &#39;.&#39;;        }        chose[&#39;A&#39;]= false;    }    int ddown= (getlimit(nowx + 2, nowy) &amp;&amp; inits[nowx + 2][nowy] == &#39;.&#39;);    int dddown= (getlimit(nowx + 3, nowy) &amp;&amp; inits[nowx + 3][nowy] == &#39;.&#39;);    int rright= (getlimit(nowx, nowy + 2) &amp;&amp; inits[nowx][nowy + 2] == &#39;.&#39;);    int rrright= (getlimit(nowx, nowy + 3) &amp;&amp; inits[nowx][nowy + 3] == &#39;.&#39;);    if(!chose[&#39;B&#39;]) {        chose[&#39;B&#39;]= true, inits[nowx][nowy]= &#39;B&#39;;        // B1        if(down &amp;&amp; ddown &amp;&amp; dddown) {            inits[nowx + 1][nowy]= &#39;B&#39;, inits[nowx + 2][nowy]= &#39;B&#39;, inits[nowx + 3][nowy]= &#39;B&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 3][nowy]= &#39;.&#39;;        }        // B2        if(right &amp;&amp; rright &amp;&amp; rrright) {            inits[nowx][nowy + 1]= &#39;B&#39;, inits[nowx][nowy + 2]= &#39;B&#39;, inits[nowx][nowy + 3]= &#39;B&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx][nowy + 2]= &#39;.&#39;, inits[nowx][nowy + 3]= &#39;.&#39;;        }        chose[&#39;B&#39;]= false;    }    int rddown= (getlimit(nowx + 2, nowy + 1) &amp;&amp; inits[nowx + 2][nowy + 1] == &#39;.&#39;);    int dlleft= (getlimit(nowx + 1, nowy - 2) &amp;&amp; inits[nowx + 1][nowy - 2] == &#39;.&#39;);    int drright= (getlimit(nowx + 1, nowy + 2) &amp;&amp; inits[nowx + 1][nowy + 2] == &#39;.&#39;);    int ddleft= (getlimit(nowx + 2, nowy - 1) &amp;&amp; inits[nowx + 2][nowy - 1] == &#39;.&#39;);    if(!chose[&#39;C&#39;]) {        chose[&#39;C&#39;]= true, inits[nowx][nowy]= &#39;C&#39;;        // C1        if(right &amp;&amp; rright &amp;&amp; down) {            inits[nowx][nowy + 1]= &#39;C&#39;, inits[nowx][nowy + 2]= &#39;C&#39;, inits[nowx + 1][nowy]= &#39;C&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx][nowy + 2]= &#39;.&#39;, inits[nowx + 1][nowy]= &#39;.&#39;;        }        // C2        if(right &amp;&amp; rdown &amp;&amp; rddown) {            inits[nowx][nowy + 1]= &#39;C&#39;, inits[nowx + 1][nowy + 1]= &#39;C&#39;, inits[nowx + 2][nowy + 1]= &#39;C&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 2][nowy + 1]= &#39;.&#39;;        }        // C3        if(down &amp;&amp; dleft &amp;&amp; dlleft) {            inits[nowx + 1][nowy]= &#39;C&#39;, inits[nowx + 1][nowy - 1]= &#39;C&#39;, inits[nowx + 1][nowy - 2]= &#39;C&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy - 1]= &#39;.&#39;, inits[nowx + 1][nowy - 2]= &#39;.&#39;;        }        // C4        if(down &amp;&amp; ddown &amp;&amp; rddown) {            inits[nowx + 1][nowy]= &#39;C&#39;, inits[nowx + 2][nowy]= &#39;C&#39;, inits[nowx + 2][nowy + 1]= &#39;C&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 2][nowy + 1]= &#39;.&#39;;        }        // C5        if(down &amp;&amp; rdown &amp;&amp; drright) {            inits[nowx + 1][nowy]= &#39;C&#39;, inits[nowx + 1][nowy + 1]= &#39;C&#39;, inits[nowx + 1][nowy + 2]= &#39;C&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy + 2]= &#39;.&#39;;        }        // C6        if(right &amp;&amp; down &amp;&amp; ddown) {            inits[nowx][nowy + 1]= &#39;C&#39;, inits[nowx + 1][nowy]= &#39;C&#39;, inits[nowx + 2][nowy]= &#39;C&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;;        }        // C7        if(right &amp;&amp; rright &amp;&amp; drright) {            inits[nowx][nowy + 1]= &#39;C&#39;, inits[nowx][nowy + 2]= &#39;C&#39;, inits[nowx + 1][nowy + 2]= &#39;C&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx][nowy + 2]= &#39;.&#39;, inits[nowx + 1][nowy + 2]= &#39;.&#39;;        }        // C8        if(down &amp;&amp; ddown &amp;&amp; ddleft) {            inits[nowx + 1][nowy]= &#39;C&#39;, inits[nowx + 2][nowy]= &#39;C&#39;, inits[nowx + 2][nowy - 1]= &#39;C&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 2][nowy - 1]= &#39;.&#39;;        }        chose[&#39;C&#39;]= false;    }    if(!chose[&#39;D&#39;]) {        chose[&#39;D&#39;]= true, inits[nowx][nowy]= &#39;D&#39;;        // D1        if(right &amp;&amp; down &amp;&amp; rdown) {            inits[nowx + 1][nowy]= &#39;D&#39;, inits[nowx][nowy + 1]= &#39;D&#39;, inits[nowx + 1][nowy + 1]= &#39;D&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;;        }        chose[&#39;D&#39;]= false;    }    int ddrright= (getlimit(nowx + 2, nowy + 2) &amp;&amp; inits[nowx + 2][nowy + 2] == &#39;.&#39;);    int ddlleft= (getlimit(nowx + 2, nowy - 2) &amp;&amp; inits[nowx + 2][nowy - 2] == &#39;.&#39;);    if(!chose[&#39;E&#39;]) {        chose[&#39;E&#39;]= true, inits[nowx][nowy]= &#39;E&#39;;        // E1        if(down &amp;&amp; ddown &amp;&amp; rddown &amp;&amp; ddrright) {            inits[nowx + 1][nowy]= &#39;E&#39;, inits[nowx + 2][nowy]= &#39;E&#39;, inits[nowx + 2][nowy + 1]= &#39;E&#39;, inits[nowx + 2][nowy + 2]= &#39;E&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 2][nowy + 1]= &#39;.&#39;, inits[nowx + 2][nowy + 2]= &#39;.&#39;;        }        // E2        if(right &amp;&amp; rright &amp;&amp; down &amp;&amp; ddown) {            inits[nowx][nowy + 1]= &#39;E&#39;, inits[nowx][nowy + 2]= &#39;E&#39;, inits[nowx + 1][nowy]= &#39;E&#39;, inits[nowx + 2][nowy]= &#39;E&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx][nowy + 2]= &#39;.&#39;, inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;;        }        // E3        if(right &amp;&amp; rright &amp;&amp; drright &amp;&amp; ddrright) {            inits[nowx][nowy + 1]= &#39;E&#39;, inits[nowx][nowy + 2]= &#39;E&#39;, inits[nowx + 1][nowy + 2]= &#39;E&#39;, inits[nowx + 2][nowy + 2]= &#39;E&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx][nowy + 2]= &#39;.&#39;, inits[nowx + 1][nowy + 2]= &#39;.&#39;, inits[nowx + 2][nowy + 2]= &#39;.&#39;;        }        // E4        if(down &amp;&amp; ddown &amp;&amp; ddleft &amp;&amp; ddlleft) {            inits[nowx + 1][nowy]= &#39;E&#39;, inits[nowx + 2][nowy]= &#39;E&#39;, inits[nowx + 2][nowy - 1]= &#39;E&#39;, inits[nowx + 2][nowy - 2]= &#39;E&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 2][nowy - 1]= &#39;.&#39;, inits[nowx + 2][nowy - 2]= &#39;.&#39;;        }        chose[&#39;E&#39;]= false;    }    if(!chose[&#39;F&#39;]) {        chose[&#39;F&#39;]= true, inits[nowx][nowy]= &#39;F&#39;;        // F1        if(right &amp;&amp; rright &amp;&amp; rrright &amp;&amp; rdown) {            inits[nowx][nowy + 1]= &#39;F&#39;, inits[nowx][nowy + 2]= &#39;F&#39;, inits[nowx][nowy + 3]= &#39;F&#39;, inits[nowx + 1][nowy + 1]= &#39;F&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx][nowy + 2]= &#39;.&#39;, inits[nowx][nowy + 3]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;;        }        // F2        if(down &amp;&amp; ddown &amp;&amp; dddown &amp;&amp; dleft) {            inits[nowx + 1][nowy]= &#39;F&#39;, inits[nowx + 2][nowy]= &#39;F&#39;, inits[nowx + 3][nowy]= &#39;F&#39;, inits[nowx + 1][nowy - 1]= &#39;F&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 3][nowy]= &#39;.&#39;, inits[nowx + 1][nowy - 1]= &#39;.&#39;;        }        // F3        if(down &amp;&amp; dleft &amp;&amp; dlleft &amp;&amp; rdown) {            inits[nowx + 1][nowy]= &#39;F&#39;, inits[nowx + 1][nowy - 1]= &#39;F&#39;, inits[nowx + 1][nowy - 2]= &#39;F&#39;, inits[nowx + 1][nowy + 1]= &#39;F&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy - 1]= &#39;.&#39;, inits[nowx + 1][nowy - 2]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;;        }        // F4        if(down &amp;&amp; ddown &amp;&amp; dddown &amp;&amp; rddown) {            inits[nowx + 1][nowy]= &#39;F&#39;, inits[nowx + 2][nowy]= &#39;F&#39;, inits[nowx + 3][nowy]= &#39;F&#39;, inits[nowx + 2][nowy + 1]= &#39;F&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 3][nowy]= &#39;.&#39;, inits[nowx + 2][nowy + 1]= &#39;.&#39;;        }        // F5        if(down &amp;&amp; dleft &amp;&amp; rdown &amp;&amp; drright) {            inits[nowx + 1][nowy]= &#39;F&#39;, inits[nowx + 1][nowy - 1]= &#39;F&#39;, inits[nowx + 1][nowy + 1]= &#39;F&#39;, inits[nowx + 1][nowy + 2]= &#39;F&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy - 1]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy + 2]= &#39;.&#39;;        }        // F6        if(down &amp;&amp; ddown &amp;&amp; ddleft &amp;&amp; dddown) {            inits[nowx + 1][nowy]= &#39;F&#39;, inits[nowx + 2][nowy]= &#39;F&#39;, inits[nowx + 2][nowy - 1]= &#39;F&#39;, inits[nowx + 3][nowy]= &#39;F&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 2][nowy - 1]= &#39;.&#39;, inits[nowx + 3][nowy]= &#39;.&#39;;        }        // F7        if(right &amp;&amp; rright &amp;&amp; drright &amp;&amp; rrright) {            inits[nowx][nowy + 1]= &#39;F&#39;, inits[nowx][nowy + 2]= &#39;F&#39;, inits[nowx + 1][nowy + 2]= &#39;F&#39;, inits[nowx][nowy + 3]= &#39;F&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx][nowy + 2]= &#39;.&#39;, inits[nowx + 1][nowy + 2]= &#39;.&#39;, inits[nowx][nowy + 3]= &#39;.&#39;;        }        // F8        if(down &amp;&amp; rdown &amp;&amp; ddown &amp;&amp; dddown) {            inits[nowx + 1][nowy]= &#39;F&#39;, inits[nowx + 1][nowy + 1]= &#39;F&#39;, inits[nowx + 2][nowy]= &#39;F&#39;, inits[nowx + 3][nowy]= &#39;F&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 3][nowy]= &#39;.&#39;;        }        chose[&#39;F&#39;]= false;    }    if(!chose[&#39;G&#39;]) {        chose[&#39;G&#39;]= true, inits[nowx][nowy]= &#39;G&#39;;        // G1        if(down &amp;&amp; right &amp;&amp; rright &amp;&amp; drright) {            inits[nowx + 1][nowy]= &#39;G&#39;, inits[nowx][nowy + 1]= &#39;G&#39;, inits[nowx][nowy + 2]= &#39;G&#39;, inits[nowx + 1][nowy + 2]= &#39;G&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx][nowy + 2]= &#39;.&#39;, inits[nowx + 1][nowy + 2]= &#39;.&#39;;        }        // G2        if(right &amp;&amp; rdown &amp;&amp; rddown &amp;&amp; ddown) {            inits[nowx][nowy + 1]= &#39;G&#39;, inits[nowx + 1][nowy + 1]= &#39;G&#39;, inits[nowx + 2][nowy + 1]= &#39;G&#39;, inits[nowx + 2][nowy]= &#39;G&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 2][nowy + 1]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;;        }        // G3        if(down &amp;&amp; rdown &amp;&amp; drright &amp;&amp; rright) {            inits[nowx + 1][nowy]= &#39;G&#39;, inits[nowx + 1][nowy + 1]= &#39;G&#39;, inits[nowx + 1][nowy + 2]= &#39;G&#39;, inits[nowx][nowy + 2]= &#39;G&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy + 2]= &#39;.&#39;, inits[nowx][nowy + 2]= &#39;.&#39;;        }        // G4        if(right &amp;&amp; down &amp;&amp; ddown &amp;&amp; rddown) {            inits[nowx][nowy + 1]= &#39;G&#39;, inits[nowx + 1][nowy]= &#39;G&#39;, inits[nowx + 2][nowy]= &#39;G&#39;, inits[nowx + 2][nowy + 1]= &#39;G&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 2][nowy + 1]= &#39;.&#39;;        }        chose[&#39;G&#39;]= false;    }    if(!chose[&#39;H&#39;]) {        chose[&#39;H&#39;]= true, inits[nowx][nowy]= &#39;H&#39;;        // H1        if(right &amp;&amp; rright &amp;&amp; down &amp;&amp; rdown) {            inits[nowx][nowy + 1]= &#39;H&#39;, inits[nowx][nowy + 2]= &#39;H&#39;, inits[nowx + 1][nowy]= &#39;H&#39;, inits[nowx + 1][nowy + 1]= &#39;H&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx][nowy + 2]= &#39;.&#39;, inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;;        }        // H2        if(right &amp;&amp; down &amp;&amp; rdown &amp;&amp; rddown) {            inits[nowx][nowy + 1]= &#39;H&#39;, inits[nowx + 1][nowy]= &#39;H&#39;, inits[nowx + 1][nowy + 1]= &#39;H&#39;, inits[nowx + 2][nowy + 1]= &#39;H&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 2][nowy + 1]= &#39;.&#39;;        }        // H3        if(right &amp;&amp; down &amp;&amp; rdown &amp;&amp; dleft) {            inits[nowx][nowy + 1]= &#39;H&#39;, inits[nowx + 1][nowy]= &#39;H&#39;, inits[nowx + 1][nowy + 1]= &#39;H&#39;, inits[nowx + 1][nowy - 1]= &#39;H&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy - 1]= &#39;.&#39;;        }        // H4        if(down &amp;&amp; rdown &amp;&amp; ddown &amp;&amp; rddown) {            inits[nowx + 1][nowy]= &#39;H&#39;, inits[nowx + 1][nowy + 1]= &#39;H&#39;, inits[nowx + 2][nowy]= &#39;H&#39;, inits[nowx + 2][nowy + 1]= &#39;H&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 2][nowy + 1]= &#39;.&#39;;        }        // H5        if(right &amp;&amp; down &amp;&amp; rdown &amp;&amp; drright) {            inits[nowx][nowy + 1]= &#39;H&#39;, inits[nowx + 1][nowy]= &#39;H&#39;, inits[nowx + 1][nowy + 1]= &#39;H&#39;, inits[nowx + 1][nowy + 2]= &#39;H&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy + 2]= &#39;.&#39;;        }        // H6        if(down &amp;&amp; ddown &amp;&amp; dleft &amp;&amp; ddleft) {            inits[nowx + 1][nowy]= &#39;H&#39;, inits[nowx + 2][nowy]= &#39;H&#39;, inits[nowx + 1][nowy - 1]= &#39;H&#39;, inits[nowx + 2][nowy - 1]= &#39;H&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 1][nowy - 1]= &#39;.&#39;, inits[nowx + 2][nowy - 1]= &#39;.&#39;;        }        // H7        if(right &amp;&amp; rright &amp;&amp; rdown &amp;&amp; drright) {            inits[nowx][nowy + 1]= &#39;H&#39;, inits[nowx][nowy + 2]= &#39;H&#39;, inits[nowx + 1][nowy + 1]= &#39;H&#39;, inits[nowx + 1][nowy + 2]= &#39;H&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx][nowy + 2]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy + 2]= &#39;.&#39;;        }        // H8        if(right &amp;&amp; down &amp;&amp; ddown &amp;&amp; rdown) {            inits[nowx][nowy + 1]= &#39;H&#39;, inits[nowx + 1][nowy]= &#39;H&#39;, inits[nowx + 2][nowy]= &#39;H&#39;, inits[nowx + 1][nowy + 1]= &#39;H&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;;        }        chose[&#39;H&#39;]= false;    }    int rrdright= (getlimit(nowx + 1, nowy + 3) &amp;&amp; inits[nowx + 1][nowy + 3] == &#39;.&#39;);    int ddldown= (getlimit(nowx + 3, nowy - 1) &amp;&amp; inits[nowx + 3][nowy - 1] == &#39;.&#39;);    int drddown= (getlimit(nowx + 3, nowy + 1) &amp;&amp; inits[nowx + 3][nowy + 1] == &#39;.&#39;);    if(!chose[&#39;I&#39;]) {        chose[&#39;I&#39;]= true, inits[nowx][nowy]= &#39;I&#39;;        // I1        if(right &amp;&amp; rright &amp;&amp; drright &amp;&amp; rrdright) {            inits[nowx][nowy + 1]= &#39;I&#39;, inits[nowx][nowy + 2]= &#39;I&#39;, inits[nowx + 1][nowy + 2]= &#39;I&#39;, inits[nowx + 1][nowy + 3]= &#39;I&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx][nowy + 2]= &#39;.&#39;, inits[nowx + 1][nowy + 2]= &#39;.&#39;, inits[nowx + 1][nowy + 3]= &#39;.&#39;;        }        // I2        if(down &amp;&amp; ddown &amp;&amp; ddleft &amp;&amp; ddldown) {            inits[nowx + 1][nowy]= &#39;I&#39;, inits[nowx + 2][nowy]= &#39;I&#39;, inits[nowx + 2][nowy - 1]= &#39;I&#39;, inits[nowx + 3][nowy - 1]= &#39;I&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 2][nowy - 1]= &#39;.&#39;, inits[nowx + 3][nowy - 1]= &#39;.&#39;;        }        // I3        if(right &amp;&amp; rdown &amp;&amp; drright &amp;&amp; rrdright) {            inits[nowx][nowy + 1]= &#39;I&#39;, inits[nowx + 1][nowy + 1]= &#39;I&#39;, inits[nowx + 1][nowy + 2]= &#39;I&#39;, inits[nowx + 1][nowy + 3]= &#39;I&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy + 2]= &#39;.&#39;, inits[nowx + 1][nowy + 3]= &#39;.&#39;;        }        // I4        if(down &amp;&amp; dleft &amp;&amp; ddleft &amp;&amp; ddldown) {            inits[nowx + 1][nowy]= &#39;I&#39;, inits[nowx + 1][nowy - 1]= &#39;I&#39;, inits[nowx + 2][nowy - 1]= &#39;I&#39;, inits[nowx + 3][nowy - 1]= &#39;I&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy - 1]= &#39;.&#39;, inits[nowx + 2][nowy - 1]= &#39;.&#39;, inits[nowx + 3][nowy - 1]= &#39;.&#39;;        }        // I5        if(right &amp;&amp; down &amp;&amp; dleft &amp;&amp; dlleft) {            inits[nowx][nowy + 1]= &#39;I&#39;, inits[nowx + 1][nowy]= &#39;I&#39;, inits[nowx + 1][nowy - 1]= &#39;I&#39;, inits[nowx + 1][nowy - 2]= &#39;I&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy - 1]= &#39;.&#39;, inits[nowx + 1][nowy - 2]= &#39;.&#39;;        }        // I6        if(down &amp;&amp; rdown &amp;&amp; rddown &amp;&amp; drddown) {            inits[nowx + 1][nowy]= &#39;I&#39;, inits[nowx + 1][nowy + 1]= &#39;I&#39;, inits[nowx + 2][nowy + 1]= &#39;I&#39;, inits[nowx + 3][nowy + 1]= &#39;I&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 2][nowy + 1]= &#39;.&#39;, inits[nowx + 3][nowy + 1]= &#39;.&#39;;        }        // I7        if(right &amp;&amp; rright &amp;&amp; down &amp;&amp; dleft) {            inits[nowx][nowy + 1]= &#39;I&#39;, inits[nowx][nowy + 2]= &#39;I&#39;, inits[nowx + 1][nowy]= &#39;I&#39;, inits[nowx + 1][nowy - 1]= &#39;I&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx][nowy + 2]= &#39;.&#39;, inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy - 1]= &#39;.&#39;;        }        // I8        if(down &amp;&amp; ddown &amp;&amp; rddown &amp;&amp; drddown) {            inits[nowx + 1][nowy]= &#39;I&#39;, inits[nowx + 2][nowy]= &#39;I&#39;, inits[nowx + 2][nowy + 1]= &#39;I&#39;, inits[nowx + 3][nowy + 1]= &#39;I&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 2][nowy + 1]= &#39;.&#39;, inits[nowx + 3][nowy + 1]= &#39;.&#39;;        }        chose[&#39;I&#39;]= false;    }    if(!chose[&#39;J&#39;]) {        chose[&#39;J&#39;]= true, inits[nowx][nowy]= &#39;J&#39;;        // J1        if(down &amp;&amp; dleft &amp;&amp; rdown &amp;&amp; ddown) {            inits[nowx + 1][nowy]= &#39;J&#39;, inits[nowx + 1][nowy - 1]= &#39;J&#39;, inits[nowx + 1][nowy + 1]= &#39;J&#39;, inits[nowx + 2][nowy]= &#39;J&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy - 1]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;;        }        chose[&#39;J&#39;]= false;    }    if(!chose[&#39;K&#39;]) {        chose[&#39;K&#39;]= true, inits[nowx][nowy]= &#39;K&#39;;        // K1        if(down &amp;&amp; rdown &amp;&amp; rddown &amp;&amp; ddrright) {            inits[nowx + 1][nowy]= &#39;K&#39;, inits[nowx + 1][nowy + 1]= &#39;K&#39;, inits[nowx + 2][nowy + 1]= &#39;K&#39;, inits[nowx + 2][nowy + 2]= &#39;K&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 2][nowy + 1]= &#39;.&#39;, inits[nowx + 2][nowy + 2]= &#39;.&#39;;        }        // K2        if(right &amp;&amp; down &amp;&amp; dleft &amp;&amp; ddleft) {            inits[nowx][nowy + 1]= &#39;K&#39;, inits[nowx + 1][nowy]= &#39;K&#39;, inits[nowx + 1][nowy - 1]= &#39;K&#39;, inits[nowx + 2][nowy - 1]= &#39;K&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy - 1]= &#39;.&#39;, inits[nowx + 2][nowy - 1]= &#39;.&#39;;        }        // K3        if(right &amp;&amp; rdown &amp;&amp; drright &amp;&amp; ddrright) {            inits[nowx][nowy + 1]= &#39;K&#39;, inits[nowx + 1][nowy + 1]= &#39;K&#39;, inits[nowx + 1][nowy + 2]= &#39;K&#39;, inits[nowx + 2][nowy + 2]= &#39;K&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy + 2]= &#39;.&#39;, inits[nowx + 2][nowy + 2]= &#39;.&#39;;        }        // K4        if(down &amp;&amp; dleft &amp;&amp; ddleft &amp;&amp; ddlleft) {            inits[nowx + 1][nowy]= &#39;K&#39;, inits[nowx + 1][nowy - 1]= &#39;K&#39;, inits[nowx + 2][nowy - 1]= &#39;K&#39;, inits[nowx + 2][nowy - 2]= &#39;K&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy - 1]= &#39;.&#39;, inits[nowx + 2][nowy - 1]= &#39;.&#39;, inits[nowx + 2][nowy - 2]= &#39;.&#39;;        }        chose[&#39;K&#39;]= false;    }    int dllleft= (getlimit(nowx + 1, nowy - 3) &amp;&amp; inits[nowx + 1][nowy - 3] == &#39;.&#39;);    if(!chose[&#39;L&#39;]) {        chose[&#39;L&#39;]= true, inits[nowx][nowy]= &#39;L&#39;;        // L1        if(right &amp;&amp; rright &amp;&amp; rrright &amp;&amp; down) {            inits[nowx][nowy + 1]= &#39;L&#39;, inits[nowx][nowy + 2]= &#39;L&#39;, inits[nowx][nowy + 3]= &#39;L&#39;, inits[nowx + 1][nowy]= &#39;L&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx][nowy + 2]= &#39;.&#39;, inits[nowx][nowy + 3]= &#39;.&#39;, inits[nowx + 1][nowy]= &#39;.&#39;;        }        // L2        if(right &amp;&amp; rdown &amp;&amp; rddown &amp;&amp; drddown) {            inits[nowx][nowy + 1]= &#39;L&#39;, inits[nowx + 1][nowy + 1]= &#39;L&#39;, inits[nowx + 2][nowy + 1]= &#39;L&#39;, inits[nowx + 3][nowy + 1]= &#39;L&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 2][nowy + 1]= &#39;.&#39;, inits[nowx + 3][nowy + 1]= &#39;.&#39;;        }        // L3        if(down &amp;&amp; dleft &amp;&amp; dlleft &amp;&amp; dllleft) {            inits[nowx + 1][nowy]= &#39;L&#39;, inits[nowx + 1][nowy - 1]= &#39;L&#39;, inits[nowx + 1][nowy - 2]= &#39;L&#39;, inits[nowx + 1][nowy - 3]= &#39;L&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy - 1]= &#39;.&#39;, inits[nowx + 1][nowy - 2]= &#39;.&#39;, inits[nowx + 1][nowy - 3]= &#39;.&#39;;        }        // L4        if(down &amp;&amp; ddown &amp;&amp; dddown &amp;&amp; drddown) {            inits[nowx + 1][nowy]= &#39;L&#39;, inits[nowx + 2][nowy]= &#39;L&#39;, inits[nowx + 3][nowy]= &#39;L&#39;, inits[nowx + 3][nowy + 1]= &#39;L&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 3][nowy]= &#39;.&#39;, inits[nowx + 3][nowy + 1]= &#39;.&#39;;        }        // L5        if(down &amp;&amp; rdown &amp;&amp; drright &amp;&amp; rrdright) {            inits[nowx + 1][nowy]= &#39;L&#39;, inits[nowx + 1][nowy + 1]= &#39;L&#39;, inits[nowx + 1][nowy + 2]= &#39;L&#39;, inits[nowx + 1][nowy + 3]= &#39;L&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 1][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy + 2]= &#39;.&#39;, inits[nowx + 1][nowy + 3]= &#39;.&#39;;        }        // L6        if(down &amp;&amp; ddown &amp;&amp; dddown &amp;&amp; ddldown) {            inits[nowx + 1][nowy]= &#39;L&#39;, inits[nowx + 2][nowy]= &#39;L&#39;, inits[nowx + 3][nowy]= &#39;L&#39;, inits[nowx + 3][nowy - 1]= &#39;L&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 3][nowy]= &#39;.&#39;, inits[nowx + 3][nowy - 1]= &#39;.&#39;;        }        // L7        if(right &amp;&amp; rright &amp;&amp; rrright &amp;&amp; rrdright) {            inits[nowx][nowy + 1]= &#39;L&#39;, inits[nowx][nowy + 2]= &#39;L&#39;, inits[nowx][nowy + 3]= &#39;L&#39;, inits[nowx + 1][nowy + 3]= &#39;L&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx][nowy + 2]= &#39;.&#39;, inits[nowx][nowy + 3]= &#39;.&#39;, inits[nowx + 1][nowy + 3]= &#39;.&#39;;        }        // L8        if(right &amp;&amp; down &amp;&amp; ddown &amp;&amp; dddown) {            inits[nowx][nowy + 1]= &#39;L&#39;, inits[nowx + 1][nowy]= &#39;L&#39;, inits[nowx + 2][nowy]= &#39;L&#39;, inits[nowx + 3][nowy]= &#39;L&#39;;            if(dfs(nowx, nowy + 1)) return true;            inits[nowx][nowy + 1]= &#39;.&#39;, inits[nowx + 1][nowy]= &#39;.&#39;, inits[nowx + 2][nowy]= &#39;.&#39;, inits[nowx + 3][nowy]= &#39;.&#39;;        }        chose[&#39;L&#39;]= false;    }    inits[nowx][nowy]= &#39;.&#39;;    return false;}int main() {    for(int i= 1; i &lt; 11; i++) {        for(int j= 1; j &lt;= i; j++) {            cin &gt;&gt; inits[i][j];            if(inits[i][j] != &#39;.&#39;) chose[(int)inits[i][j]]= 1;        }    }    if(dfs(1, 1)) {        for(int i= 1; i &lt; 11; i++) {            for(int j= 1; j &lt;= i; j++) putchar(inits[i][j]);            putchar(&#39;\n&#39;);        }    }    else        printf(&quot;No solution\n&quot;);    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USACO17DEC - Haybale Feast</title>
      <link href="/2019-03/07-luogu4085/"/>
      <url>/2019-03/07-luogu4085/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP4085】【USACO17DEC】Haybale Feast<br>题目链接: <a href="https://www.luogu.org/problemnew/show/P4085" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4085</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>好像教练说要考线段树和树状数组, 然后看到了这个题</p><p>这道题可以练习各种数据结构的基础操作…</p><p>我就浪费了大把时间用各种算法来A这道题</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先看这个 $ \sum_{k=i}^{j} F_k \geqslant M $ </p><p>这个一眼看上去就是前缀和了.静态的话直接普通的前缀和$ O(n) $ 预处理, $ O(1) $ 查询就行了,应该是时间复杂度最低的了.</p><p>至于这个 $ max(S_i,S_{i+1},…,S_{j-1},S_j) $</p><p>维护方法就比较多了,可以用线段树,分块,ST表,我没有写树状数组,因为太麻烦了.</p><p>然后我就浪费了好多时间来用不同的算法A这道题…</p><p>这道题还有一个性质, 关于找i和j, 不需要 $ O(n^2) $ 的复杂度来枚举区间, 我给出下面这个式子</p><p>$$ max(s_i, s_{i + 1}, s_{i + 2}) &lt;=  max(s_i, s_{i + 1}, s_{i + 2}, s_{i + 3}) $$</p><p>这个式子根本不用推, 一眼看上去肯定就成立了</p><p>那么根据这个性质, 我们枚举i的值, 只需要找到一个对应的j就行了,这个j一定是满足条件且最小的那个了</p><p>满足条件只需要</p><p>$$ Sumf_j - sumf_i &gt;= m $$</p><p>注: Sumf代表f数组的前缀和</p><p>那么我们可以用 $ O(logn) $ 的复杂度二分查询这个j了</p><p>我们其实不需要自己写二分查找,根据上面的不等式,移一下项,就变成了</p><p>$$ Sumf_j  &gt;= m + sumf_i $$</p><p>然后使用STL自带的lower_bound函数就可以了</p><p>维护区间最大值我建议写ST表, 毕竟静态查询时间复杂度 $ O(1) $, 你也可以写其他的, 我竟然写了三种数据结构.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>这个代码是线段树 + 前缀和, 评测详情 418ms / 6MB </p><p>ST_Table为ST表的代码, 评测详情 328ms / 9.53MB </p><p>Sqrt为分块,实在没找到英文名, 评测详情 1049ms / 7.65MB </p><p>m 和 前缀和要开long long, 其他的可以用int, 懒得话就全部 long long 吧</p><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;algorithm&gt;#include &lt;math.h&gt;using namespace std;typedef long long ll;int n, f[100001], s[100001];ll m;inline int maxi(int a, int b) {    return a &gt; b ? a : b;}inline int mini(int a, int b) {    return a &lt; b ? a : b;}namespace PrefixSum {// prefixsum for fll sumf[100001];void init() {    for(int i= 1; i &lt;= n; i++) sumf[i]= sumf[i - 1] + f[i];    return;}}  // namespace PrefixSumnamespace ST_Table {// ST_Table for sint maxs[100001][18], _log2[100001];void init() {    for(int i= 1; i &lt;= n; i++) maxs[i][0]= s[i], _log2[i]= _log2[i - 1] + (i &gt;= (1 &lt;&lt; (_log2[i - 1] + 1)));    for(int j= 1; j &lt; 18; j++)        for(int i= 1; i + (1 &lt;&lt; j) &lt;= n; i++) maxs[i][j]= maxi(maxs[i][j - 1], maxs[i + (1 &lt;&lt; (j - 1))][j - 1]);    return;}int query(int l, int r) {    int __log2= _log2[r - l + 1];    return maxi(maxs[l][__log2], maxs[r - (1 &lt;&lt; __log2) + 1][__log2]);}}  // namespace ST_Tablenamespace Sqrt {// Sqrt for sint blocks, maxs[100001], block[100001], bl[100001], br[100001];void init() {    blocks= sqrt(n);    int cnt= n / blocks + (n % blocks &amp; 1);    for(int i= 1; i &lt;= n; i++) block[i]= (i - 1) / blocks + 1;    for(int i= 1; i &lt;= cnt; i++) bl[i]= (i - 1) * blocks + 1, br[i]= i * blocks;    br[cnt]= mini(n, br[cnt]);    for(int i= 1; i &lt;= cnt; i++)        for(int j= bl[i]; j &lt;= br[i]; j++) maxs[i]= maxi(maxs[i], s[j]);    return;}int query(int l, int r) {    int x= block[l], y= block[r], ans= 0;    for(int i= x + 1; i &lt; y; i++) ans= maxi(ans, maxs[i]);    for(int i= l; i &lt;= br[x]; i++) ans= maxi(ans, s[i]);    for(int i= bl[y]; i &lt;= r; i++) ans= maxi(ans, s[i]);    return ans;}}  // namespace Sqrtnamespace SegmentTree {// SegmentTree for sint maxs[100001 &lt;&lt; 2];void build(int nown, int l, int r) {    if(l == r) {        maxs[nown]= s[l];        return;    }    int mid= (l + r) &gt;&gt; 1;    build(nown &lt;&lt; 1, l, mid);    build(nown &lt;&lt; 1 | 1, mid + 1, r);    maxs[nown]= maxi(maxs[nown &lt;&lt; 1], maxs[nown &lt;&lt; 1 | 1]);    return;}int query(int nown, int l, int r, int ml, int mr) {    if(ml &lt;= l &amp;&amp; r &lt;= mr) return maxs[nown];    int ans= 0, mid= (l + r) &gt;&gt; 1;    if(mid &gt;= ml) ans= maxi(ans, query(nown &lt;&lt; 1, l, mid, ml, mr));    if(mid &lt; mr) ans= maxi(ans, query(nown &lt;&lt; 1 | 1, mid + 1, r, ml, mr));    return ans;}inline void init() {    build(1, 1, n);    return;}inline int query(int l, int r) {    return query(1, 1, n, l, r);}}  // namespace SegmentTreeint ans= 0x7f7f7f7f;int main() {    scanf(&quot;%d%lld&quot;, &amp;n, &amp;m);    for(int i= 1; i &lt;= n; i++) scanf(&quot;%d%d&quot;, f + i, s + i);    PrefixSum::init(), SegmentTree::init();    for(int i= 1; i &lt;= n; i++) {        ll r= lower_bound(PrefixSum::sumf + i, PrefixSum::sumf + n + 1, m + PrefixSum::sumf[i - 1]) - PrefixSum::sumf;        if(r != n + 1) ans= mini(ans, SegmentTree::query(i, r));    }    printf(&quot;%d\n&quot;, ans);    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 分块 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> ST表 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2009 - Hankson 的趣味题</title>
      <link href="/2019-03/03-luogu1072/"/>
      <url>/2019-03/03-luogu1072/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP1072】【NOIP2009】Hankson 的趣味题<br>题目链接: <a href="https://www.luogu.org/problemnew/show/P1072" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1072</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>半个月没更新博客了, 一直忙于做题练习和学文化课, 不然快被劝退了</p><p>最近学习一本通提高篇, 复习下之前学的GCD等数论知识</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先从题目描述说起, 给出了a0, a1, b0, b1四个数</p><p>求 $ gcd(x, a0) = a1 $ 且 $ lcm(x, b0) = b1 $ 中 x 的方案数 </p><p>那么首先我们都知道两个很基础的东西</p><p>$$ gcd(a, b) = gcd(b, a\mod b) $$</p><p>$$ lcm(a, b) = a × b / gcd(a, b) $$</p><p>然后就可以来做这道题了</p><p>因为</p><p>$$ lcm(x, b0) = x × b0 / gcd(x, b0) = b1 $$</p><p>所以</p><p>$$ x = \frac{b1}{b0} × gcd(x, b0) $$</p><p>我们设一个数 $ y = gcd(x, b0) $ 那么一定 $ 1 ≤ y ≤ \sqrt{b0} $</p><p>所以我们只要枚举 y 的值, 然后代入算出 $ x = b1 / b0 × y $</p><p>然后代入题目中的两个式子进行判断</p><p>还有一个简化</p><p>$$ x × b0 / gcd(x, b0) == b1 $$</p><p>可简化为</p><p>$$ b1 / b0 × y × b0 / gcd(x, b0) == b1 $$</p><p>即</p><p>$$ gcd(x, b0) == y $$</p><p>要判断 $ x = b1 / y $ 的情况, 也有可能是一个解</p><p>也不要忘了特判 $ y = \sqrt{b0} $ 的情况</p><p>然后就完美解决了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>没有开各种优化, 能过</p><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;math.h&gt;using namespace std;int n, a0, a1, b0, b1, ans, tmpx, tmpq;int gcd(int a, int b) {    if(b == 0) return a;    return gcd(b, a % b);}int main() {    cin &gt;&gt; n;    while(n--) {        cin &gt;&gt; a0 &gt;&gt; a1 &gt;&gt; b0 &gt;&gt; b1;        ans= 0;        for(int i= 1; i &lt; sqrt(b0); i++) {            if(b0 % i == 0) {                tmpx= b1 / b0 * i;                if(gcd(tmpx, a0) == a1 &amp;&amp; gcd(tmpx, b0) == i) ++ans;                tmpx= b1 / i;                if(gcd(tmpx, a0) == a1 &amp;&amp; gcd(tmpx, b0) == b0 / i) ++ans;            }        }        tmpq= sqrt(b0);        if(tmpq * tmpq == b0) {            tmpx= b1 / b0 * tmpq;            if(gcd(tmpx, a0) == a1 &amp;&amp; gcd(tmpx, b0) == tmpq) ++ans;        }        cout &lt;&lt; ans &lt;&lt; endl;    }    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> GCD </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuoguP2633 - Count on a tree</title>
      <link href="/2019-02/18-luogu2633/"/>
      <url>/2019-02/18-luogu2633/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP2633】【SP10628】【BZOJ2588】Count on a tree 树上第 K 大<br>题目链接1: <a href="https://www.luogu.org/problemnew/show/P2633" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2633</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2588" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=2588</a><br>题目链接3: <a href="https://www.luogu.org/problemnew/show/SP10628" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/SP10628</a><br>题目链接4: <a href="https://www.spoj.com/problems/COT/" target="_blank" rel="noopener">https://www.spoj.com/problems/COT/</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本来是打算做 TJOI2018 - 异或 那道题的, 然后又看到这道题, 好像做这道题有助于那道题…然后就开始干</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题像是组合模板题…用倍增LCA + 主席树, 直接套模板就行了.</p><p>有一些需要注意的东西, 边的数组最好开大一点, 不然容易RE, 哪个算法写炸了也容易RE, 所以需要小心谨慎的写代码, 然而Ciyang的倍增写挂了…</p><p>主席树我写的指针版, 好像很罕见, 强烈安利, 虽然和数组版没有多大的区别.</p><p>对于这道题, 先预处理出LCA, 然后建个树（数组版不需要）</p><p>查询时把$ x $和$ y $之间的链提出来, 主席树上存的是前缀和, 那么就需要先求出$ lca(x,y) $</p><p>再根据数学上的某些原理（容斥?）求出</p><p>$$ Sum(x,y) = sum(x) + sum(y) - sum(lca(x,y)) - sum(lca(x,y)) - sum(f[lca(x,y)])$$</p><p>$ f[x] $ 代表 x 的父节点, 然后直接套主席树板子就行了</p><p>推荐两个STL必备黑科技, unique 和 lower_bound, 前者那个是给有序数组去重, 后者是有序数组二分查找. 一般都会了, 不会的百度把… </p><p>如果出现RE, 找不到原因, 可以去交<a href="https://www.luogu.org/problemnew/show/SP10628" target="_blank" rel="noopener">这道题</a>, 去掉强制在线, 如果WA就是算法问题了.再出现RE可能就是像我一样手残打错了一个数字之类的东西…</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>评测详情(未开O2): Accepted 100 用时: 1765ms / 内存: 76648KB</p><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;algorithm&gt;using namespace std;inline int read() {    int e= 0, f= 1;    char ch= getchar();    while(ch &lt; &#39;0&#39; || ch &gt; &#39;9&#39;) {        if(ch == &#39;-&#39;) f= -1;        ch= getchar();    }    while(ch &gt;= &#39;0&#39; &amp;&amp; ch &lt;= &#39;9&#39;) e= e * 10 + ch - &#39;0&#39;, ch= getchar();    return e * f;}// READint n, m, d, vi[100005], lv[100005], edptr= 1, head[100005], tmpx, tmpy, tmpz;struct edge {    int to, nexty;} eds[400001];// 其实可以 100005 * 2void add(int a, int b) {    eds[edptr].to= b, eds[edptr].nexty= head[a];    head[a]= edptr++;    return;}// edgestruct NODE {    NODE *l, *r;    int v, sum;} * root[800005];// 其实可以 100005NODE *build(int l, int r) {    NODE *nptr= new NODE();    if(l != r) {        int mid= (l + r) &gt;&gt; 1;        nptr-&gt;l= build(l, mid), nptr-&gt;r= build(mid + 1, r);    }    return nptr;}NODE *update(int l, int r, int c, NODE *pre) {    NODE *nptr= new NODE();    nptr-&gt;l= pre-&gt;l, nptr-&gt;r= pre-&gt;r, nptr-&gt;sum= pre-&gt;sum + 1;    if(l != r) {        int mid= (l + r) &gt;&gt; 1;        if(c &lt;= mid)            nptr-&gt;l= update(l, mid, c, pre-&gt;l);        else            nptr-&gt;r= update(mid + 1, r, c, pre-&gt;r);    }    return nptr;}int query(NODE *ml, NODE *mr, NODE *xl, NODE *xr, int l, int r, int k) {    if(l == r) return l;    int qsum= mr-&gt;l-&gt;sum + ml-&gt;l-&gt;sum - xl-&gt;l-&gt;sum - xr-&gt;l-&gt;sum;    int mid= (l + r) &gt;&gt; 1;    if(qsum &gt;= k) return query(ml-&gt;l, mr-&gt;l, xl-&gt;l, xr-&gt;l, l, mid, k);    return query(ml-&gt;r, mr-&gt;r, xl-&gt;r, xr-&gt;r, mid + 1, r, k - qsum);}// treeint deep[100005], f[100005][21];void dfs(int nown, int fa) {    deep[nown]= deep[fa] + 1;    f[nown][0]= fa;    for(int i= 0; i &lt; 20; i++) f[nown][i + 1]= f[f[nown][i]][i];    // 从0开始...Ciyang写挂了,写成从1开始,然后交了好多遍也没改对    for(int i= head[nown], to; i; i= eds[i].nexty) {        to= eds[i].to;        if(to == fa) continue;        dfs(to, nown);    }    return;}void dfs2(int nown) {    root[nown]= update(1, n, lv[nown], root[f[nown][0]]);    for(int i= head[nown], to; i; i= eds[i].nexty) {        to= eds[i].to;        if(to == f[nown][0]) continue;        dfs2(to);    }    return;}int lca(int x, int y) {    if(deep[x] &lt; deep[y]) swap(x, y);    for(int i= 19; i &gt; -1; i--) {        if(deep[f[x][i]] &gt;= deep[y]) x= f[x][i];        if(x == y) return x;    }    for(int i= 19; i &gt; -1; i--)        if(f[x][i] != f[y][i]) x= f[x][i], y= f[y][i];    return f[x][0];}// LCAint lastans= 0, tmpc;int main() {    n= read(), m= read();    for(int i= 1; i &lt;= n; i++) vi[i]= read(), lv[i]= vi[i];    for(int i= 1; i &lt; n; i++) {        tmpx= read(), tmpy= read();        add(tmpx, tmpy), add(tmpy, tmpx);    }    root[0]= build(1, n);    sort(vi + 1, vi + n + 1);    d= unique(vi + 1, vi + n + 1) - vi - 1;    for(int i= 1; i &lt;= n; i++) lv[i]= lower_bound(vi + 1, vi + d + 1, lv[i]) - vi;    dfs(1, 0);    dfs2(1);    while(m--) {        tmpx= read(), tmpy= read(), tmpz= read();        tmpx^= lastans;        tmpc= lca(tmpx, tmpy);        lastans= vi[query(root[tmpx], root[tmpy], root[tmpc], root[f[tmpc][0]], 1, n, tmpz)];        printf(&quot;%d\n&quot;, lastans);    }    return 0;}// main</code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> LCA </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuoguP2580 - 于是他错误的点名开始了</title>
      <link href="/2019-02/16-luogu2580/"/>
      <url>/2019-02/16-luogu2580/</url>
      
        <content type="html"><![CDATA[<p>【LuoguP2580】于是他错误的点名开始了<br>题目链接: <a href="https://www.luogu.org/problemnew/show/P2580" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2580</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇题解原来是我放到Luogu上的，打算搬过来，原地址: <a href="https://ciyang.blog.luogu.org/solution-p2580" target="_blank" rel="noopener">https://ciyang.blog.luogu.org/solution-p2580</a></p><p>当时是自己闲得无聊自创的算法，跑了最优解第3，Trie树中最快了</p><p>不过后来Luogu上的dalao告诉我这个是边压Trie树，因此<del>人生失去意义</del></p><p>此题解非正常字典树,推荐先学习普通的字典树并了解指针的使用</p><p>代码还是之前的代码,名为Lumpy_Tnode.</p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>树上的边存储字符串,代表节点的单独前缀.</p><p>写题解的上午有了灵感,然后根据思路模拟了一下,可行性挺高的.代码上比普通的复杂一些,我使用了指针.    </p><p><img src="/images/P2580_1.png" alt="Example"></p><p>按任意顺序插入abcd,abcde,bcde,bcdf四个字符串的Trie树长这样</p><p>红色节点表示已插入字符串的结尾节点</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>通过与比较普通指针版和非指针版Trie来证明一下可行性.  </p><p>已知一个节点要保存26条边的指针</p><p>指针版Trie可使用动态内存,缺点是每个节点只保存一个字符,会有大量边的空指针来占用额外的内存,且new节点多了,内存分配常数较大.</p><p>为了减少常数,可以自己写内存池分配,但无论是什么数据,只要稍带随机性形成链,就会有很多只有一个子节点的节点,这无疑有25个空指针浪费内存.</p><p>非指针版常数小,但空间分配也是很大的问题,多了可能MLE,少了RE.然而仍有很多一条链的树,空间最大浪费N*25啊…<del>先不说影响美观</del>而且时间复杂度依然很高,毕竟查询也是O(N).</p><p>边压Trie的复杂度是会改变的,就是对一条链情况的优化,理论最大时间复杂度是O(N)带有一些常数,不考虑常数情况下,永远小于等于普通Trie.   </p><p>边压Trie巧妙利用字符串指针,赋值、继承等操作只需要指针或长度变化就好了,因此插入最小复杂度是O(1),空间上也少了很多空指针. </p><p>太多证明不如一句代码,我放上代码继续分析. </p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>节点的结构体,原来的char变成了length和字符串指针:  </p><pre><code class="cpp">#define clear(a) memset(a, 0, sizeof(a))#define copy(a, b) memcpy(a, b, sizeof(a))    struct Lumpy_Tnode {        const char *pStr;        //指向当前存储字符串首元素        int length, isEnd;        //length存储字符串的长度 isEnd代表是否是结尾节点        Lumpy_Tnode *children[26];        //26个子节点        inline Lumpy_Tnode() {            pStr= 0, length= isEnd= 0, clear(children);        }        inline Lumpy_Tnode(const char *str, int len, int end) {            pStr= str, length= len, isEnd= end, clear(children);        }        //构造函数    } mNode;</code></pre><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>使用递归和循环,判断比较多,先看代码(看起来常数很大)      </p><pre><code class="cpp">    inline void insert(const char *str, int length, Lumpy_Tnode *bNode) {    //str是指针,指向当前插入字符串的第一个元素        if(!length) {        //字符串长度为0代表结尾        //其实是为了优化代码美观,当作递归边界            bNode-&gt;isEnd= 1;            return;        }        int ch= str[0] - &#39;a&#39;;        if(bNode-&gt;children[ch]) {        //子节点已存在            bNode= bNode-&gt;children[ch];            register int sptr= 0;            while(sptr &lt; length &amp;&amp; sptr &lt; bNode-&gt;length &amp;&amp; bNode-&gt;pStr[sptr] == str[sptr]) ++sptr;            //循环来找当前字符串和节点存储的字符串最长前缀            if(sptr != bNode-&gt;length) {            //节点存储的字符串不是插入字符串的子串                Lumpy_Tnode *nNode= new Lumpy_Tnode(bNode-&gt;pStr + sptr, bNode-&gt;length - sptr, bNode-&gt;isEnd);                //拆树,运用字符串指针连续地址的特性来操作                copy(nNode-&gt;children, bNode-&gt;children), clear(bNode-&gt;children);                //继承原有子节点的各种信息                bNode-&gt;isEnd= 0, bNode-&gt;children[bNode-&gt;pStr[sptr] - &#39;a&#39;]= nNode;                //清空原有节点,重新初始化            }            bNode-&gt;length= sptr;            //更新当前节点存储的字符串长度,从而更改当前存储的字符串            insert(str + sptr, length - sptr, bNode);        }        else            bNode-&gt;children[ch]= new Lumpy_Tnode(str, length, 1);            //不存在当前首字母的子节点,直接new并且赋值            //因为是指针操作,所以不需要O(n)复制字符串,理论上复杂度O(3)?        return;    }    //调用方式:insert(插入字符串, 字符串长度, Trie根节点);</code></pre><p>如果代码看懂了,第一反应可能认为指针操作有一些漏洞.</p><p>的确插入的字符串在插入后就不能进行改变了,所以就只要开一个char[N][K]的数组来保存输入的字符串,K为最长字符串的长度. </p><p>相比较空间复杂度总体仍然较小,其实是把原来每个节点存的char放到了一起,每个节点多了一个指针.</p><p>这其中其实有个很巧妙的事,树上的一条链可能指向的地址是连续的.仔细想了想,其实也有空间浪费,不管是节点上还是树上的最长公共前缀都只指向一个字符串,其他字符串中相同的字符占用的空间就浪费掉了,这句话不懂没事,因为这个浪费造成的影响很小. </p><p>如果代码都没看懂,还有图解:</p><ol><li><p><img src="/images/P2580_2.png" alt="向空树插入abc,再插入ab"></p></li><li><p><img src="/images/P2580_3.png" alt="再向此树插入ac:"></p></li></ol><p>解释一下图2:</p><p>比较ab和ac,最长公共前缀为a</p><p>新建一个字符串指针指向ab中b的节点,长度为1,继承ab的颜色和ab的子节点.</p><p>清空ab的子节点,颜色改为黑(黑表示不为结尾节点),ab的首字母b子节点指向b.</p><p>在我实现时,先更改长度使ab变为a,再向a中插入c.</p><p>因为没有首字母为c的子节点,直接new一个新的.</p><h4 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h4><pre><code class="cpp">    inline int find(const char *str, int length, Lumpy_Tnode *bNode) {        if(!length) {        //递归到查找的字符串长度为0        //判断当前节点是否为结尾,是否是第一次查询            if(bNode-&gt;isEnd == 1) return bNode-&gt;isEnd++;            return bNode-&gt;isEnd;        }        int ch= str[0] - &#39;a&#39;;        if(bNode-&gt;children[ch]) {            bNode= bNode-&gt;children[ch];            if(length &lt; bNode-&gt;length) return 0;            //自带剪枝,若当前查找字符串长度小于当前公共前缀,那么字典树中不存在当前查找的字符串            register int sptr= 0;            while(sptr &lt; bNode-&gt;length &amp;&amp; bNode-&gt;pStr[sptr] == str[sptr]) ++sptr;            if(sptr != bNode-&gt;length) return 0;            //最长公共前缀必须是当前查找的字符串的子串            return find(str + sptr, length - sptr, bNode);        }        return 0;        //没有子节点,字典树中不存在当前查找的字符串    }    //调用方式:find(查询字符串, 字符串长度, Trie根节点);</code></pre><p>比插入的代码简单多了,并且自带剪枝,所以比较快.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>（开启O2） 用时: 127ms / 内存: 4248KB<br>（关闭O2） 用时: 144ms / 内存: 4128KB</p><pre><code class="cpp">#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;using namespace std;#define clear(a) memset(a, 0, sizeof(a))#define copy(a, b) memcpy(a, b, sizeof(a))struct Lumpy_Trie {    struct Lumpy_Tnode {        const char *pStr;        int length, isEnd;        Lumpy_Tnode *children[26];        inline Lumpy_Tnode() {            pStr= 0, length= isEnd= 0, clear(children);        }        inline Lumpy_Tnode(const char *str, int len, int end) {            pStr= str, length= len, isEnd= end, clear(children);        }    } mNode;    inline void insert(const char *str, int length, Lumpy_Tnode *bNode) {        if(!length) {            bNode-&gt;isEnd= 1;            return;        }        int ch= str[0] - &#39;a&#39;;        if(bNode-&gt;children[ch]) {            bNode= bNode-&gt;children[ch];            register int sptr= 0;            while(sptr &lt; length &amp;&amp; sptr &lt; bNode-&gt;length &amp;&amp; bNode-&gt;pStr[sptr] == str[sptr]) ++sptr;            if(sptr != bNode-&gt;length) {                Lumpy_Tnode *nNode= new Lumpy_Tnode(bNode-&gt;pStr + sptr, bNode-&gt;length - sptr, bNode-&gt;isEnd);                copy(nNode-&gt;children, bNode-&gt;children), clear(bNode-&gt;children);                bNode-&gt;isEnd= 0, bNode-&gt;children[bNode-&gt;pStr[sptr] - &#39;a&#39;]= nNode;            }            bNode-&gt;length= sptr;            insert(str + sptr, length - sptr, bNode);        }        else            bNode-&gt;children[ch]= new Lumpy_Tnode(str, length, 1);        return;    }    inline int find(const char *str, int length, Lumpy_Tnode *bNode) {        if(length == 0) {            if(bNode-&gt;isEnd == 1) return bNode-&gt;isEnd++;            return bNode-&gt;isEnd;        }        int ch= str[0] - &#39;a&#39;;        if(bNode-&gt;children[ch]) {            bNode= bNode-&gt;children[ch];            if(length &lt; bNode-&gt;length) return 0;            register int sptr= 0;            while(sptr &lt; bNode-&gt;length &amp;&amp; bNode-&gt;pStr[sptr] == str[sptr]) ++sptr;            if(sptr != bNode-&gt;length) return 0;            return find(str + sptr, length - sptr, bNode);        }        return 0;    }} t;char allstr[10001][51], tmp[51];int n;int main() {    scanf(&quot;%d&quot;, &amp;n);    for(register int i= 0; i &lt; n; i++) {        scanf(&quot;%s&quot;, allstr[i]);        t.insert(allstr[i], strlen(allstr[i]), &amp;t.mNode);    }    scanf(&quot;%d&quot;, &amp;n);    for(register int i= 0, j; i &lt; n; i++) {        scanf(&quot;%s&quot;, tmp);        j= t.find(tmp, strlen(tmp), &amp;t.mNode);        switch(j) {            case 0: printf(&quot;WRONG\n&quot;); break;            case 1: printf(&quot;OK\n&quot;); break;            case 2: printf(&quot;REPEAT\n&quot;); break;        }    }    return 0;}</code></pre><p>最需要注意的是输入的字符串insert后不能再更改那一块内存了不能更改了…</p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>我写的常数可能挺大,希望dalao们试试各种卡常优化…  </p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 字典树 </tag>
            
            <tag> 边压Trie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲聊 - 毒瘤码风推荐</title>
      <link href="/2019-02/15-du-liu-ma-feng-tui-jian/"/>
      <url>/2019-02/15-du-liu-ma-feng-tui-jian/</url>
      
        <content type="html"><![CDATA[<p>用了这个码风，再也不怕代码出BUG了(</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>相信码风对于我们来说太熟悉了，以至于平常都忘记了它的存在</p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>码风全称代码风格…</p><p>我就不啰嗦了，估计也都知道是啥，想看详细介绍可以右转<a href="https://baike.baidu.com/item/代码风格" target="_blank" rel="noopener">代码风格-百度百科</a>或<a href="https://en.wikipedia.org/wiki/Programming_style" target="_blank" rel="noopener">Programming style-Wikipedia</a></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>那么就直接推荐自己的码风了</p><p>(从来不多打空格的可以跳过这一部分)</p><pre><code class="cpp">// QuickReadinline int read() {    int e= 0, f= 1;    char ch= getchar();    while(ch &lt; &#39;0&#39; || ch &gt; &#39;9&#39;) {        if(ch == &#39;-&#39;) f= -1;        ch= getchar();    }    while(ch &gt;= &#39;0&#39; &amp;&amp; ch &lt;= &#39;9&#39;) e= e * 10 + ch - &#39;0&#39;, ch= getchar();    return e * f;}</code></pre><p>这个空格写法确实毒瘤，估计像我这样的全世界应该有1%…</p><p>赋值符前不加空格，赋值符后加空格，运算符和逻辑符前后都加空格，手打不是很方便，习惯就好了.</p><p>大括号前不换行加空格，for循环中每个语句只在前加空格</p><hr><p>(关于换行等事)</p><pre><code class="cpp">// 负载平衡问题inline int absi(int i) {    return i &gt; 0 ? i : -i;}int main() {    cin &gt;&gt; n;    for(int i= 1; i &lt;= n; i++) cin &gt;&gt; a[i], sum+= a[i];    sum/= n;    for(int i= 1; i &lt;= n; i++) a[i]-= sum, s[i]= s[i - 1] + a[i];    sort(s + 1, s + n + 1), k= s[n / 2 + 1];    for(int i= 1; i &lt;= n; i++) ans+= absi(s[i] - k);    cout &lt;&lt; ans &lt;&lt; endl;    return 0;}</code></pre><p>只遵守一个原则: 一行只存在一个分号, 能一行表示就不要多行表示</p><p>但也有例外，较长表达式不会压到一行，比较长的函数定义也不会压到一行</p><pre><code class="cpp">// 匈牙利算法int dfs(int nown, int wptr) {    for(int i= head[nown], to; i; i= eds[i].nexty) {        to= eds[i].to;        if(walkpast[to] != wptr) {            walkpast[to]= wptr;            if(!pp[to] || dfs(pp[to], wptr)) return pp[to]= nown, 1;        }    }    return 0;}</code></pre><p>大概就是这种码风，能省略就省略，但一行一条语句。</p><hr><p>(判断语句和数组定义)</p><pre><code class="cpp">// 主席树int main() {    n= read(), m= read();    while(~scanf(&quot;%s&quot;, o)) {        tmpx= read(), tmpy= read(), tmpxx= read(), tmpyy= read();        if(o[0] == &#39;L&#39;)            tmpc= read(), update(tmpx, tmpy, tmpc), update(tmpx, tmpyy + 1, -tmpc), update(tmpxx + 1, tmpy, -tmpc), update(tmpxx + 1, tmpyy + 1, tmpc);        else            printf(&quot;%d\n&quot;, query(tmpxx, tmpyy) - query(tmpx - 1, tmpyy) - query(tmpxx, tmpy - 1) + query(tmpx - 1, tmpy - 1));    }    return 0;}</code></pre><p>单行if不会换行，如果存在 else / else if 则换行</p><pre><code class="cpp">int db[]= {    0,           1,          1799998,   844059434, 446759866, 865662267, 29583524,  127902423, 614370802, 866384115, 771602680, 248905317, 78054944,  297165834, 271692212, 491940959, 329478404, 984412484, 35704862,  729995974, 257611164, 47520158,    ......    869867506, 732424548, 678809493, 143987677, 789130682, 973691054, 893883312, 311519914, 650459219, 821045358, 310559620, 775625624, 108543282, 54180205,  287135615, 875178490, 760920242, 512638949, 254323537, 977186041, 474130473, 455558106,    435916613, 787985317, 366892998, 42185197,  192850838, 421591125, 241779127, 969779315, 924599866, 723460313, 430999144};</code></pre><p>这个数组定义比较忙=迷，有的时候不会换行有的时候会</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>如果上面这些格式手动的话…估计考试一道题都做不完…</p><p>我目前使用VS Code，他的C++扩展自带格式化工具.clang-format</p><p>在 Visual Studio 和 Vim 中也可以用，并且配置文件是通用的</p><p>VS Code使用.clang-format: 安装C++扩展 -&gt; 选择工作文件夹 -&gt; 在文件夹下创建文件命名为.clang-format -&gt; 打开编辑</p><p>Visual Studio的使用.clang-format: 新建项目 -&gt; 创建.clang-format文件 -&gt; 编辑</p><h4 id="clang-format文件用法"><a href="#clang-format文件用法" class="headerlink" title=".clang-format文件用法"></a>.clang-format文件用法</h4><p><a href="https://clang.llvm.org/docs/ClangFormatStyleOptions.html" target="_blank" rel="noopener">官方文档</a>或者自行百度</p><p>常用设置:</p><p>SpaceBeforeAssignmentOperator 为赋值符两边的空格</p><p>BraceWrapping 为各位置括号前后换行</p><p>ColumnLimit 为每行最大字符限制(和数组初始化换行有关)</p><h4 id="放一下我的格式化文件配置"><a href="#放一下我的格式化文件配置" class="headerlink" title="放一下我的格式化文件配置:"></a>放一下我的格式化文件配置:</h4><pre><code class="javascript">---Language:    CppBasedOnStyle:    LLVMAccessModifierOffset:    0AlignAfterOpenBracket:    AlignAlignConsecutiveAssignments:    falseAlignConsecutiveDeclarations:    falseAlignEscapedNewlinesLeft:    trueAlignOperands:    trueAlignTrailingComments:    trueAllowAllParametersOfDeclarationOnNextLine:    trueAllowShortBlocksOnASingleLine:    falseAllowShortCaseLabelsOnASingleLine:    trueAllowShortFunctionsOnASingleLine:    EmptyAllowShortIfStatementsOnASingleLine:    trueAllowShortLoopsOnASingleLine:    trueAlwaysBreakAfterDefinitionReturnType:    NoneAlwaysBreakAfterReturnType:    NoneAlwaysBreakBeforeMultilineStrings:    trueAlwaysBreakTemplateDeclarations:    trueBinPackArguments:    falseBinPackParameters:    falseBraceWrapping:      AfterClass:    false  AfterControlStatement:    false  AfterEnum:    false  AfterFunction:    false  AfterNamespace:    false  AfterObjCDeclaration:    false  AfterStruct:    false  AfterUnion:    false  BeforeCatch:    true  BeforeElse:    true  IndentBraces:    falseBreakBeforeBinaryOperators:    NonAssignmentBreakBeforeBraces:    CustomBreakBeforeTernaryOperators:    falseBreakConstructorInitializersBeforeComma:    falseColumnLimit:    250CommentPragmas:    &#39;^ IWYU pragma:&#39;ConstructorInitializerAllOnOneLineOrOnePerLine:    trueConstructorInitializerIndentWidth:    4ContinuationIndentWidth:    4Cpp11BracedListStyle:    trueDerivePointerAlignment:    falseDisableFormat:    falseExperimentalAutoDetectBinPacking:    falseForEachMacros:    [ foreach, Q_FOREACH, BOOST_FOREACH ]IncludeCategories:   - Regex:    &#39;^&quot;(llvm|llvm-c|clang|clang-c)/&#39;    Priority:    2  - Regex:    &#39;^(&lt;|&quot;(gtest|isl|json)/)&#39;    Priority:    3  - Regex:    &#39;.*&#39;    Priority:    1IndentCaseLabels:    trueIndentWidth:    4IndentWrappedFunctionNames:    falseKeepEmptyLinesAtTheStartOfBlocks:    falseMacroBlockBegin:    &#39;&#39;MacroBlockEnd:    &#39;&#39;MaxEmptyLinesToKeep:    1NamespaceIndentation:    InnerObjCBlockIndentWidth:    4ObjCSpaceAfterProperty:    falseObjCSpaceBeforeProtocolList:    truePenaltyBreakBeforeFirstCallParameter:    19PenaltyBreakComment:    300PenaltyBreakFirstLessLess:    120PenaltyBreakString:    1000PenaltyExcessCharacter:    1000000PenaltyReturnTypeOnItsOwnLine:    60PointerAlignment:    RightReflowComments:    trueSortIncludes:    falseSpaceAfterCStyleCast:    falseSpaceAfterTemplateKeyword: trueSpaceBeforeAssignmentOperators:    falseSpaceBeforeParens:    NeverSpaceInEmptyParentheses:    falseSpacesBeforeTrailingComments:    2SpacesInAngles:    trueSpacesInContainerLiterals:    falseSpacesInCStyleCastParentheses:    falseSpacesInParentheses:    falseSpacesInSquareBrackets:    falseStandard:    Cpp11TabWidth:    4UseTab:    Always...</code></pre><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>用了这个码风，再也不怕代码出BUG了(</p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 闲聊 </tag>
            
            <tag> 码风 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始</title>
      <link href="/2019-02/12-kai-shi/"/>
      <url>/2019-02/12-kai-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="关于搭建"><a href="#关于搭建" class="headerlink" title="关于搭建"></a>关于搭建</h3><p>从下午搭建到现在,基本上算是搭建完了,文章从零开始,以后一点一点填吧.</p><p>其实博客在半月前就已经开始搭建了,只不过选择了一个没有什么配置手册的主题,然后扩展还比较少…最后不得不弃坑。</p><p>之前其实是从gitee上搭建的,现在听了周围dalao的建议,随波逐流来到了github</p><p>关于现在搭建的方法,使用Github + Hexo + Matery.</p><a id="more"></a><br><p>测试一下HelloWorld</p><pre><code class="cpp">#include &lt;iostream&gt;int main() {  std::cout &lt;&lt; &quot;Hello, world!&quot; &lt;&lt; std:endl;  return 0;}</code></pre><br><p>测试一下LaTeX</p><p>$$ \LARGE{S_k=\sum_{i=1}^{k}a_i} $$</p><br><p>测试一下内嵌JS</p><p style="text-align: center"><a href="/" style="font-size:25px; text-align:center;"> Ciyang's Blog </a></p><br><h3 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h3><p>作者:Ciyang </p><p>现于 SD-SLYZ 上高中,是一名现役OIer,爱搞一些黑科技,写点高（la）端（ji）题解,出点毒（jian）瘤（dan）题,其实还仍是个中二少年……</p><p>之前自己发明过MidHeap（BST）, 块状字典树（边压Trie）, 后来才知道已经被发明过了,但还是一直热衷于自创毒瘤数据结构来一举成名,其实毫无卵用.</p><p>最近打算颓U3D,做一款SLG网络国战手游,想的很美好,然后并没有时间和精力,还是先熟练U3D的基本操作吧.</p><p>顺便说一句,头像及其沙雕,所以凑活着看,以后再改.</p><p>联系方式:</p><pre><code>  QQ: 896681584  Github: Xciyang  网站通用昵称: Ciyang</code></pre><h3 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h3><p>这个博客不一定只发题解,多数应该还是一些黑科技,学习总结和经历之类的东西吧.</p><p>想设成粉色背景,然后估计被怼的几率比较大,就换了个颜色.</p><p>博客还会不断优化</p><p>相册会陆续换成自己的</p><p>借此吐槽一下这个主题</p><p>关于里面的技能是什么???为什么需要自己填写,自己写百分比…</p><p>其他技能又是什么???为什么要把文章标签当作其他技能…我的技能是闲聊…好像有道理.</p><p>现在已经关闭了那个功能,以后再自己实现吧.</p><h3 id="利益相关"><a href="#利益相关" class="headerlink" title="利益相关"></a>利益相关</h3><p>欢迎收藏!</p><p>欢迎加友链!</p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
