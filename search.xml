<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>技巧 - 在OJ上出交互题</title>
      <link href="/2019-07/12-zai-oj-shang-chu-jiao-hu-ti/"/>
      <url>/2019-07/12-zai-oj-shang-chu-jiao-hu-ti/</url>
      
        <content type="html"><![CDATA[<p>本博客所指的OJ仅指SYZOJ，即搭建LOJ使用的在线评测系统。</p><p>SYZOJ源码链接(Github仓库): <a href="https://github.com/syzoj/syzoj" target="_blank" rel="noopener">https://github.com/syzoj/syzoj</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在校内使用SYZOJ搭建内网OJ已经有些时日了。其实之前就看到有交互题这一说，但一直没有去关注和了解。</p><p>今天正颓废时，突然想起了交互题，然后开始便研究。</p><p>本以为是testlib，现在才发现SYZOJ有自己特有的交互方式。</p><h3 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h3><p>SYZOJ帮助中的原话如下：</p><blockquote><p>交互器和选手程序同时运行，交互器的标准输入和标准输出连接了选手程序的标准输出和标准输入 —— 交互通过输入输出进行。<br>交互器运行时，其目录下会有 input 文件，表示该测试点的输入文件。交互器运行结束后，需要将选手得分写入 score.txt 文件中，并将提供给用户的额外信息输出到标准错误输出（stderr）中。<br>如果您希望实现 NOI 试题风格的交互（选手通过函数调用与交互器交互），请编写一些头文件作为「附加源文件」并封装标准输入输出的交互。</p></blockquote><p>要学习出交互题，前提是要会出一道传统题。对于出传统题就需要知道的知识就不予讲解。</p><h4 id="如何交互"><a href="#如何交互" class="headerlink" title="如何交互"></a>如何交互</h4><p>根据帮助，<code>交互通过输入输出进行</code>，那么意为选手程序使用std::cout输出给交互器程序，而交互器程序使用std::cin读取选手的输出，反过来也是如此。</p><p>LOJ中交互题系统测试题<a href="https://loj.ac/problem/6" target="_blank" rel="noopener">Guess Number</a>可以自行了解一下。</p><h4 id="输入文件"><a href="#输入文件" class="headerlink" title="输入文件"></a>输入文件</h4><p>根据帮助，<code>目录下会有 input 文件，表示该测试点的输入文件</code>，那么就需要用文件流操作，我选择使用std::ifstream来读取input文件。交互器从输入文件读取一个整数的实例：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>ifstream <span class="token function">datin</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="选手得分"><a href="#选手得分" class="headerlink" title="选手得分"></a>选手得分</h4><p><code>将选手得分写入 score.txt 文件中</code> 也是同理，使用std::ofstream打开score.txt文件，写入一个数即可。</p><p>可以根据查询次数等信息来确定得分，支持部分正确（0 &lt;= 得分 &lt;= 100）。</p><h4 id="额外信息"><a href="#额外信息" class="headerlink" title="额外信息"></a>额外信息</h4><p>继续看帮助，<code>将提供给用户的额外信息输出到标准错误输出（stderr）中</code>。额外信息就是测试点的反馈信息，我们常在传统题WA时看到<code>Files user_out and answer differ</code>。给出一个交互器判定选手输出的实例（不完整）：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// main_code</span>    std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"Wrong answer! The correct answer is "</span> <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">" ."</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当WA时输出正确的答案以供选手参考，与Special Judge类似。</p><h4 id="封装交互"><a href="#封装交互" class="headerlink" title="封装交互"></a>封装交互</h4><p>帮助最后一句，是可选的。我们可以封装标准输入输出的交互，我们对于C++而言，可以写一个头文件interactor.h。</p><p>我们模拟一个很简单的题来示范interactor.h，选手输出两个数（代表一个坐标）与交互器进行交互，交互器返回一个数表示与终点的曼哈顿距离。</p><p>代码如下（只是interactor.h）：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>flush<span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token punctuation">;</span>    std<span class="token operator">::</span>cin <span class="token operator">>></span> res<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你可以把它当做附加源文件提供给选手，方便不太懂的选手交互。</p><h4 id="数据判断"><a href="#数据判断" class="headerlink" title="数据判断"></a>数据判断</h4><p>在交互过程中，交互器需要面对选手提供的各种输出数据。这些数据可能不合法，为了节省代码，介绍一个assert函数，貌似testlib中有类似的函数。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">typename</span> T <span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>condition<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> message <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        score <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>此函数是模板函数，刚入门C++的人可能不太懂。对于这个函数来讲，模板就是为了适用所有类型。condition为一个表达式，message为提供的额外信息。</p><p>判断选手输出是否为整数可以用以下代码，如果不是，cin就会出错，然后执行if中的语句（选手的输出等同于交互器的输入）。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>std<span class="token operator">::</span>cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">,</span> <span class="token string">"Invalid `x` or `y`!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>交互器判断选手输出的数的范围也是如此：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token function">assert</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> n<span class="token punctuation">,</span> <span class="token string">"`x` and `y` must in [1, n]!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="data-yml"><a href="#data-yml" class="headerlink" title="data.yml"></a>data.yml</h4><p>写好标程、题面，造好数据之后，对于SYZOJ的交互题必须用data.yml来指明交互器。</p><p>交互题与传统题的data.yml差别较小，只是增加交互器名称即可。使用C++11编写名为interactor.cpp的交互器，要在其中增加以下内容：</p><pre class=" language-json"><code class="language-json">interactor<span class="token operator">:</span>  language<span class="token operator">:</span> cpp11  fileName<span class="token operator">:</span> interactor.cpp</code></pre><p>然后数据文件的ZIP中需要包含interactor.cpp文件。</p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>总体来说比较简单。交互题一般能增大难度、限制选手的算法，也是强制在线的一种实现方法。</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 颓废 </tag>
            
            <tag> 技巧 </tag>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2003 - 文本编辑器</title>
      <link href="/2019-07/11-luogu4008/"/>
      <url>/2019-07/11-luogu4008/</url>
      
        <content type="html"><![CDATA[<p>题目链接1: <a href="https://www.luogu.org/problemnew/show/P4008" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4008</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1507" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=1507</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这题放在任务计划里已经有些时日了，又拿出来看了看题面。原本是练习Splay用的，但因为不够熟练和懒得缘故，一直不想动手写。看了题解，发现了一个思路简单，代码较为暴力的数据结构——“块状链表”。</p><p>然后就愉快的做（抄）完了，首先感谢<a href="https://www.cnblogs.com/HenryHuang-Never-Settle/p/10803406.html" target="_blank" rel="noopener">@HenryHuang的题解</a>，他的题解使我学习块状链表得到了很大帮助。</p><p>我才不会告诉你很久以前我以为这是STL中string的练手题。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先这道题有一个光标，只需用一个变量就可以维护光标。</p><p>然后就只剩下Insert、Delete、Get操作了，一般我们都会想到平衡树（Splay），但是难理解且代码复杂。</p><p>首先我们都听说过甚至用过链表，STL中的list就是使用链表实现。这种数据结构只能$ O(1) $获得首节点和尾结点，需要逐个遍历才能获得中间的节点。</p><p>不过链表也有优点，由于它的结构为一条链，每个节点维护了前节点指针和后节点指针，因此向中间插入一个数的复杂度为$ O(1) $。</p><p>然而对于这道题，使用链表并不可行，数据范围太大。</p><p>还有一个最简单最常见的数据结构，名叫数组。这个数据结构支持$ O(1) $访问。STL中有封装好的类数组数据结构vector，其中有封装好的函数insert用来插入操作。</p><p>对于数组，插入操作只需要2次memcpy函数，一次赋值操作就能完成，但是复杂度是极高的。每次插入的理论最大复杂度是 $ O(\frac{n}{2}) $</p><p>那么这题就不能投机取巧了吗？万一把数组和链表通过一定方式结合起来，复杂度不就会均衡了吗？</p><p>众所周知，优化暴力的方法有很多，其中分块（根号）算法就非常热门。那么我们让数组的大小$ \sqrt{n} $，然后将这些数组通过链表链接起来，那复杂度不就均衡了吗。</p><p>这种数据结构就是我使用的——块状链表。首先是定义一个结构体，用来存储某一节点的信息。我们只需要维护一个指向下一元素指针即可。</p><p>题目中说明了最大数据范围：</p><blockquote><p>所有 INSERT 插入的字符数之和不超过 2M（1M=1024*1024 字节） ，正确的输出文件长度不超过 3M 字节。</p></blockquote><p>所以我设置每个块的大小为1300，其实块大小在一定范围内即可。在这范围内，块大小和效率只有微小的关系。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> sqrtn<span class="token operator">=</span> <span class="token number">1300</span><span class="token punctuation">;</span><span class="token keyword">struct</span> BLOCK <span class="token punctuation">{</span>    <span class="token keyword">int</span> siz<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">[</span>sqrtn <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> b<span class="token punctuation">[</span>sqrtn <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h4 id="内存池"><a href="#内存池" class="headerlink" title="内存池"></a>内存池</h4><p>为了节点数组循环利用，学习原题解的做法，使用内存池。注意，程序开始时需要初始化内存池。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> blocks<span class="token punctuation">[</span>sqrtn <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bp<span class="token punctuation">,</span> cur<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">newb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> blocks<span class="token punctuation">[</span>bp<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">delb</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    blocks<span class="token punctuation">[</span><span class="token operator">--</span>bp<span class="token punctuation">]</span><span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>肯定会有人问，块状链表怎么维护呢？这是最核心的部分。</p><h4 id="Split"><a href="#Split" class="headerlink" title="Split"></a>Split</h4><p>当某一个块较大时我们需要分裂成两个块。在某些操作（插入、删除等）时，我们可以先从光标位置分裂这个块，然后就可以很方便的对后面的内容进行操作。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// x 代表块编号，p代表分裂的位置（相对于块x）</span><span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> p <span class="token operator">==</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">newb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>ch <span class="token operator">+</span> p<span class="token punctuation">,</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>siz <span class="token operator">-</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h4><p>上面的split函数中用到了add，这个函数是用来在某一块后面插入一个块。但add函数用作插入，那样就不能维护块状链表的性质了。</p><p>add函数与链表的插入类似，只不过赋值变成了memcpy函数。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// x 代表块编号</span><span class="token comment" spellcheck="true">// y 常为一个未初始的块</span><span class="token comment" spellcheck="true">// st 为块 y 中的内容</span><span class="token comment" spellcheck="true">// siz 为 st 的长度</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>st<span class="token punctuation">,</span> <span class="token keyword">int</span> siz<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">,</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">=</span> siz<span class="token punctuation">,</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">,</span> st<span class="token punctuation">,</span> siz<span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h4><p>如果两个相邻的块都很小，那么维护时就要需要合并。我选择将靠后的块合并到靠前的块中，这样比较简单。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// x 代表块的编号</span><span class="token comment" spellcheck="true">// y 代表合并到 x 的块的编号</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>ch <span class="token operator">+</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token punctuation">,</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">,</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token punctuation">,</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">,</span> <span class="token function">delb</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="何时维护"><a href="#何时维护" class="headerlink" title="何时维护"></a>何时维护</h4><p>其实我学习的时候，一开始也对维护有些不解。虽然知道了如何维护，但没有具体的思路，不知道什么时候需要维护。</p><p>根据前人的题解，维护只需要部分维护，即在插入和删除操作之后，维护相关的块。只要保证相邻两块大小之和大于$ \sqrt{n} $，每块大小不超过$ \sqrt{n} $，并且不考虑当块较大时的分裂操作，可以保证块的数量控制在 $ [\sqrt{n},\sqrt{2n}] $ 范围内。</p><p>这里再次感谢<a href="https://www.cnblogs.com/HenryHuang-Never-Settle/p/10803406.html" target="_blank" rel="noopener">@HenryHuang的题解</a>所给予的帮助。</p><h4 id="对于本题"><a href="#对于本题" class="headerlink" title="对于本题"></a>对于本题</h4><p>本题中有插入和删除操作，两者类似。先得到光标当前所属的块，将此块在光标位置分裂。</p><p>对于插入，N 代表要插入的字符串长度。我们在分裂的位置先插入$ \frac{N}{\sqrt{n}} $个长度为$ \sqrt{n} $的块，剩下不足$ \sqrt{n} $长度的再独自插入，因为思路简单就不做解释。然后判断大小合并分裂位置前的块$ x $与$ x $的next块，合并刚插入的最后一个块$ y $与$ y $的next块。</p><p>对于删除，N 代表要删除的长度。在分裂的位置后逐个删除回收即可，如果最后一个块的长度大于剩余删除数，就再次分裂最后一个块，然后删除。</p><p>这部分代码将最后给出，先给出遍历块查找当前光标位置的代码。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// x 为要找的位置，</span><span class="token comment" spellcheck="true">// 因为 x 也是一个引用，最后将赋值为相对于块res的位置</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">pos</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>res <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">.</span>siz <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> x<span class="token operator">-</span><span class="token operator">=</span> b<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token punctuation">,</span> res<span class="token operator">=</span> b<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于Get操作更简单，不需要分裂操作，我为了方便直接在函数中输出了。推荐学习者自行构思，有助于对块状链表的理解。</p><p>提示，此题读入较大，建议使用极速IO优化。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> IOBUF <span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>pend<span class="token punctuation">;</span>    <span class="token punctuation">}</span> in<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span> out<span class="token punctuation">;</span>    <span class="token function">IOBUF</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        in<span class="token punctuation">.</span>p<span class="token operator">=</span> in<span class="token punctuation">.</span>buff<span class="token punctuation">,</span> out<span class="token punctuation">.</span>p<span class="token operator">=</span> out<span class="token punctuation">.</span>buff<span class="token punctuation">,</span> in<span class="token punctuation">.</span>pend<span class="token operator">=</span> in<span class="token punctuation">.</span>buff <span class="token operator">+</span> <span class="token function">fread</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span>buff<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">IOBUF</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span>buff<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> out<span class="token punctuation">.</span>p <span class="token operator">-</span> out<span class="token punctuation">.</span>buff<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> IOB<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> getchar() (*(IOB.in.p++))</span><span class="token macro property">#<span class="token directive keyword">define</span> putchar(c) (*(IOB.out.p++)= (c))</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> e<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> e<span class="token operator">=</span> e <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">,</span> ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> sqrtn<span class="token operator">=</span> <span class="token number">1300</span><span class="token punctuation">;</span><span class="token keyword">struct</span> BLOCK <span class="token punctuation">{</span>    <span class="token keyword">int</span> siz<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">[</span>sqrtn <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> b<span class="token punctuation">[</span>sqrtn <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> blocks<span class="token punctuation">[</span>sqrtn <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bp<span class="token punctuation">,</span> cur<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>sqrtn <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> blocks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> bp<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">newb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> blocks<span class="token punctuation">[</span>bp<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">delb</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    blocks<span class="token punctuation">[</span><span class="token operator">--</span>bp<span class="token punctuation">]</span><span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>st<span class="token punctuation">,</span> <span class="token keyword">int</span> siz<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">,</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">=</span> siz<span class="token punctuation">,</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">,</span> st<span class="token punctuation">,</span> siz<span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">pos</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// &amp;x</span>    <span class="token keyword">int</span> res<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>res <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">.</span>siz <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> x<span class="token operator">-</span><span class="token operator">=</span> b<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token punctuation">,</span> res<span class="token operator">=</span> b<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> p <span class="token operator">==</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">newb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>ch <span class="token operator">+</span> p<span class="token punctuation">,</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>siz <span class="token operator">-</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>ch <span class="token operator">+</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token punctuation">,</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">,</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token punctuation">,</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span> b<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">,</span> <span class="token function">delb</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> siz<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>st<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> nowp<span class="token operator">=</span> <span class="token function">pos</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">split</span><span class="token punctuation">(</span>nowp<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nextp<span class="token punctuation">,</span> fp<span class="token operator">=</span> nowp<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>sqrtn <span class="token operator">&lt;</span> siz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nextp<span class="token operator">=</span> <span class="token function">newb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>nowp<span class="token punctuation">,</span> nextp<span class="token punctuation">,</span> st<span class="token punctuation">,</span> sqrtn<span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token operator">+</span><span class="token operator">=</span> sqrtn<span class="token punctuation">,</span> siz<span class="token operator">-</span><span class="token operator">=</span> sqrtn<span class="token punctuation">,</span> nowp<span class="token operator">=</span> nextp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    nextp<span class="token operator">=</span> <span class="token function">newb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>nowp<span class="token punctuation">,</span> nextp<span class="token punctuation">,</span> st<span class="token punctuation">,</span> siz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>nextp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>nextp<span class="token punctuation">]</span><span class="token punctuation">.</span>siz <span class="token operator">+</span> b<span class="token punctuation">[</span>b<span class="token punctuation">[</span>nextp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">]</span><span class="token punctuation">.</span>siz <span class="token operator">&lt;</span> sqrtn<span class="token punctuation">)</span> <span class="token function">merge</span><span class="token punctuation">(</span>nextp<span class="token punctuation">,</span> b<span class="token punctuation">[</span>nextp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>fp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>fp<span class="token punctuation">]</span><span class="token punctuation">.</span>siz <span class="token operator">+</span> b<span class="token punctuation">[</span>b<span class="token punctuation">[</span>fp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">]</span><span class="token punctuation">.</span>siz <span class="token operator">&lt;</span> sqrtn<span class="token punctuation">)</span> <span class="token function">merge</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> b<span class="token punctuation">[</span>fp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> siz<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> nowp<span class="token operator">=</span> <span class="token function">pos</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">split</span><span class="token punctuation">(</span>nowp<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nextp<span class="token operator">=</span> b<span class="token punctuation">[</span>nowp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>siz <span class="token operator">></span> b<span class="token punctuation">[</span>nextp<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token punctuation">)</span> siz<span class="token operator">-</span><span class="token operator">=</span> b<span class="token punctuation">[</span>nextp<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token punctuation">,</span> b<span class="token punctuation">[</span>nowp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span> b<span class="token punctuation">[</span>nextp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">,</span> <span class="token function">delb</span><span class="token punctuation">(</span>nextp<span class="token punctuation">)</span><span class="token punctuation">,</span> nextp<span class="token operator">=</span> b<span class="token punctuation">[</span>nowp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">;</span>    <span class="token function">split</span><span class="token punctuation">(</span>nextp<span class="token punctuation">,</span> siz<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>nowp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span> b<span class="token punctuation">[</span>nextp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">,</span> <span class="token function">delb</span><span class="token punctuation">(</span>nextp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>nowp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span>nowp<span class="token punctuation">]</span><span class="token punctuation">.</span>siz <span class="token operator">+</span> b<span class="token punctuation">[</span>b<span class="token punctuation">[</span>nowp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">]</span><span class="token punctuation">.</span>siz <span class="token operator">&lt;</span> sqrtn<span class="token punctuation">)</span> <span class="token function">merge</span><span class="token punctuation">(</span>nowp<span class="token punctuation">,</span> b<span class="token punctuation">[</span>nowp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> siz<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> nowp<span class="token operator">=</span> <span class="token function">pos</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> mins<span class="token punctuation">;</span>    mins<span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>siz<span class="token punctuation">,</span> b<span class="token punctuation">[</span>nowp<span class="token punctuation">]</span><span class="token punctuation">.</span>siz <span class="token operator">-</span> w<span class="token punctuation">)</span><span class="token punctuation">,</span> siz<span class="token operator">-</span><span class="token operator">=</span> mins<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> w<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> w <span class="token operator">+</span> mins<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>nowp<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>siz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nowp<span class="token operator">=</span> b<span class="token punctuation">[</span>nowp<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">,</span> mins<span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>siz<span class="token punctuation">,</span> b<span class="token punctuation">[</span>nowp<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token punctuation">)</span><span class="token punctuation">,</span> siz<span class="token operator">-</span><span class="token operator">=</span> mins<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mins<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>nowp<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token function">readopt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token string">'M'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token string">'I'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token string">'D'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token string">'G'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token string">'P'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token string">'N'</span><span class="token punctuation">)</span> ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ch<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1048576</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token function">readopt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'M'</span><span class="token operator">:</span> cur<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'P'</span><span class="token operator">:</span> <span class="token operator">--</span>cur<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'N'</span><span class="token operator">:</span> <span class="token operator">++</span>cur<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'I'</span><span class="token operator">:</span> <span class="token punctuation">{</span>                n<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">32</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">126</span><span class="token punctuation">)</span> <span class="token operator">--</span>i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">insert</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> n<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token operator">:</span> <span class="token punctuation">{</span>                n<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">erase</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> <span class="token string">'G'</span><span class="token operator">:</span> <span class="token punctuation">{</span>                n<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 分块 </tag>
            
            <tag> 块状链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuoguP3396 - 哈希冲突</title>
      <link href="/2019-07/09-luogu3396/"/>
      <url>/2019-07/09-luogu3396/</url>
      
        <content type="html"><![CDATA[<p>题目链接: <a href="https://www.luogu.org/problemnew/show/P3396" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3396</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>话说快暑假了…但是好像没有几天假期啊。</p><p>然后期末考试之际做了找到题，发现暴力好像都能用分块优化。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>读完题目，发现想不到任何复杂度较低思路。对于几乎不接触分块的我，数据范围似乎没有什么用。</p><p>然后就打开了题解，才知道可以根号算法（不指分块），不过我统一把用sqrt函数的解法都叫做分块。</p><p>暴力的复杂度大概是$ O(mn) $ ，每次查询我们都需要$ O(n) $ 来遍历数组，修改是$ O(1) $。如果预处理的话那更玄学，每次查询时$ O(1) $，而修改是$ O(n^2) $ ，那么很有可能变成$ O(n^2m) $算法。</p><p>所以考虑只预处理$ \sqrt{n} $的模数，复杂度为$ O(n \sqrt{n}) $。</p><p>对于查询，如果查询的模数不超过$ \sqrt{n} $那么可以直接输出答案。如果模数超过$ \sqrt{n} $，我们只需要枚举模$ p $后的结果，把他们加起来，那么复杂度仍为$ \frac{n}{\sqrt{n}} = \sqrt{n} $。</p><p>对于修改，与预处理类似，还是只修改$ \sqrt{n} $的模数，由于只是单点修改，所以少了一层循环，那么复杂度为$ O(\sqrt{n}) $。</p><p>总复杂度最大是$ O((m + n)\sqrt{n}) $，然后就可以写代码了，代码极为简单，感觉像是暴力。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nb<span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">150001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span><span class="token number">1500</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1500</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmpx<span class="token punctuation">,</span> tmpy<span class="token punctuation">;</span><span class="token keyword">char</span> cmd<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">,</span> nb<span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nb<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">%</span> i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> cmd <span class="token operator">>></span> tmpx <span class="token operator">>></span> tmpy<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cmd <span class="token operator">==</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmpx <span class="token operator">&lt;=</span> nb<span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> sum<span class="token punctuation">[</span>tmpx<span class="token punctuation">]</span><span class="token punctuation">[</span>tmpy<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> ans<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> tmpy<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">=</span> tmpx<span class="token punctuation">)</span> ans<span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nb<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>tmpx <span class="token operator">%</span> i<span class="token punctuation">]</span><span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>tmpx <span class="token operator">%</span> i<span class="token punctuation">]</span> <span class="token operator">-</span> v<span class="token punctuation">[</span>tmpx<span class="token punctuation">]</span> <span class="token operator">+</span> tmpy<span class="token punctuation">;</span>            v<span class="token punctuation">[</span>tmpx<span class="token punctuation">]</span><span class="token operator">=</span> tmpy<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>因为之前根号算法做比较少，而这道题给我很大的启示，以后一些只能想到暴力的题可以尝试使用根号来优化。</p><p>听说这题不用根号，而使用1/3次方作为块的大小效率更高。但是不会证明，而且复杂度比较玄学，可能只适用这一道题的数据吧。</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 分块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuoguP3709 - 大爷的字符串题</title>
      <link href="/2019-07/01-luogu3709/"/>
      <url>/2019-07/01-luogu3709/</url>
      
        <content type="html"><![CDATA[<p>题目链接: <a href="https://www.luogu.org/problemnew/show/P3709" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3709</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近一个月是各种忙啊。先是准备了半个多月的合格考，然后终于回归了OI。最近一周又生病请假等就没有更新过题解。上次更新题解也是很久之前，因为中间有段时间颓废过度做项目，现在那个项目基本已经咕咕，因为懒得再下Visual Studio了。</p><p>这几天一直在做莫队，然后做到这道题，打算水篇题解。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题可以说是语文阅读理解神题，丝毫看不懂出题人意图是什么。</p><p>根据出题人的解释，一句话概括如下: </p><blockquote><p>给你 N 个数, M 次询问区间[l, r]中众数的出现次数</p></blockquote><p>然后就非常容易，但是字符集数据范围1e9需要离散化，我直接边读入边使用map处理。</p><p>根据一些其他题解的提示，我们开一个cnt数组记录区间内某个数出现的次数，然后用cntt数组记录cnt数组中数出现的次数。</p><p>在区间扩大时ans和cnt数组取max，然后区间缩小时就判断cntt是否已经为0，如果是就让ans减一。当然不能忘了区间更改时cnt和cntt肯定都会有所改变。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>评测详情(未开O2): Accepted 100 用时: 1634ms / 内存: 9740KB</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f<span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> x<span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">,</span> ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> x<span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">,</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token function">write</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">200001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mapptr<span class="token punctuation">,</span> cnt<span class="token punctuation">[</span><span class="token number">200001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cntt<span class="token punctuation">[</span><span class="token number">200001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nowans<span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">200001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ns<span class="token punctuation">;</span>map<span class="token operator">&lt;</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">></span> mapping<span class="token punctuation">;</span><span class="token keyword">struct</span> QUERY <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> bl<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> QUERY <span class="token operator">&amp;</span>q2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bl <span class="token operator">==</span> q2<span class="token punctuation">.</span>bl <span class="token operator">?</span> r <span class="token operator">&lt;</span> q2<span class="token punctuation">.</span>r <span class="token operator">:</span> l <span class="token operator">&lt;</span> q2<span class="token punctuation">.</span>l<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> qs<span class="token punctuation">[</span><span class="token number">200001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">--</span>cntt<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">++</span>cntt<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    nowans<span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nowans<span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">--</span>cntt<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cntt<span class="token punctuation">[</span>cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nowans <span class="token operator">==</span> cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span>nowans<span class="token punctuation">;</span>    <span class="token operator">++</span>cntt<span class="token punctuation">[</span><span class="token operator">--</span>cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ns<span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mapping<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> mapping<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">++</span>mapptr<span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> mapping<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> qs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> qs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> qs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span> i<span class="token punctuation">,</span> qs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>bl<span class="token operator">=</span> <span class="token punctuation">(</span>qs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> ns<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>qs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> qs <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> qs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span> <span class="token function">del</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">></span> qs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">--</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r <span class="token operator">></span> qs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token function">del</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r <span class="token operator">&lt;</span> qs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span>qs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span> nowans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">-</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> STL </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目日记 - 开发图片爬虫 Ⅲ</title>
      <link href="/2019-06/03-spiking3/"/>
      <url>/2019-06/03-spiking3/</url>
      
        <content type="html"><![CDATA[<p>封面图片来自网络，如有侵权将删除。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一节说这节介绍WinHTTP，现在好像鸽子了。经过我再三思考后，还是先深入学习WinInet吧。</p><p>关于根据链接下载网页的各种方式在第一节已经介绍过了。这里再补充一下，还有一种方式是使用外部库libcurl，使用方便代码简洁，但我不把它当做我们主要学习的对象，因为它太过于简单。</p><p>这节可以说是个扩展篇，并不是这个项目优先考虑的内容。先介绍它主要是因为这部分东西更有意思，大家可能会更感兴趣。</p><p>如果阅读效果不佳，请点击右下角蓝色按钮折叠目录。</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>这个预处理是我自己勉强定义的，所以大家可能不理解。</p><p>通俗的说，URL预处理意为对一个URL链接本体进行处理，请大家不要误以为是对HTML网页内容进行分析。</p><p>再说清楚一些，获取链接所指向的内容前，程序并不知道这个内容是什么类型的。也就是说，它可能是一个HTML也可能是图片，又或者是一个CSS文件。所以我们要对URL进行一定的预处理，然后判断文件后缀之类的。</p><p>先给出本节流程图：</p><p><img src="/images/spiKing5.png" alt="项目流程图"></p><p>很多人可能不理解获得内容类型为什么需要先分解URL，那就接着往下看。</p><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>从基础说起，大家都模糊地知道URL是什么，我给出它的定义：</p><blockquote><p>URL是统一资源定位符（英语Uniform Resource Locator的缩写）也被称为网页地址，是因特网上标准的资源的地址。它最初是由蒂姆·伯纳斯·李发明用来作为万维网的地址。现在它已经被万维网联盟编制为互联网标准RFC1738了。</p></blockquote><p>URL由多部分组成，详细说有9部分，我们一个一个介绍。有关资料部分来自于<a href="https://blog.csdn.net/u014686399/article/details/84726335" target="_blank" rel="noopener">going_han的博客</a>。</p><p>一个URL的实例: <code>scheme://user:password@host:port/path;params?query#frag</code></p><table><thead><tr><th align="center">编号</th><th align="center">名称</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">协议(protocol)</td><td align="left">为进行网络中的数据交换而建立的规则、标准或约定。有时也叫scheme，常用的协议有http、https、ftp、file、mailto。</td></tr><tr><td align="center">2</td><td align="center">用户名(user)</td><td align="left">一般用不到，为访问资源使用的用户名。</td></tr><tr><td align="center">3</td><td align="center">密码(password)</td><td align="left">一般也用不到，为访问资源使用的密码。</td></tr><tr><td align="center">4</td><td align="center">域名(domain)</td><td align="left">域名（英语：Domain Name），简称域名、网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。有时也叫host，可以使用IP地址作为域名使用。</td></tr><tr><td align="center">5</td><td align="center">端口(port)</td><td align="left">在网络技术中，端口（Port）有好几种意思。我们这里所指的端口不是指物理意义上的端口，而是特指TCP/IP协议中的端口，是逻辑意义上的端口。端口不是一个必须部分，如果省略将采用协议默认使用的端口。</td></tr><tr><td align="center">6</td><td align="center">路径(path)</td><td align="left">由零或多个“/”符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。</td></tr><tr><td align="center">7</td><td align="center">参数(params)</td><td align="left">这是用于指定特殊参数的可选项。</td></tr><tr><td align="center">8</td><td align="center">查询(query)</td><td align="left">可选项。用于给动态网页传递参数，可有多个参数，用“&amp;”符号隔开，每个参数的名和值用“=”符号隔开。</td></tr><tr><td align="center">9</td><td align="center">片段(frag)</td><td align="left">主要用于对资源进行分类。例如一个网页中有多个名词解释，可使用fragment直接定位到某一名词解释。访问一个帮助文档时，文档的各个章节就可以表述为片段。</td></tr></tbody></table><p>所以分解URL有什么用呢？我们再简单了解一下HTTP访问的步骤，HTTP访问时会进行多步操作，其中有两步我想重点介绍一下，分别是：发送请求头(Request Headers)和接受响应头(Response Headers)。</p><p>其实大家现在就可以直观的了解它，介绍一种方法。</p><p>随便找一个可用网页（比如这篇博客） -&gt; 点击键盘上的F12，弹出开发人员调试工具 -&gt; 进入’Network’选项页 -&gt; 点击录制按钮（黑色的圆点），按钮变红色 -&gt; 刷新页面。</p><p>然后会有很多信息，我们要找的一般在第一个位置，Name一般为URL最后一个’/‘后的字符串。如果是在这篇博客进行的上述操作，则Name为’03-spiking3/‘，点击会显示详细信息。</p><p>我使用的浏览器效果如下图，部分进行了打码处理，URL为localhost是因为我在本地测试。</p><p><img src="/images/spiKing6.png" alt="开发人员调试工具截图"></p><p>这里已经很直观了，我们需要的就是Response Headers中的’Content-Type:text/html’，这个可以用来判断内容的类型。大家可以再打开一个图片URL进行观察，比如上面那个截图，发现其中’Content-Type:image/png’。我们根据此信息来判断内容的类型。</p><p>其他信息大家可以自行了解，对项目作用不大，我就不作介绍了。</p><p>另外，本节含有大量string类的内容，但只要不是初学者都很熟悉了，因此不作理论上的介绍。</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>这部分理论易理解，但代码部分比较长。先给出本节所有的代码:</p><pre class=" language-cpp"><code class="language-cpp">string <span class="token function">_trim</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    size_t start<span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">find_first_not_of</span><span class="token punctuation">(</span><span class="token string">" \n\r\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t until<span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">find_last_not_of</span><span class="token punctuation">(</span><span class="token string">" \n\r\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string<span class="token operator">::</span>const_iterator i<span class="token operator">=</span> start <span class="token operator">==</span> string<span class="token operator">::</span>npos <span class="token operator">?</span> str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> start<span class="token punctuation">;</span>    string<span class="token operator">::</span>const_iterator x<span class="token operator">=</span> until <span class="token operator">==</span> string<span class="token operator">::</span>npos <span class="token operator">?</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> until <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>raw_url<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>port<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>domain<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    string x<span class="token operator">=</span> <span class="token function">_trim</span><span class="token punctuation">(</span>raw_url<span class="token punctuation">)</span><span class="token punctuation">,</span> protocol<span class="token punctuation">,</span> query<span class="token punctuation">;</span>    <span class="token keyword">int</span> offset<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    size_t pos1<span class="token punctuation">,</span> pos2<span class="token punctuation">,</span> pos3<span class="token punctuation">,</span> pos4<span class="token punctuation">;</span>    offset<span class="token operator">=</span> offset <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"https://"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">8</span> <span class="token operator">:</span> offset<span class="token punctuation">;</span>    offset<span class="token operator">=</span> offset <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"http://"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">7</span> <span class="token operator">:</span> offset<span class="token punctuation">;</span>    pos1<span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    path<span class="token operator">=</span> pos1 <span class="token operator">==</span> string<span class="token operator">::</span>npos <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> x<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos1<span class="token punctuation">)</span><span class="token punctuation">;</span>    domain<span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offset<span class="token punctuation">,</span> pos1 <span class="token operator">!=</span> string<span class="token operator">::</span>npos <span class="token operator">?</span> x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> pos1 <span class="token operator">:</span> x<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    path<span class="token operator">=</span> <span class="token punctuation">(</span>pos2<span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token operator">::</span>npos <span class="token operator">?</span> path<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pos2<span class="token punctuation">)</span> <span class="token operator">:</span> path<span class="token punctuation">;</span>    port<span class="token operator">=</span> <span class="token punctuation">(</span>pos3<span class="token operator">=</span> domain<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token operator">::</span>npos <span class="token operator">?</span> domain<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">;</span>    domain<span class="token operator">=</span> domain<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pos3 <span class="token operator">!=</span> string<span class="token operator">::</span>npos <span class="token operator">?</span> pos3 <span class="token operator">:</span> domain<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    protocol<span class="token operator">=</span> offset <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> x<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> offset <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    query<span class="token operator">=</span> <span class="token punctuation">(</span>pos4<span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token operator">::</span>npos <span class="token operator">?</span> path<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos4 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    path<span class="token operator">=</span> pos4 <span class="token operator">!=</span> string<span class="token operator">::</span>npos <span class="token operator">?</span> path<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pos4<span class="token punctuation">)</span> <span class="token operator">:</span> path<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">judgeUrlType</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>Url<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>fileSuffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> byte Temp<span class="token punctuation">[</span>MAXBLOCKSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    HINTERNET hSession<span class="token operator">=</span> <span class="token function">InternetOpenA</span><span class="token punctuation">(</span><span class="token string">"DownloadKit"</span><span class="token punctuation">,</span> INTERNET_OPEN_TYPE_PRECONFIG<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hConnect<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hRequest<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hSession <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        INTERNET_PORT nPort<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        DWORD dwReadSize<span class="token operator">=</span> MAXBLOCKSIZE<span class="token punctuation">;</span>        string sPort<span class="token punctuation">,</span> sServer<span class="token punctuation">,</span> sObject<span class="token punctuation">;</span>        <span class="token function">parse_url</span><span class="token punctuation">(</span>Url<span class="token punctuation">,</span> sPort<span class="token punctuation">,</span> sServer<span class="token punctuation">,</span> sObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>size_t i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sPort<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> nPort<span class="token operator">=</span> nPort <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> sPort<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        hConnect<span class="token operator">=</span> <span class="token function">InternetConnectA</span><span class="token punctuation">(</span>hSession<span class="token punctuation">,</span> sServer<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nPort<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> INTERNET_SERVICE_HTTP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hConnect <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> fail<span class="token punctuation">;</span>        hRequest<span class="token operator">=</span> <span class="token function">HttpOpenRequestA</span><span class="token punctuation">(</span>            hConnect<span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">,</span> sObject<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> INTERNET_FLAG_KEEP_CONNECTION <span class="token operator">|</span> INTERNET_FLAG_NO_AUTH <span class="token operator">|</span> INTERNET_FLAG_NO_COOKIES <span class="token operator">|</span> INTERNET_FLAG_NO_UI <span class="token operator">|</span> INTERNET_FLAG_IGNORE_CERT_CN_INVALID <span class="token operator">|</span> INTERNET_FLAG_RELOAD<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hRequest <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">HttpSendRequest</span><span class="token punctuation">(</span>hRequest<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> fail<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">HttpQueryInfoA</span><span class="token punctuation">(</span>hRequest<span class="token punctuation">,</span> HTTP_QUERY_RAW_HEADERS<span class="token punctuation">,</span> Temp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwReadSize<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> fail<span class="token punctuation">;</span>        Temp<span class="token punctuation">[</span>dwReadSize<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dwReadSize<span class="token punctuation">;</span> i<span class="token operator">=</span> i <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>Temp <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>Temp <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"Content-Type:"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> Temp <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                fileSuffix<span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                fileSuffix<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>Temp <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"html"</span> <span class="token operator">:</span> fileSuffix<span class="token punctuation">;</span>                fileSuffix<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>Temp <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">"image/png"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"png"</span> <span class="token operator">:</span> fileSuffix<span class="token punctuation">;</span>                fileSuffix<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>Temp <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">"image/jpeg"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"jpg"</span> <span class="token operator">:</span> fileSuffix<span class="token punctuation">;</span>                fileSuffix<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>Temp <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">"image/gif"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"gif"</span> <span class="token operator">:</span> fileSuffix<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Add what you want</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hRequest<span class="token punctuation">)</span> <span class="token function">InternetCloseHandle</span><span class="token punctuation">(</span>hRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hConnect<span class="token punctuation">)</span> <span class="token function">InternetCloseHandle</span><span class="token punctuation">(</span>hConnect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hSession<span class="token punctuation">)</span> <span class="token function">InternetCloseHandle</span><span class="token punctuation">(</span>hSession<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>fail<span class="token operator">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hRequest<span class="token punctuation">)</span> <span class="token function">InternetCloseHandle</span><span class="token punctuation">(</span>hRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hConnect<span class="token punctuation">)</span> <span class="token function">InternetCloseHandle</span><span class="token punctuation">(</span>hConnect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hSession<span class="token punctuation">)</span> <span class="token function">InternetCloseHandle</span><span class="token punctuation">(</span>hSession<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Internet Error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><em>_trim</em>函数作用为去除字符串的空白换行符。</p><p><em>parse_url</em>函数作用为分解URL，分解为端口、域名和路径。</p><p><em>judgeUrlType</em>函数作用为获得HTTP响应头并分析URL内容类型。</p><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><p>本节使用C++STL中的string类比较多，简单的大家都使用过，所以介绍一下几个比较陌生的函数。</p><h5 id="find-first-not-of"><a href="#find-first-not-of" class="headerlink" title="find_first_not_of"></a>find_first_not_of</h5><pre class=" language-cpp"><code class="language-cpp">size_t <span class="token function">find_first_not_of</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>size_t <span class="token function">find_first_not_of</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>size_t <span class="token function">find_first_not_of</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>size_t <span class="token function">find_first_not_of</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></code></pre><p><em>Return Value</em>即返回值，返回第一个不匹配字符的位置，如果没有不匹配字符则返回string::npos。若使用字符串作参数，则此处不匹配字符指参数中不包含的字符。</p><h5 id="string-npos"><a href="#string-npos" class="headerlink" title="string::npos"></a>string::npos</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">const</span> size_t npos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><h5 id="find-last-not-of"><a href="#find-last-not-of" class="headerlink" title="find_last_not_of"></a>find_last_not_of</h5><pre class=" language-cpp"><code class="language-cpp">size_t <span class="token function">find_last_not_of</span> <span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>size_t <span class="token function">find_last_not_of</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>size_t <span class="token function">find_last_not_of</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> size_t pos<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>size_t <span class="token function">find_last_not_of</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> size_t pos <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></code></pre><p><em>Return Value</em>即返回值，与find_first_not_of类似，返回最后一个不匹配字符的位置。</p><h5 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h5><pre class=" language-cpp"><code class="language-cpp">string <span class="token function">substr</span> <span class="token punctuation">(</span>size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size_t len <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span></code></pre><p><em>Return Value</em>即返回值，返回从pos开始长度为len的子串。</p><h4 id="InternetConnectA"><a href="#InternetConnectA" class="headerlink" title="InternetConnectA"></a>InternetConnectA</h4>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 颓废 </tag>
            
            <tag> 项目 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目日记 - 开发图片爬虫 Ⅱ</title>
      <link href="/2019-05/28-spiking2/"/>
      <url>/2019-05/28-spiking2/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们上一节学习了获取网页的代码，那么大家可能会以为接下来就是分析网页了。但事实上，我们还需要先转换编码。我们都知道，C++编程常用的是ASCII编码，而网页大部分使用的是UTF-8编码。</p><p>因此我们要先将获取后的网页转换成我们想要的编码，再去分析内容。</p><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>我们写编码转换的代码，肯定要知道这些编码之间的关系。</p><p>ASCII编码我们再熟悉不过了，然而我相信很多人和我一样，分不清什么是Unicode，UTF-8，UTF-16，UTF-32。</p><p>我不想用长篇大论来解释这些东西，就给出它们各自的定义和我们需要知道的东西。如果想更深入的了解，可以自行搜索。</p><blockquote><p>Unicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准，包括字符集、编码方案等。</p></blockquote><p>至于它为什么诞生，我简单说明一下。因为我们熟知的ASCII码能表示的字符是非常有限的，根本无法承受那么多国家的字符。因此国际组织就又发明了一个新的编码，几乎收尽所有国家的字符，甚至包括特殊字符。</p><p>Unicode与其他编码类似，也是每一个字符都对应一个数字来表示它。但Unicode也仅仅如此，它没有规定这个二进制代码如何存储。</p><p>那么问题来了，在Unicode编码下，假设有一个3字节的二进制代码，计算机怎么知道表示的是一个字符还是两个字符或者是三个字符呢？因此UTF-8、UTF-16这一系列东西就诞生了。</p><p>先介绍UTF-8，这是开发网页首选的编码存储方式。</p><blockquote><p>UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码，又称万国码，由Ken Thompson于1992年创建。</p></blockquote><p>如果略懂编码的话，可变长度是最大特点。但是为了实现可变长度，就需要一些二进制位来表示长度，我认为它的编码规则可以说是非常典型了。</p><table><thead><tr><th>字节数</th><th>二进制编码形式</th></tr></thead><tbody><tr><td>1字节</td><td>0xxxxxxx</td></tr><tr><td>2字节</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>3字节</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>4字节</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>5字节</td><td>111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>6字节</td><td>1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><p>再简单说一下UTF-16，定义：</p><blockquote><p>UTF-16是Unicode字符编码五层次模型的第三层：字符编码表（Character Encoding Form，也称为 “storage format”）的一种实现方式。</p></blockquote><p>UTF-16虽然也可变长度，但不如UTF-8灵活。它有大尾序和小尾序两种储存形式，这个可以自行查阅。</p><blockquote><p>UTF-32 (或 UCS-4)是一种将Unicode字符编码的协定，对每一个Unicode码位使用恰好32位元。其它的Unicode transformation formats则使用不定长度编码。</p></blockquote><p>网上找到一个工具，<a href="https://www.qqxiuzi.cn/bianma/Unicode-UTF.php" target="_blank" rel="noopener">Unicode和UTF编码转换</a>，有兴趣可以试一下。</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>我们为什么要了解上面那些东西，最终还是为了更容易理解代码。先给出一个将一个字符串从UTF-8转为ASCII的示例代码，从网上抄下来的。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">changeTxtEncoding</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>szU8<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> wcsLen<span class="token operator">=</span> <span class="token function">MultiByteToWideChar</span><span class="token punctuation">(</span>CP_UTF8<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> szU8<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>szU8<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">wchar_t</span> <span class="token operator">*</span>wszString<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">wchar_t</span><span class="token punctuation">[</span>wcsLen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">MultiByteToWideChar</span><span class="token punctuation">(</span>CP_UTF8<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> szU8<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>szU8<span class="token punctuation">)</span><span class="token punctuation">,</span> wszString<span class="token punctuation">,</span> wcsLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    wszString<span class="token punctuation">[</span>wcsLen<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ansiLen<span class="token operator">=</span> <span class="token function">WideCharToMultiByte</span><span class="token punctuation">(</span>CP_ACP<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> wszString<span class="token punctuation">,</span> <span class="token function">wcslen</span><span class="token punctuation">(</span>wszString<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>szAnsi<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>ansiLen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">WideCharToMultiByte</span><span class="token punctuation">(</span>CP_ACP<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> wszString<span class="token punctuation">,</span> <span class="token function">wcslen</span><span class="token punctuation">(</span>wszString<span class="token punctuation">)</span><span class="token punctuation">,</span> szAnsi<span class="token punctuation">,</span> ansiLen<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    szAnsi<span class="token punctuation">[</span>ansiLen<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wszString<span class="token punctuation">;</span>    <span class="token keyword">return</span> szAnsi<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>此函数是将一个字符串，先从UTF-8转为UTF-16，再转为ASCII。</p><h4 id="MultiByteToWideChar"><a href="#MultiByteToWideChar" class="headerlink" title="MultiByteToWideChar"></a>MultiByteToWideChar</h4><p>此函数可将字符串映射到UTF-16(宽字符)字符串。字符串不一定来自多字节字符集。在这里，字符集或代码页我们都可以理解为编码映射表。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> WINAPI <span class="token function">MultiByteToWideChar</span><span class="token punctuation">(</span>    _In_ UINT CodePage<span class="token punctuation">,</span>    _In_ DWORD dwFlags<span class="token punctuation">,</span>    <span class="token function">_In_NLS_string_</span><span class="token punctuation">(</span>cbMultiByte<span class="token punctuation">)</span> LPCCH lpMultiByteStr<span class="token punctuation">,</span>    _In_ <span class="token keyword">int</span> cbMultiByte<span class="token punctuation">,</span>    <span class="token function">_Out_writes_to_opt_</span><span class="token punctuation">(</span>cchWideChar<span class="token punctuation">,</span><span class="token keyword">return</span><span class="token punctuation">)</span> LPWSTR lpWideCharStr<span class="token punctuation">,</span>    _In_ <span class="token keyword">int</span> cchWideChar    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>定义简化如下：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> WINAPI <span class="token function">MultiByteToWideChar</span><span class="token punctuation">(</span>    UINT CodePage<span class="token punctuation">,</span>     DWORD dwFlags<span class="token punctuation">,</span>     LPCCH lpMultiByteStr<span class="token punctuation">,</span>     <span class="token keyword">int</span> cbMultiByte<span class="token punctuation">,</span>     LPWSTR lpWideCharStr<span class="token punctuation">,</span>     <span class="token keyword">int</span> cchWideChar    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><em>CodePage</em>为指定执行转换的字符集。如果原字符串为ASCII通常选择CP_ACP，关于CP_ACP与CP_THREAD_ACP的区别可以自己了解。我们这里原字符串为UTF-8，因此选择CP_UTF8。数值表：</p><table><thead><tr><th>数值</th><th>说明</th></tr></thead><tbody><tr><td>CP_ACP</td><td>Windows系统默认的ANSI代码页。</td></tr><tr><td>CP_MACCP</td><td>Mac系统代码页。</td></tr><tr><td>CP_ACP</td><td>OEM系统代码页。</td></tr><tr><td>CP_SYMBOL</td><td>符号字符集。</td></tr><tr><td>CP_THREAD_ACP</td><td>当前Windows线程的ANSI代码页。</td></tr><tr><td>CP_UTF7</td><td>使用UTF-7。</td></tr><tr><td>CP_UTF8</td><td>使用UTF-8。</td></tr></tbody></table><p><em>dwFlags</em>设定转换类型。缺省值为MB_PRECOMPOSED，对于UTF-8必须为0或MB_ERR_INVALID_CHARS，此参数作用较小，数值表就不给出了。</p><p><em>lpMultiByteStr</em>指向一个要转换的字符串。</p><p><em>cbMultiByte</em>指定长度，如果lpMultiByteStr指向的字符串为空结束，此参数可设为-1。如果设为-1，函数将处理包括终止空字符在内的所有字符。我们可以用strlen来自行获得长度。</p><p><em>lpWideCharStr</em>为指向接收缓冲器的指针。</p><p><em>cchWideChar</em>为lpWideCharStr指示的缓冲器的大小(以字符为单位)。如果此值为0不使用lpWideCharStr缓冲区。</p><p><em>Return Value</em>即返回值，返回写入到缓冲器的字符数。如果cchWideChar为0则返回缓冲器所需大小(以字符为单位)。</p><p>我们第一次调用此函数时应将cchWideChar设为0，并记录函数返回值，第二次调用时将cchWideChar设为此值。</p><h4 id="WideCharToMultiByte"><a href="#WideCharToMultiByte" class="headerlink" title="WideCharToMultiByte"></a>WideCharToMultiByte</h4><p>与MultiByteToWideChar恰恰相反，但多两个参数，此函数可将UTF-16(宽字符)字符串映射到新字符串。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> WINAPI <span class="token function">WideCharToMultiByte</span><span class="token punctuation">(</span>    UINT CodePage<span class="token punctuation">,</span>     DWORD dwFlags<span class="token punctuation">,</span>     LPCWCH lpWideCharStr<span class="token punctuation">,</span>     <span class="token keyword">int</span> cchWideChar<span class="token punctuation">,</span>     LPSTR lpMultiByteStr<span class="token punctuation">,</span>     <span class="token keyword">int</span> cbMultiByte<span class="token punctuation">,</span>     LPCCH lpDefaultChar<span class="token punctuation">,</span>     LPBOOL lpUsedDefaultChar    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><em>CodePage</em>为指定执行转换的字符集。可选数值与MultiByteToWideChar相同，我们这里选择CP_ACP。</p><p><em>dwFlags</em>设定转换类型。设为0即可。</p><p><em>lpWideCharStr</em>指向一个要转换的字符串。</p><p><em>cchWideChar</em>指定长度。对于宽字符，自行使用wcslen来获得。</p><p><em>lpMultiByteStr</em>为指向接收缓冲器的指针。</p><p><em>cbMultiByte</em>为lpMultiByteStr指示的缓冲器的大小(以字符为单位)。</p><p><em>lpDefaultChar</em>为指向另一个接收缓冲器的指针，如果某个字符不能在指定的代码页中表示将使用此缓冲器。我们不需要，设为NULL即可。</p><p><em>lpUsedDefaultChar</em>为一个指向BOOL变量的指针。如果使用了lpDefaultChar将被设为TRUE，否则为FALSE。我们也设为NULL即可。</p><p><em>Return Value</em>即返回值，与MultiByteToWideChar相类比。</p><p>调用两次，步骤也与MultiByteToWideChar相似。</p><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p>网上给的代码没有释放内存的语句，可能会造成内存泄露。</p><p><em>delete</em>语句使用过指针都知道，释放一个指针指向的内存。</p><p><em>delete[]</em>语句释放一个数组指针指向的内存。</p><p>如果想深入了解其中的原理，可以自行查阅。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这一节简单介绍了编码的知识和使用C++进行编码转换的代码。我们这个项目深入了解编码系统，所介绍的也不过是冰山一角。</p><p>现在大家已经可以自己写代码对网页进行简单分析了。下一节我打算介绍关于WinHTTP的内容和用途。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 颓废 </tag>
            
            <tag> 项目 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目日记 - 开发图片爬虫 Ⅰ</title>
      <link href="/2019-05/26-spiking1/"/>
      <url>/2019-05/26-spiking1/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个项目很久前就开始写了，但一直没有很完善。最近想起来，打算重新完善这个项目。</p><p>本教程仅适用于C++。如果观看效果不佳，可点击右下方折叠目录。内容较为复杂，可以根据自己需要来阅读。</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>做一个项目，首先需要知道你的目标是什么。这个项目名为图片爬虫，当然是为了下载图片。</p><p>再具体一点，用户先给出一个网址，我们先保存网页，抓取网页上的图片链接和其他网址链接。然后保存每一张图片到用户设置的文件夹中。深入其他网址链接，循环这一步骤。</p><p>那么我们去爬一个图片网站，就可以找到很多好（<del>康</del>）看的图片了。</p><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>先了解爬虫的定义，如下：</p><blockquote><p>网络爬虫（英语：web crawler），也叫网络蜘蛛（spider），是一种用来自动浏览万维网的网络机器人。其目的一般为编纂网络索引。</p></blockquote><p>对于这个东西我还想补充一下，爬虫操作不当可能是违法的，但对于我们这些小项目来说，请求服务器资源的速度一般达不到攻击服务器的要求。爬虫有一个国际互联网界通行的道德规范，名叫robots协议，有兴趣可以去了解一下。我们就先不管那么多，还是技术更要紧些，不干扰网站正常运行就行了。</p><p>那么如何去开发呢？我们目的很明确，所以大概分为几个步骤。我制作了一个流程图来演示：<br><img src="/images/spiKing2.png" alt="项目流程图"></p><p>现在对每个步骤进行解释，先设置爬取的网站，这个很简单。第一个要实现的就是如何获取网页，关于这个我做一个较为详细的理论说明。</p><p>关于用C++实现获取网页内容，我所知有两种方法，使用Winsock或WinInet。相信大家对这两个东西一定有所了解，不了解的可以细读定义。</p><p>先大致了解Winsock的定义：</p><blockquote><p>Windows Sockets API (WSA), 简短记为Winsock, 是Windows的TCP/IP网络编程接口（API）。</p></blockquote><p>具体是什么可以再自行了解，我这个项目选择使用的是WinInet。</p><blockquote><p>WinInet（“Windows Internet”）API帮助程序员使用三个常见的Internet协议，这三个协议是用于World Wide Web万维网的超文本传输协议（HTTP：Hypertext Transfer Protocol）、文件传输协议（FTP：File Transfer Protocol）和另一个称为Gopher的文件传输协议。WinInet函数的语法与常用的Win32 API函数的语法类似，这使得使用这些协议就像使用本地硬盘上的文件一样容易。</p></blockquote><p>定义中已经说了，这个API非常容易使用，这也是我为什么选择使用它。</p><p>再补充一下，我最近又查阅到了第三种方法，使用WinHTTP。我会在以后的章节对它进行详细的说明。相比而言，它其实更适合对网页的操作。定义：</p><blockquote><p>Microsoft Windows HTTP Services(WinHTTP)为开发者提供了HTTP客户端应用程序编程接口(API)，用于通过HTTP协议向其他HTTP服务器发送请求。</p></blockquote><p>在官方有WinHTTP与WinInet的对比，如果用简短的话来说明他俩的关系，那就是：</p><blockquote><p>除了少数例外，WinInet是WinHTTP的超集。在两者之间进行选择时，应使用WinInet，除非您计划在需要模拟和会话隔离的服务或类似服务的进程中运行。</p></blockquote><p>如果还想了解更多WinInet与WinHTTP的区别，可以看<a href="https://docs.microsoft.com/zh-cn/windows/desktop/wininet/wininet-vs-winhttp" target="_blank" rel="noopener">官方英文文档</a>。</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>相信大家已经对这些东西都有了大致了解，那么就开始写代码了。输入网址的主程序代码就不给出了，我先放出获取页面的代码实例，是从网上找到并改编之后的。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;wininet.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXBLOCKSIZE 1024 * 1024</span><span class="token keyword">void</span> <span class="token function">downloadUrl</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>Url<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>FilePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> byte Temp<span class="token punctuation">[</span>MAXBLOCKSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    HINTERNET hSession<span class="token operator">=</span> <span class="token function">InternetOpenA</span><span class="token punctuation">(</span><span class="token string">"DownloadKit"</span><span class="token punctuation">,</span> INTERNET_OPEN_TYPE_PRECONFIG<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hOpenUrl<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hSession <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        hOpenUrl<span class="token operator">=</span> <span class="token function">InternetOpenUrlA</span><span class="token punctuation">(</span>hSession<span class="token punctuation">,</span> Url<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> INTERNET_FLAG_DONT_CACHE<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hOpenUrl <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> fail<span class="token punctuation">;</span>        FILE <span class="token operator">*</span>stream<span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>FilePath<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ULONG Number<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>Number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">InternetReadFile</span><span class="token punctuation">(</span>hOpenUrl<span class="token punctuation">,</span> Temp<span class="token punctuation">,</span> MAXBLOCKSIZE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fwrite</span><span class="token punctuation">(</span>Temp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hOpenUrl<span class="token punctuation">)</span> <span class="token function">InternetCloseHandle</span><span class="token punctuation">(</span>hOpenUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hSession<span class="token punctuation">)</span> <span class="token function">InternetCloseHandle</span><span class="token punctuation">(</span>hSession<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>fail<span class="token operator">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hOpenUrl<span class="token punctuation">)</span> <span class="token function">InternetCloseHandle</span><span class="token punctuation">(</span>hOpenUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hSession<span class="token punctuation">)</span> <span class="token function">InternetCloseHandle</span><span class="token punctuation">(</span>hSession<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Internet Error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>先大致说明一下函数参数，Url为你想下载网页的网址，filePath为保存到电脑的路径。</p><p>你可以找一个网址，选一个存文件的路径，调用函数并编译，你会发现这段代码是无法通过编译的，因为还需要连接静态链接库。</p><p>如果使用Visual Studio，需要在函数之前加入以下这句，并且忽略编号为4996的警告。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(lib, "wininet.lib")</span></code></pre><p>如果使用MinGW，需要添加编译命令来/MinGW64/lib/libwininet.a文件。如果使用DevC++还可以通过项目属性来添加，这里不作细说。如果遇到了其他困难可以下方留言，我将会在第一时间解答。</p><h4 id="InternetOpenA"><a href="#InternetOpenA" class="headerlink" title="InternetOpenA"></a>InternetOpenA</h4><p>先来讲解InternetOpenA函数。这个是我头文件里的定义。如果你使用Unicode遍码就改成InternetOpenW，用法类似。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token function">INTERNETAPI_</span><span class="token punctuation">(</span>HINTERNET<span class="token punctuation">)</span> <span class="token function">InternetOpenA</span><span class="token punctuation">(</span>    _In_opt_ LPCSTR lpszAgent<span class="token punctuation">,</span>    _In_ DWORD dwAccessType<span class="token punctuation">,</span>    _In_opt_ LPCSTR lpszProxy<span class="token punctuation">,</span>    _In_opt_ LPCSTR lpszProxyBypass<span class="token punctuation">,</span>    _In_ DWORD dwFlags    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><em>lpszAgent</em>指向一个空结束的字符串，用来设置UserAgent。对于我们用处不大，可以随意设置。</p><p><em>dwAccessType</em>指定访问类型，用于是否使用代理或注册表配置。我们选择使用IE代理，如果想设置代理服务器则使用INTERNET_OPEN_TYPE_PROXY。数值表：</p><table><thead><tr><th>数值</th><th>说明</th></tr></thead><tbody><tr><td>INTERNET_OPEN_TYPE_DIRECT</td><td>使用直接连接网络。</td></tr><tr><td>INTERNET_OPEN_TYPE_PRECONFIG</td><td>获取代理或直接从注册表中的配置，使用代理连接网络。</td></tr><tr><td>INTERNET_OPEN_TYPE_PRECONFIG_WITH_NO_AUTOPROXY</td><td>获取代理或直接从注册表中的配置，并防止启动Microsoft JScript或Internet设置（INS）文件的使用。</td></tr><tr><td>INTERNET_OPEN_TYPE_PROXY</td><td>通过代理的请求，除非代理旁路列表中提供的名称解析绕过代理,在这种情况下，该功能的使用。</td></tr></tbody></table><p><em>lpszProxy</em>指向一个空结束的字符串，该字符串指定的代理服务器的名称，我们此参数应该设置为NULL。设置代理还要在这里深入研究，由于比较麻烦，我们先不去了解了。</p><p><em>lpszProxyBypass</em>指向一个空结束的字符串，该字符串指定的可选列表的主机名或IP地址。我们此参数也设置为NULL。</p><p><em>dwFlags</em>是设定一些要求的，值可以组合组合，我们设置为0。数值表：</p><table><thead><tr><th>数值</th><th>说明</th></tr></thead><tbody><tr><td>INTERNET_FLAG_ASYNC</td><td>使异步请求处理的后裔从这个函数返回的句柄。</td></tr><tr><td>INTERNET_FLAG_FROM_CACHE</td><td>不进行网络请求，从缓存返回的所有实体，如果请求的项目不在缓存中，则返回一个合适的错误，如ERROR_FILE_NOT_FOUND。</td></tr><tr><td>INTERNET_FLAG_OFFLINE</td><td>同INTERNET_FLAG_FROM_CACHE。</td></tr></tbody></table><p><em>Return Value</em>即返回值是一个HINTERNET句柄，用于接下来的WinINet函数。计算机正常且函数参数规范的情况下，都能够成功返回。如果返回NULL就是失败了，那么请检查自己的参数。</p><h4 id="InternetOpenUrlA"><a href="#InternetOpenUrlA" class="headerlink" title="InternetOpenUrlA"></a>InternetOpenUrlA</h4><p>接下来就是用于打开网页的InternetOpenA函数了，如果使用Unicode编码请改为InternetOpenUrlW。</p><p>相比而言，这个函数参数比较多。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token function">INTERNETAPI_</span><span class="token punctuation">(</span>HINTERNET<span class="token punctuation">)</span> <span class="token function">InternetOpenUrlA</span><span class="token punctuation">(</span>    _In_ HINTERNET hInternet<span class="token punctuation">,</span>    _In_ LPCSTR lpszUrl<span class="token punctuation">,</span>    <span class="token function">_In_reads_opt_</span><span class="token punctuation">(</span>dwHeadersLength<span class="token punctuation">)</span> LPCSTR lpszHeaders<span class="token punctuation">,</span>    _In_ DWORD dwHeadersLength<span class="token punctuation">,</span>    _In_ DWORD dwFlags<span class="token punctuation">,</span>    _In_opt_ DWORD_PTR dwContext    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><em>hInternet</em>为当前的Internet会话句柄，也就是我们刚刚使用InternetOpen 函数返回的句柄。</p><p><em>lpszUrl</em>指向一个空结束的字符串，用于指定读取的网址。非常容易理解。</p><p><em>lpszHeaders</em>指向一个空结束的字符串，指定发送到HTTP服务器的头信息。我们不必做过多了解，设为NULL即可。</p><p><em>dwHeadersLength</em>指定的长度，字符，额外的标头。对于我们说也没什么用，设为0即可。</p><p><em>dwFlags</em>设定一些要求，我们设置的INTERNET_FLAG_NO_CACHE，与INTERNET_FLAG_NO_CACHE_WRITE有相同作用。有较多数值，可以了解后选择其中一个。数值表：</p><table><thead><tr><th>数值</th><th>说明</th></tr></thead><tbody><tr><td>INTERNET_FLAG_EXISTING_CONNECT</td><td>如果使用相同的必须属性创建会话，会尝试利用现有的InternetConnect对象。这只对FTP操作非常有用，因为FTP是唯一在同一会话中执行多种操作的协议。WinINet API 为每个由InternetOpen产生的HINTERNET句柄缓冲一个单独链接句柄。InternetOpenUrl使用此标志的HTTP和FTP连接。</td></tr><tr><td>INTERNET_FLAG_HYPERLINK</td><td>当决定何时从网络重载时，如果服务器没有返回 Expires time 和 LastModified，那么强制重载。</td></tr><tr><td>INTERNET_FLAG_IGNORE_CERT_CN_INVALID</td><td>停用检查从服务器对必须的主机名称返回的SSL/PCT-based证书。 WinINet函数使用简单的比较匹配主机名称和通配符的规则检查证书。</td></tr><tr><td>INTERNET_FLAG_IGNORE_CERT_DATE_INVALID</td><td>停用检查的SSL/PCT-based的证书的适当的有效日期。</td></tr><tr><td>INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP</td><td>禁用检测这中特殊的重定向。当使用此标志， WinINet 透明允许从HTTPS到HTTP URL的重定向。</td></tr><tr><td>INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS</td><td>禁用检测这中特殊的重定向。当使用此标志， WinINet 透明的允许的HTTP到HTTPS URL的重定向。</td></tr><tr><td>INTERNET_FLAG_KEEP_CONNECTION</td><td>如果可能的话，为连接使用保活语义。这个标志要求微软网络（ MSN ），NTLM和其他类型的身份验证。</td></tr><tr><td>INTERNET_FLAG_NEED_FILE</td><td>如果要创建的文件不能被缓存，创建临时文件。</td></tr><tr><td>INTERNET_FLAG_NO_AUTH</td><td>不试图自动验证。</td></tr><tr><td>INTERNET_FLAG_NO_AUTO_REDIRECT</td><td>不自动处理HttpSendRequest中的重定向。s</td></tr><tr><td>INTERNET_FLAG_NO_CACHE_WRITE</td><td>不添加返回实体到缓存。</td></tr><tr><td>INTERNET_FLAG_NO_COOKIES</td><td>不会自动添加的Cookie头到请求，并且不自动添加返回的cookie到cookie数据库。</td></tr><tr><td>INTERNET_FLAG_NO_UI</td><td>禁用Cookie的对话框。</td></tr><tr><td>INTERNET_FLAG_PASSIVE</td><td>使用被动FTP语义。InternetOpenUrl为FTP的文件和目录使用此标志。</td></tr><tr><td>INTERNET_FLAG_PRAGMA_NOCACHE</td><td>即使代理中存在缓存副本，也强制要求由源服务器返回。</td></tr><tr><td>INTERNET_FLAG_RAW_DATA</td><td>检索的Gopher目录信息时，传回的数据作为GOPHER_FIND_DATA结构，如果检索的FTP目录信息时，作为一个WIN32_FIND_DATA结构。如果此标志没有指定，或者请求通过CERN代理创建， InternetOpenUrl返回的HTML版本的目录。</td></tr><tr><td>INTERNET_FLAG_RELOAD</td><td>从原服务器强制下载所要求的文件，对象，或目录列表，而不是从缓存下载。</td></tr><tr><td>INTERNET_FLAG_RESYNCHRONIZE</td><td>重新加载的HTTP资源，如果资源在最后一次下载后已被修改。所有FTP和Gopher资源将被重载。</td></tr><tr><td>INTERNET_FLAG_SECURE</td><td>使用安全传输语义。这次传输使用安全套字节层/专用通信技术（的SSL / PCT ），这只有在HTTP请求时有意义。</td></tr></tbody></table><p><em>dwContext</em>为指向一个变量的指针，将随着返回的句柄，一起传递给回调函数。有兴趣可以自行查阅，我们设为NULL即可。</p><p><em>Return Value</em>即返回值，若成功连接则返回一个有效的HINTERNET句柄，如果失败将放回NULL。如果失败可以使用GetLastError检索特定的错误讯息。请调用InternetGetLastResponseInfo确定为什么对服务器的访问被拒绝，这些函数大家有兴趣可以查阅更多资料来了解。</p><h4 id="FILE"><a href="#FILE" class="headerlink" title="FILE"></a>FILE</h4><p>这一步就不作过多讲解了，只简单介绍这几个函数。</p><p>fopen用来打开文件，返回文件指针。</p><pre class=" language-cpp"><code class="language-cpp">FILE <span class="token operator">*</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> path<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>fwrite用于向文件中写入一个数据块，可以看实际代码自行理解。</p><pre class=" language-cpp"><code class="language-cpp">size_t <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> ptr<span class="token punctuation">,</span> size_t size<span class="token punctuation">,</span> size_t count<span class="token punctuation">,</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>fclose用于关闭一个流。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">fclose</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h4 id="InternetReadFile"><a href="#InternetReadFile" class="headerlink" title="InternetReadFile"></a>InternetReadFile</h4><p>InternetReadFile的官方定义为，从一个由InternetOpenUrl，FtpOpenFile或HttpOpenRequest函数打开的句柄中读取数据。我们使用它来将网页上的内容保存到一个字符数组中。</p><p>InternetReadFile函数每次获取的内容长度有限，所以应多次调用，直到全部获取完毕。</p><pre class=" language-cpp"><code class="language-cpp">BOOLAPI <span class="token function">InternetReadFile</span><span class="token punctuation">(</span>    _In_ HINTERNET hFile<span class="token punctuation">,</span>    <span class="token function">_Out_writes_bytes_</span><span class="token punctuation">(</span>dwNumberOfBytesToRead<span class="token punctuation">)</span> <span class="token function">__out_data_source</span><span class="token punctuation">(</span>NETWORK<span class="token punctuation">)</span> LPVOID lpBuffer<span class="token punctuation">,</span>    _In_ DWORD dwNumberOfBytesToRead<span class="token punctuation">,</span>    _Out_ LPDWORD lpdwNumberOfBytesRead    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><em>hFile</em>为InternetOpenUrl，FtpOpenFile或HttpOpenRequest函数返回的句柄。我们使用InternetOpenUrl获得的HINTERNET句柄。</p><p><em>lpBuffer</em>为指向缓冲器的指针。因此我们需要定义一个字符数组，然后将它作为参数。</p><p><em>dwNumberOfBytesToRead</em>为要读取的字节数。这个需要根据自己的网络情况，我使用的为1024 * 1024，也就是1M。</p><p><em>lpdwNumberOfBytesRead</em>为接收读取字节量的变量。我们用它来判断是否将网页内容全部获取完毕。</p><p><em>Return Value</em>即返回值，成功为TRUE，失败为FALSE。若失败可用GetLastError查看更多错误信息。</p><h4 id="InternetCloseHandle"><a href="#InternetCloseHandle" class="headerlink" title="InternetCloseHandle"></a>InternetCloseHandle</h4><p>到这，获取网页的代码基本完工了。但做事应善始善终，那些句柄占用的资源还需要释放。InternetCloseHandle函数用来关闭一个Internet句柄。</p><pre class=" language-cpp"><code class="language-cpp">BOOLAPI <span class="token function">InternetCloseHandle</span><span class="token punctuation">(</span>    _In_ HINTERNET hInternet    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><em>hInternet</em>为要关闭的句柄。我们要依次关闭那俩个HINTERNET句柄。</p><p><em>Return Value</em>即返回值，成功为TRUE，失败为FALSE。若失败可用GetLastError查看更多错误信息。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>其实获取网页内容的代码是非常简单的，然而其中还蕴含着许许多多的知识。这段代码不仅可以获取网页，也可以用来获取图片或其他格式的文件。</p><p>这段函数下载后一般为Unicode编码文件，下一节我将讲解如何将它转换为ASCII编码。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 颓废 </tag>
            
            <tag> 项目 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuoguP5145 - 漂浮的鸭子</title>
      <link href="/2019-05/22-luogu5145/"/>
      <url>/2019-05/22-luogu5145/</url>
      
        <content type="html"><![CDATA[<p>题目链接: <a href="https://www.luogu.org/problemnew/show/P5145" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P5145</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近颓的东西太多了, 终于又来做搜索题.</p><p><del>这题很水</del> 随手交了个暴力随机化就A了.</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题正解思路非常妙, 代码比较短. 但我们能不能想一个更简单粗暴的方法呢?</p><p>先交一下能被卡成接近 $ O(n^2) $ 的暴力, 对于每一个点跑一遍DFS, 如果能回到此点就更新答案, 再加一个玄学剪枝, 将这个环上所有点打标记, 这些点就不用再DFS了.</p><p>开O2只有50分</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// luogu-judger-enable-o2</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> tox<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> toy<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rex<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmpx<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> walkpast<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lw<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>walkpast<span class="token punctuation">,</span> lw<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>walkpast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> to<span class="token operator">=</span> nown<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>walkpast<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        walkpast<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        sum<span class="token operator">+</span><span class="token operator">=</span> toy<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token operator">=</span> tox<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to <span class="token operator">!=</span> nown<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>lw<span class="token punctuation">,</span> walkpast<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>walkpast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ans<span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> tox<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> toy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rex<span class="token punctuation">[</span>tox<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>walkpast<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>考虑优化, 其实复杂度是可以玄学过去的 <del>先把cin换成scnaf</del>.</p><p>然后我加了判断有环, 但此点不在环上的一个小剪枝.</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">if</span><span class="token punctuation">(</span>to <span class="token operator">!=</span> nown<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lw<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>通俗一点讲, 让以后到达这个点的鸭子都知道自己的水坑不在环里就不用继续搜了.</p><p>要是还T怎么办, 那改一下搜索顺序说不定就A了, 为了防止从 N 到 1 一条链卡暴力的情况, 我选择随机起点, 再加一个卡时限.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> tox<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> toy<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rex<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmpx<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> walkpast<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lw<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>walkpast<span class="token punctuation">,</span> lw<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>walkpast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> to<span class="token operator">=</span> nown<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>walkpast<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        walkpast<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        sum<span class="token operator">+</span><span class="token operator">=</span> toy<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token operator">=</span> tox<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to <span class="token operator">!=</span> nown<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lw<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>lw<span class="token punctuation">,</span> walkpast<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>walkpast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ans<span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> tox <span class="token operator">+</span> i<span class="token punctuation">,</span> toy <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> rex<span class="token punctuation">[</span>tox<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> CLOCKS_PER_SEC <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmpx<span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>walkpast<span class="token punctuation">[</span>tmpx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 随机化搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2014 - 起床困难综合症</title>
      <link href="/2019-04/27-luogu2114/"/>
      <url>/2019-04/27-luogu2114/</url>
      
        <content type="html"><![CDATA[<p>题目链接1: <a href="https://www.luogu.org/problemnew/show/P2114" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2114</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3668" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3668</a><br>题目链接3: <a href="http://uoj.ac/problem/2" target="_blank" rel="noopener">http://uoj.ac/problem/2</a><br>题目链接4: <a href="https://vijos.org/p/1864" target="_blank" rel="noopener">https://vijos.org/p/1864</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用了一个原创的做法, 模拟配合搜索, 非常玄学的过了这道题. 好像还没有这种做法的题解.</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题意比较好理解, 当我看到这句话:</p><blockquote><p>最终受到的伤害为对方初始攻击力x依次经过所有n扇防御门后转变得到的攻击力</p></blockquote><p>依次经过N扇门是重点, 大大降低了这道题的难度. </p><p>由此想到最为暴力的方法, 从1到M枚举每一个数, 然后模拟N个操作, 算出每个数最后的伤害取个最大. 复杂度$ O(NM) $ 太大了.</p><p>然后考虑到位运算的性质, 我们只需要求出每一个二进制位上的变化就行了, 然后再把这些位组合起来, 求出一个初始不大于M但最终最大的数. 这个组合可以用搜索, 复杂度大概是 $ O(N \log t + t) $</p><p>看数据范围, $\log t$ 比30小, 我使用一个数组$ num[31][2] $, 第一维代表二进制的位数, 第二维代表初始为 0 还是 1, 初始化这个数组.</p><p>然后可以$ O(n \log t) $ 在线预处理, 直接模拟就行了. 预处理后的num数组就是每一个二进制位的变化. </p><p>然后就是求最终那个数, 因为M不是一个二的次幂, 所以不能循环求解, 但是可以用搜索.</p><p>如果学过01Trie, 上面的操作可以和它很相似, 求异或最大和本题的搜索的思路也类似. 然后加个条件判断和最优化剪枝就能完美通过本题了.</p><p>然后开int貌似会炸, 需要开long long, 但是最终答案应该是不会超int.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>未吸氧评测详情: Accepted  100</p><p>用时: 371ms / 内存: 932KB</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;limits.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> int long long</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> tmpx<span class="token punctuation">,</span> num<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> tmps<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">,</span> <span class="token keyword">int</span> total<span class="token punctuation">,</span> <span class="token keyword">int</span> tmpans<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>total <span class="token operator">></span> m <span class="token operator">||</span> tmpans <span class="token operator">&lt;=</span> ans<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nown <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans<span class="token operator">=</span> tmpans<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>nown <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> total<span class="token punctuation">,</span> tmpans <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> nown<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>nown <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> total <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> nown<span class="token punctuation">)</span><span class="token punctuation">,</span> tmpans <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> nown<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">31</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> tmps <span class="token operator">>></span> tmpx<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">31</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> ch<span class="token operator">=</span> <span class="token punctuation">(</span>tmpx <span class="token operator">>></span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'A'</span><span class="token punctuation">)</span>                num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token operator">=</span> ch<span class="token punctuation">,</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token operator">=</span> ch<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tmps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'O'</span><span class="token punctuation">)</span>                num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token operator">=</span> ch<span class="token punctuation">,</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token operator">=</span> ch<span class="token punctuation">;</span>            <span class="token keyword">else</span>                num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token operator">=</span> ch<span class="token punctuation">,</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token operator">=</span> ch<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2003 - 传染病控制</title>
      <link href="/2019-04/24-luogu1041/"/>
      <url>/2019-04/24-luogu1041/</url>
      
        <content type="html"><![CDATA[<p>题目链接: <a href="https://www.luogu.org/problemnew/show/P1041" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1041</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这道题正解搜索, 然而可能有一些同学和我一样一开始觉得能用DP做的…推完递推式, 打完DP只有40, 然后也没有找出错误. 我这篇题解主要就来说一下这个DP的思路和错误.</p><p>如果你已经懂了DFS思路, 可以理解一下错误DP的思想, 如果看不出错误, 很可能是你对这个题的题意还不够清楚.</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先建图, 是以1节点为根的一棵树.</p><p>我们开一个一维数组f, 下标代表节点编号. 记录传染到这个点最少再传染给几个人.</p><p>我们分类讨论, 先不考虑儿子节点还会继续传染的情况. 如果这个点没有儿子或者只有一个儿子, 那么最少再传染0个人. 否则传染节点数就是儿子数 - 1.</p><p>如果儿子节点还会继续传染, 那么我们就切断求出的f值最大的那个.</p><p>$$ f[now] = (\sum_i^{i∈sons[now]}f[i] + 1) - (\max_i^{i∈sons[now]}f[i]) - 1 $$<br>这个式子我实在不会写的更好了, sons代表节点的所有儿子.</p><p>看懂的话应该很快就能发现DP的错误在哪.结合这两个说明:</p><blockquote><p>这种疾病的传播有周期性，在一个疾病传播周期之内，传染病将只会感染一代患者，而不会再传播给下一代</p></blockquote><blockquote><p>以致他们在一个疾病传播周期内，只能设法切断一条传播途径</p></blockquote><p>单独看好像还是找不出这个DP的错误.然后我给出一张图.</p><p><img src="/images/P1041_1.png" alt="Example"></p><p>正解应该是4, 然后DP竟跑出更优解3…其实是因为他在同一个疾病传播周期内切断了两条.DP将会先切断2, 然后切断7和8. 然而7和8在同一个传播周期内, 所以不能同时切断.</p><p>这就是DP的错误, 不符合题目要求. 然后就只能考虑搜索, 因为DP的启发, 就很容易想到按深度来搜索了.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>错误DP代码(40分):</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> sums<span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">301</span><span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span><span class="token number">301</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edptr<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> tmpx<span class="token punctuation">,</span> tmpy<span class="token punctuation">;</span><span class="token keyword">struct</span> edge <span class="token punctuation">{</span>    <span class="token keyword">int</span> to<span class="token punctuation">,</span> nexty<span class="token punctuation">;</span><span class="token punctuation">}</span> eds<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    eds<span class="token punctuation">[</span>edptr<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token operator">=</span> b<span class="token punctuation">,</span> eds<span class="token punctuation">[</span>edptr<span class="token punctuation">]</span><span class="token punctuation">.</span>nexty<span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span> edptr<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sons<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxs<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tot<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> head<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nexty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        to<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">dp</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> nown<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>sons<span class="token punctuation">,</span> maxs<span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxs<span class="token punctuation">,</span> f<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tot<span class="token operator">+</span><span class="token operator">=</span> f<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sons <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token operator">=</span> tot <span class="token operator">-</span> maxs <span class="token operator">+</span> sons <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> p<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> tmpx <span class="token operator">>></span> tmpy<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> tmpy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>tmpy<span class="token punctuation">,</span> tmpx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>正解搜索代码(100分):</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> head<span class="token punctuation">[</span><span class="token number">301</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edptr<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> tmpx<span class="token punctuation">,</span> tmpy<span class="token punctuation">;</span><span class="token keyword">struct</span> edge <span class="token punctuation">{</span>    <span class="token keyword">int</span> to<span class="token punctuation">,</span> nexty<span class="token punctuation">;</span><span class="token punctuation">}</span> eds<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    eds<span class="token punctuation">[</span>edptr<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token operator">=</span> b<span class="token punctuation">,</span> eds<span class="token punctuation">[</span>edptr<span class="token punctuation">]</span><span class="token punctuation">.</span>nexty<span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span> edptr<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> dep<span class="token punctuation">[</span><span class="token number">301</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">301</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cutd<span class="token punctuation">[</span><span class="token number">301</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span> <span class="token keyword">int</span> <span class="token operator">></span> node<span class="token punctuation">[</span><span class="token number">302</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cutd<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> head<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nexty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        to<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to <span class="token operator">!=</span> f<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">cut</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dep<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token operator">=</span> dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token operator">=</span> fa<span class="token punctuation">;</span>    node<span class="token punctuation">[</span>dep<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nown<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> head<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nexty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        to<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to <span class="token operator">!=</span> fa<span class="token punctuation">)</span> <span class="token function">dfs1</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> nown<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> ans<span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> deep<span class="token punctuation">,</span> <span class="token keyword">int</span> cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cost <span class="token operator">>=</span> ans<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> notsolve<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>node<span class="token punctuation">[</span>deep<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cutd<span class="token punctuation">[</span>node<span class="token punctuation">[</span>deep<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>notsolve<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>notsolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans<span class="token operator">=</span> cost<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>node<span class="token punctuation">[</span>deep<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cutd<span class="token punctuation">[</span>node<span class="token punctuation">[</span>deep<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">cut</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>deep<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs2</span><span class="token punctuation">(</span>deep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cost <span class="token operator">+</span> notsolve <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">cut</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>deep<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> p<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> tmpx <span class="token operator">>></span> tmpy<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> tmpy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>tmpy<span class="token punctuation">,</span> tmpx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AT2657 - Mole and Abandoned Mine</title>
      <link href="/2019-04/22-luoguat2657/"/>
      <url>/2019-04/22-luoguat2657/</url>
      
        <content type="html"><![CDATA[<p>题目链接1: <a href="https://www.luogu.org/problemnew/show/AT2657" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/AT2657</a><br>题目链接2: <a href="https://www.luogu.org/jump/atcoder/2657" target="_blank" rel="noopener">https://www.luogu.org/jump/atcoder/2657</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>时隔一月, 我又回来了写题解了. </p><p>以后可能颓的时间会变少. 现在文化课好像更重要些, 还是要专心学习吧. </p><p>本题是一个状压练手好题.</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我再大致翻译描述一下题目, 我一开始因为没看样例就理解错了.</p><p>本题给出N点M边的无向图, 然后要割掉其中一些边, 使从1到N只有一条不经过重复顶点的边, 求删掉的边的边权和最小.</p><blockquote><p>重点是这条路径不需要经过所有点</p></blockquote><p>看数据范围, 只可能是状压或者暴力搜索, 然而难度说明只能是状压了.</p><p>很容易想到, 求删边边权最少, 相当于求留下边的边权和最大.</p><p>然而我没有想到具体怎么求, 搜到了一个<a href="https://www.cnblogs.com/lcxer/p/10719030.html" target="_blank" rel="noopener">大佬的题解</a>, 最终的图还有一个重要性质:</p><blockquote><p>每个点最多只与保留下来的那条路径上的一个点有边相连</p></blockquote><p>所以我们先预处理出所有的联通块中的边权和.</p><p>然后进行DP, 二维数组, 第一维为处理了哪些点, 第二维为到达哪个点(当前终点).</p><p>有两种转移, 一种是新处理一个点, 一种是将一个联通块与当前终点相连.</p><p>我从这道题还学习了一个新的二进制性质.枚举一个数二进制下的所有子集:</p><pre><code>int num = 59; // 某个数for(int i= num; i; i= (i - 1) &amp; num) {    // i 为 num 的一个二进制子集}</code></pre><p>比如（0101）的子集为（0101）,（0100）,（0001）,（0000）.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmpx<span class="token punctuation">,</span> tmpy<span class="token punctuation">,</span> tmpz<span class="token punctuation">,</span> sums<span class="token punctuation">;</span><span class="token keyword">int</span> blocks<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    nn<span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> tmpx <span class="token operator">>></span> tmpy <span class="token operator">>></span> tmpz<span class="token punctuation">;</span>        sums<span class="token operator">+</span><span class="token operator">=</span> edge<span class="token punctuation">[</span>tmpx<span class="token punctuation">]</span><span class="token punctuation">[</span>tmpy<span class="token punctuation">]</span><span class="token operator">=</span> edge<span class="token punctuation">[</span>tmpy<span class="token punctuation">]</span><span class="token punctuation">[</span>tmpx<span class="token punctuation">]</span><span class="token operator">=</span> tmpz<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nn<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>blocks<span class="token punctuation">[</span>i <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                blocks<span class="token punctuation">[</span>i <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span> blocks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> blocks<span class="token punctuation">[</span>i <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span> edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nn<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tmpx<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nn <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> i<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span> tmpx<span class="token punctuation">;</span> k<span class="token punctuation">;</span> k<span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> tmpx<span class="token punctuation">)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i <span class="token operator">|</span> k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">|</span> k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> blocks<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> sums <span class="token operator">-</span> f<span class="token punctuation">[</span>nn <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 状压DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2015 - 程序自动分析</title>
      <link href="/2019-03/31-luogu1955/"/>
      <url>/2019-03/31-luogu1955/</url>
      
        <content type="html"><![CDATA[<p>题目链接1: <a href="https://www.luogu.org/problemnew/show/P1955" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1955</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4195" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4195</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>最近变得越来越颓废. 介于好长时间没更新博客, 强行水一篇题解.</p><p>这道题没看题解15分钟就A了, 真的有点水了…</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题意大概就是有 N 个关系, 每个代表X1 = X2 或者 X1 ≠ X2, 求出这些关系能不能成立.</p><p>很容易就想到并查集, 先将相等的X合并, 然后判断不等关系的两个变量在不在一个并查集里就行了.那么就只需要排下序, 先进行合并操作再去判断.</p><p>判断不等关系过程中发现X1和X2在同一个并查集里, 那直接输出NO就行了.</p><p>然而X的下标可能会很大. 所以考虑离散化, 那么肯定直接上map.</p><p>输入的时候就离散化, 然后排个序, 打完合并和查询就AC了.</p><p>不过map常数巨大, 需要开O2稳过.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>评测详情（O2）:<br>Accepted  100<br>用时: 1623ms / 内存: 11960KB</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">200001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mptr<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> flag<span class="token punctuation">;</span><span class="token keyword">struct</span> date <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> d<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> date <span class="token operator">&amp;</span>d2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> d <span class="token operator">></span> d2<span class="token punctuation">.</span>d<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> dat<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>map<span class="token operator">&lt;</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">></span> m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        mptr<span class="token operator">=</span> cnt<span class="token operator">=</span> flag<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> m<span class="token punctuation">[</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">++</span>mptr<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> m<span class="token punctuation">[</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">++</span>mptr<span class="token punctuation">;</span>            dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span> m<span class="token punctuation">[</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span> m<span class="token punctuation">[</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>            cnt<span class="token operator">+</span><span class="token operator">=</span> dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>dat <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dat <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> mptr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> fx<span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span><span class="token function">query</span><span class="token punctuation">(</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span> fx<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">query</span><span class="token punctuation">(</span>dat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 并查集 </tag>
            
            <tag> STL </tag>
            
            <tag> 离散化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2005 - 智慧珠游戏</title>
      <link href="/2019-03/17-luogu4205/"/>
      <url>/2019-03/17-luogu4205/</url>
      
        <content type="html"><![CDATA[<p>题目链接1: <a href="https://www.luogu.org/problemnew/show/P4205" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4205</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1501" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=1501</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>最近忙于各种事, 又有十天没写题解了, 好像这十天又变颓废了好多</p><p>实在学习不下去很酷很炫的算法, 特意找搜索模拟等类题, 然后看到了这道题</p><p>做题的时候教练还在说:”不要看不起搜索…”</p><p>然后因为看我做这道题, 旁边的大佬还作了一首诗</p><pre><code>生命诚可贵搜索价更高若为暴力故二者皆可抛    --Steve_Braveman</code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我就直接把题目描述的图搬过来了</p><p><img src="https://www.lydsy.com/JudgeOnline/images/1501_1.jpg" alt="题目描述"></p><p>一眼看上去就直接劝退, 当然其实也没那么严重, 好像还是可做的</p><p>具体分析一下这道题, 所有的零件都允许旋转和翻转, 那么每种零件都有多种放置的方法</p><p>所以我们就可以画一下不同的方法, 可以在草稿纸上或者上画图</p><p>为了区别什么是不同的摆放方法, 就要确定搜索的方式, 我们枚举每一个点, 如果这个点当前没有被覆盖过, 那么我们就可以选择当前剩余的零件进行判断.</p><p>我选择零件最左上角的那个珠子来填当前这个点, 因此有这些种不同的摆放方式</p><pre><code>A: 4种B: 2种C: 8种D: 1种E: 4种F: 8种G: 4种H: 8种I: 8种J: 1种K: 4种L: 8种</code></pre><p>加起来的确有很多种, 然后就开始写DFS了.</p><p>我写的还是比较暴力的, 暴力模拟, 只做了一些小的技巧.</p><p>在某次DFS种, 第一次判断某条件时就把他以一个变量存起来, 起一个较为直观的变量名, 然后等下次判断就可以直接判断这个变量了.</p><p>写的时候得有耐心, 确实是有想死的感觉.</p><p>写完后, 你还是AC不了这道题, 会有一个点TLE. </p><p>这个点是No solution…我先选择了卡时限, 到0.95s之后就输出无解</p><p>但是事实证明不可行, 因为clock函数效率不高, 许多点的耗时飙升, 并导致另一个本来有解的却输出了无解…</p><p>然后就考虑卡DFS次数, 我在本地试了一下, 10000000就不会错判无解了, 然后提交AC了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>注释中A1代表A零件的第1种摆放方法, 以此类推</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> chose<span class="token punctuation">[</span><span class="token number">126</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span><span class="token keyword">char</span> tmc<span class="token punctuation">,</span> inits<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">getlimit</span><span class="token punctuation">(</span><span class="token keyword">int</span> nowx<span class="token punctuation">,</span> <span class="token keyword">int</span> nowy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> nowx <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nowx <span class="token operator">&lt;</span> <span class="token number">11</span> <span class="token operator">&amp;&amp;</span> nowy <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nowy <span class="token operator">&lt;</span> nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> nowx<span class="token punctuation">,</span> <span class="token keyword">int</span> nowy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>cnt <span class="token operator">></span> <span class="token number">10000000</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nowx <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nowy <span class="token operator">==</span> nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rdown<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> down<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nowy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dleft<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// A1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// A2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// A3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// A4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ddown<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> nowy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dddown<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> nowy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rright<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rrright<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// B1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// B2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> rrright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> rddown<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dlleft<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> drright<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ddleft<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// C1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> down<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// C2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> rddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// C3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> dlleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// C4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> rddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// C5</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// C6</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> ddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// C7</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> drright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// C8</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> ddleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'D'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// D1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> rdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'D'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'D'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'D'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ddrright<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ddlleft<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// E1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> rddown <span class="token operator">&amp;&amp;</span> ddrright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// E2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> ddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// E3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> drright <span class="token operator">&amp;&amp;</span> ddrright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// E4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> ddleft <span class="token operator">&amp;&amp;</span> ddlleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// F1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> rrright <span class="token operator">&amp;&amp;</span> rdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// F2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dddown <span class="token operator">&amp;&amp;</span> dleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// F3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> dlleft <span class="token operator">&amp;&amp;</span> rdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// F4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dddown <span class="token operator">&amp;&amp;</span> rddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// F5</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// F6</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> ddleft <span class="token operator">&amp;&amp;</span> dddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// F7</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> drright <span class="token operator">&amp;&amp;</span> rrright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// F8</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'G'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// G1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> drright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// G2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> rddown <span class="token operator">&amp;&amp;</span> ddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// G3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright <span class="token operator">&amp;&amp;</span> rright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// G4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> rddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'G'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'G'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'H'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'H'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// H1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> rdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// H2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> rddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// H3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> dleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// H4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> rddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// H5</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// H6</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> ddleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// H7</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// H8</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> rdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'H'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> rrdright<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ddldown<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> drddown<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'I'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'I'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// I1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> drright <span class="token operator">&amp;&amp;</span> rrdright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// I2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> ddleft <span class="token operator">&amp;&amp;</span> ddldown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// I3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright <span class="token operator">&amp;&amp;</span> rrdright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// I4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> ddleft <span class="token operator">&amp;&amp;</span> ddldown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// I5</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> dlleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// I6</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> rddown <span class="token operator">&amp;&amp;</span> drddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// I7</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> dleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// I8</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> rddown <span class="token operator">&amp;&amp;</span> drddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'I'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'J'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'J'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'J'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// J1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> ddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'J'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'J'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'J'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'J'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'J'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'K'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'K'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// K1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> rddown <span class="token operator">&amp;&amp;</span> ddrright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// K2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> ddleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// K3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright <span class="token operator">&amp;&amp;</span> ddrright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// K4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> ddleft <span class="token operator">&amp;&amp;</span> ddlleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'K'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'K'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> dllleft<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getlimit</span><span class="token punctuation">(</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nowy <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>chose<span class="token punctuation">[</span><span class="token string">'L'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        chose<span class="token punctuation">[</span><span class="token string">'L'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// L1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> rrright <span class="token operator">&amp;&amp;</span> down<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// L2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> rddown <span class="token operator">&amp;&amp;</span> drddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// L3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> dleft <span class="token operator">&amp;&amp;</span> dlleft <span class="token operator">&amp;&amp;</span> dllleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// L4</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dddown <span class="token operator">&amp;&amp;</span> drddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// L5</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> rdown <span class="token operator">&amp;&amp;</span> drright <span class="token operator">&amp;&amp;</span> rrdright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// L6</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dddown <span class="token operator">&amp;&amp;</span> ddldown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// L7</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> rright <span class="token operator">&amp;&amp;</span> rrright <span class="token operator">&amp;&amp;</span> rrdright<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// L8</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&amp;&amp;</span> down <span class="token operator">&amp;&amp;</span> ddown <span class="token operator">&amp;&amp;</span> dddown<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>nowx<span class="token punctuation">,</span> nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">,</span> inits<span class="token punctuation">[</span>nowx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chose<span class="token punctuation">[</span><span class="token string">'L'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    inits<span class="token punctuation">[</span>nowx<span class="token punctuation">]</span><span class="token punctuation">[</span>nowy<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">>></span> inits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>inits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> chose<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>inits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span>inits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No solution\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USACO17DEC - Haybale Feast</title>
      <link href="/2019-03/07-luogu4085/"/>
      <url>/2019-03/07-luogu4085/</url>
      
        <content type="html"><![CDATA[<p>题目链接: <a href="https://www.luogu.org/problemnew/show/P4085" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4085</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>好像教练说要考线段树和树状数组, 然后看到了这个题</p><p>这道题可以练习各种数据结构的基础操作…</p><p>我就浪费了大把时间用各种算法来A这道题</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先看这个 $ \sum_{k=i}^{j} F_k \geqslant M $ </p><p>这个一眼看上去就是前缀和了.静态的话直接普通的前缀和$ O(n) $ 预处理, $ O(1) $ 查询就行了,应该是时间复杂度最低的了.</p><p>至于这个 $ max(S_i,S_{i+1},…,S_{j-1},S_j) $</p><p>维护方法就比较多了,可以用线段树,分块,ST表,我没有写树状数组,因为太麻烦了.</p><p>然后我就浪费了好多时间来用不同的算法A这道题…</p><p>这道题还有一个性质, 关于找i和j, 不需要 $ O(n^2) $ 的复杂度来枚举区间, 我给出下面这个式子</p><p>$$ max(s_i, s_{i + 1}, s_{i + 2}) &lt;=  max(s_i, s_{i + 1}, s_{i + 2}, s_{i + 3}) $$</p><p>这个式子根本不用推, 一眼看上去肯定就成立了</p><p>那么根据这个性质, 我们枚举i的值, 只需要找到一个对应的j就行了,这个j一定是满足条件且最小的那个了</p><p>满足条件只需要</p><p>$$ Sumf_j - sumf_i &gt;= m $$</p><p>注: Sumf代表f数组的前缀和</p><p>那么我们可以用 $ O(logn) $ 的复杂度二分查询这个j了</p><p>我们其实不需要自己写二分查找,根据上面的不等式,移一下项,就变成了</p><p>$$ Sumf_j  &gt;= m + sumf_i $$</p><p>然后使用STL自带的lower_bound函数就可以了</p><p>维护区间最大值我建议写ST表, 毕竟静态查询时间复杂度 $ O(1) $, 你也可以写其他的, 我竟然写了三种数据结构.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>这个代码是线段树 + 前缀和, 评测详情 418ms / 6MB </p><p>ST_Table为ST表的代码, 评测详情 328ms / 9.53MB </p><p>Sqrt为分块,实在没找到英文名, 评测详情 1049ms / 7.65MB </p><p>m 和 前缀和要开long long, 其他的可以用int, 懒得话就全部 long long 吧</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll m<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">maxi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">mini</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> PrefixSum <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// prefixsum for f</span>ll sumf<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> sumf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> sumf<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace PrefixSum</span><span class="token keyword">namespace</span> ST_Table <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// ST_Table for s</span><span class="token keyword">int</span> maxs<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _log2<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> maxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> _log2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> _log2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>_log2<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> maxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>maxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxs<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> __log2<span class="token operator">=</span> _log2<span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">maxi</span><span class="token punctuation">(</span>maxs<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>__log2<span class="token punctuation">]</span><span class="token punctuation">,</span> maxs<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> __log2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>__log2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace ST_Table</span><span class="token keyword">namespace</span> Sqrt <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// Sqrt for s</span><span class="token keyword">int</span> blocks<span class="token punctuation">,</span> maxs<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> block<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bl<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> br<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    blocks<span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span> n <span class="token operator">/</span> blocks <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> blocks <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> block<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> blocks <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> blocks <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> br<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> i <span class="token operator">*</span> blocks<span class="token punctuation">;</span>    br<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">mini</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> br<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> bl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> br<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> maxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>maxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token operator">=</span> block<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span> block<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> maxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> br<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> bl<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace Sqrt</span><span class="token keyword">namespace</span> SegmentTree <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// SegmentTree for s</span><span class="token keyword">int</span> maxs<span class="token punctuation">[</span><span class="token number">100001</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxs<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>nown <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>nown <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    maxs<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>maxs<span class="token punctuation">[</span>nown <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxs<span class="token punctuation">[</span>nown <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> ml<span class="token punctuation">,</span> <span class="token keyword">int</span> mr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ml <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> mr<span class="token punctuation">)</span> <span class="token keyword">return</span> maxs<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">>=</span> ml<span class="token punctuation">)</span> ans<span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>nown <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ml<span class="token punctuation">,</span> mr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> mr<span class="token punctuation">)</span> ans<span class="token operator">=</span> <span class="token function">maxi</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>nown <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> ml<span class="token punctuation">,</span> mr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace SegmentTree</span><span class="token keyword">int</span> ans<span class="token operator">=</span> <span class="token number">0x7f7f7f7f</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> f <span class="token operator">+</span> i<span class="token punctuation">,</span> s <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    PrefixSum<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SegmentTree<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ll r<span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>PrefixSum<span class="token operator">::</span>sumf <span class="token operator">+</span> i<span class="token punctuation">,</span> PrefixSum<span class="token operator">::</span>sumf <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> PrefixSum<span class="token operator">::</span>sumf<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> PrefixSum<span class="token operator">::</span>sumf<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">!=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">=</span> <span class="token function">mini</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> SegmentTree<span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 分块 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> ST表 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2009 - Hankson 的趣味题</title>
      <link href="/2019-03/03-luogu1072/"/>
      <url>/2019-03/03-luogu1072/</url>
      
        <content type="html"><![CDATA[<p>题目链接: <a href="https://www.luogu.org/problemnew/show/P1072" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P1072</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>半个月没更新博客了, 一直忙于做题练习和学文化课, 不然快被劝退了</p><p>最近学习一本通提高篇, 复习下之前学的GCD等数论知识</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先从题目描述说起, 给出了a0, a1, b0, b1四个数</p><p>求 $ gcd(x, a0) = a1 $ 且 $ lcm(x, b0) = b1 $ 中 x 的方案数 </p><p>那么首先我们都知道两个很基础的东西</p><p>$$ gcd(a, b) = gcd(b, a\mod b) $$</p><p>$$ lcm(a, b) = a × b / gcd(a, b) $$</p><p>然后就可以来做这道题了</p><p>因为</p><p>$$ lcm(x, b0) = x × b0 / gcd(x, b0) = b1 $$</p><p>所以</p><p>$$ x = \frac{b1}{b0} × gcd(x, b0) $$</p><p>我们设一个数 $ y = gcd(x, b0) $ 那么一定 $ 1 ≤ y ≤ \sqrt{b0} $</p><p>所以我们只要枚举 y 的值, 然后代入算出 $ x = b1 / b0 × y $</p><p>然后代入题目中的两个式子进行判断</p><p>还有一个简化</p><p>$$ x × b0 / gcd(x, b0) == b1 $$</p><p>可简化为</p><p>$$ b1 / b0 × y × b0 / gcd(x, b0) == b1 $$</p><p>即</p><p>$$ gcd(x, b0) == y $$</p><p>要判断 $ x = b1 / y $ 的情况, 也有可能是一个解</p><p>也不要忘了特判 $ y = \sqrt{b0} $ 的情况</p><p>然后就完美解决了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>没有开各种优化, 能过</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a0<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> b0<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> tmpx<span class="token punctuation">,</span> tmpq<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> a0 <span class="token operator">>></span> a1 <span class="token operator">>></span> b0 <span class="token operator">>></span> b1<span class="token punctuation">;</span>        ans<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>b0<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b0 <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tmpx<span class="token operator">=</span> b1 <span class="token operator">/</span> b0 <span class="token operator">*</span> i<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> a0<span class="token punctuation">)</span> <span class="token operator">==</span> a1 <span class="token operator">&amp;&amp;</span> <span class="token function">gcd</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> b0<span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">;</span>                tmpx<span class="token operator">=</span> b1 <span class="token operator">/</span> i<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> a0<span class="token punctuation">)</span> <span class="token operator">==</span> a1 <span class="token operator">&amp;&amp;</span> <span class="token function">gcd</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> b0<span class="token punctuation">)</span> <span class="token operator">==</span> b0 <span class="token operator">/</span> i<span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        tmpq<span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>b0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmpq <span class="token operator">*</span> tmpq <span class="token operator">==</span> b0<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmpx<span class="token operator">=</span> b1 <span class="token operator">/</span> b0 <span class="token operator">*</span> tmpq<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> a0<span class="token punctuation">)</span> <span class="token operator">==</span> a1 <span class="token operator">&amp;&amp;</span> <span class="token function">gcd</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> b0<span class="token punctuation">)</span> <span class="token operator">==</span> tmpq<span class="token punctuation">)</span> <span class="token operator">++</span>ans<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> GCD </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuoguP2633 - Count on a tree</title>
      <link href="/2019-02/18-luogu2633/"/>
      <url>/2019-02/18-luogu2633/</url>
      
        <content type="html"><![CDATA[<p>题目链接1: <a href="https://www.luogu.org/problemnew/show/P2633" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2633</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2588" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=2588</a><br>题目链接3: <a href="https://www.luogu.org/problemnew/show/SP10628" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/SP10628</a><br>题目链接4: <a href="https://www.spoj.com/problems/COT/" target="_blank" rel="noopener">https://www.spoj.com/problems/COT/</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本来是打算做 TJOI2018 - 异或 那道题的, 然后又看到这道题, 好像做这道题有助于那道题…然后就开始干</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题像是组合模板题…用倍增LCA + 主席树, 直接套模板就行了.</p><p>有一些需要注意的东西, 边的数组最好开大一点, 不然容易RE, 哪个算法写炸了也容易RE, 所以需要小心谨慎的写代码, 然而Ciyang的倍增写挂了…</p><p>主席树我写的指针版, 好像很罕见, 强烈安利, 虽然和数组版没有多大的区别.</p><p>对于这道题, 先预处理出LCA, 然后建个树（数组版不需要）</p><p>查询时把$ x $和$ y $之间的链提出来, 主席树上存的是前缀和, 那么就需要先求出$ lca(x,y) $</p><p>再根据数学上的某些原理（容斥?）求出</p><p>$$ Sum(x,y) = sum(x) + sum(y) - sum(lca(x,y)) - sum(lca(x,y)) - sum(f[lca(x,y)])$$</p><p>$ f[x] $ 代表 x 的父节点, 然后直接套主席树板子就行了</p><p>推荐两个STL必备黑科技, unique 和 lower_bound, 前者那个是给有序数组去重, 后者是有序数组二分查找. 一般都会了, 不会的百度把… </p><p>如果出现RE, 找不到原因, 可以去交<a href="https://www.luogu.org/problemnew/show/SP10628" target="_blank" rel="noopener">这道题</a>, 去掉强制在线, 如果WA就是算法问题了.再出现RE可能就是像我一样手残打错了一个数字之类的东西…</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>评测详情(未开O2): Accepted 100 用时: 1765ms / 内存: 76648KB</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> e<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f<span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> e<span class="token operator">=</span> e <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">,</span> ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> e <span class="token operator">*</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// READ</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> d<span class="token punctuation">,</span> vi<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lv<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edptr<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmpx<span class="token punctuation">,</span> tmpy<span class="token punctuation">,</span> tmpz<span class="token punctuation">;</span><span class="token keyword">struct</span> edge <span class="token punctuation">{</span>    <span class="token keyword">int</span> to<span class="token punctuation">,</span> nexty<span class="token punctuation">;</span><span class="token punctuation">}</span> eds<span class="token punctuation">[</span><span class="token number">400001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 其实可以 100005 * 2</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    eds<span class="token punctuation">[</span>edptr<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token operator">=</span> b<span class="token punctuation">,</span> eds<span class="token punctuation">[</span>edptr<span class="token punctuation">]</span><span class="token punctuation">.</span>nexty<span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span> edptr<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// edge</span><span class="token keyword">struct</span> NODE <span class="token punctuation">{</span>    NODE <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>    <span class="token keyword">int</span> v<span class="token punctuation">,</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">*</span> root<span class="token punctuation">[</span><span class="token number">800005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 其实可以 100005</span>NODE <span class="token operator">*</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    NODE <span class="token operator">*</span>nptr<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">NODE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">!=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        nptr<span class="token operator">-</span><span class="token operator">></span>l<span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> nptr<span class="token operator">-</span><span class="token operator">></span>r<span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nptr<span class="token punctuation">;</span><span class="token punctuation">}</span>NODE <span class="token operator">*</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> NODE <span class="token operator">*</span>pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>    NODE <span class="token operator">*</span>nptr<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">NODE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nptr<span class="token operator">-</span><span class="token operator">></span>l<span class="token operator">=</span> pre<span class="token operator">-</span><span class="token operator">></span>l<span class="token punctuation">,</span> nptr<span class="token operator">-</span><span class="token operator">></span>r<span class="token operator">=</span> pre<span class="token operator">-</span><span class="token operator">></span>r<span class="token punctuation">,</span> nptr<span class="token operator">-</span><span class="token operator">></span>sum<span class="token operator">=</span> pre<span class="token operator">-</span><span class="token operator">></span>sum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">!=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>            nptr<span class="token operator">-</span><span class="token operator">></span>l<span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> c<span class="token punctuation">,</span> pre<span class="token operator">-</span><span class="token operator">></span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            nptr<span class="token operator">-</span><span class="token operator">></span>r<span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">,</span> pre<span class="token operator">-</span><span class="token operator">></span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span>NODE <span class="token operator">*</span>ml<span class="token punctuation">,</span> NODE <span class="token operator">*</span>mr<span class="token punctuation">,</span> NODE <span class="token operator">*</span>xl<span class="token punctuation">,</span> NODE <span class="token operator">*</span>xr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> qsum<span class="token operator">=</span> mr<span class="token operator">-</span><span class="token operator">></span>l<span class="token operator">-</span><span class="token operator">></span>sum <span class="token operator">+</span> ml<span class="token operator">-</span><span class="token operator">></span>l<span class="token operator">-</span><span class="token operator">></span>sum <span class="token operator">-</span> xl<span class="token operator">-</span><span class="token operator">></span>l<span class="token operator">-</span><span class="token operator">></span>sum <span class="token operator">-</span> xr<span class="token operator">-</span><span class="token operator">></span>l<span class="token operator">-</span><span class="token operator">></span>sum<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>qsum <span class="token operator">>=</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>ml<span class="token operator">-</span><span class="token operator">></span>l<span class="token punctuation">,</span> mr<span class="token operator">-</span><span class="token operator">></span>l<span class="token punctuation">,</span> xl<span class="token operator">-</span><span class="token operator">></span>l<span class="token punctuation">,</span> xr<span class="token operator">-</span><span class="token operator">></span>l<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>ml<span class="token operator">-</span><span class="token operator">></span>r<span class="token punctuation">,</span> mr<span class="token operator">-</span><span class="token operator">></span>r<span class="token punctuation">,</span> xl<span class="token operator">-</span><span class="token operator">></span>r<span class="token punctuation">,</span> xr<span class="token operator">-</span><span class="token operator">></span>r<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> k <span class="token operator">-</span> qsum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// tree</span><span class="token keyword">int</span> deep<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>    deep<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token operator">=</span> deep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> fa<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从0开始...Ciyang写挂了,写成从1开始,然后交了好多遍也没改对</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> head<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nexty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        to<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> nown<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">)</span> <span class="token punctuation">{</span>    root<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> lv<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">[</span>f<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> head<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nexty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        to<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to <span class="token operator">==</span> f<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">dfs2</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">lca</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>deep<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> deep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>deep<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">>=</span> deep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> x<span class="token operator">=</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> x<span class="token operator">=</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span> f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// LCA</span><span class="token keyword">int</span> lastans<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tmpc<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> vi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> vi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmpx<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpy<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> tmpy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>tmpy<span class="token punctuation">,</span> tmpx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    root<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>vi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vi <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>vi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vi <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> vi <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> lv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>vi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vi <span class="token operator">+</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> lv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> vi<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmpx<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpy<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpz<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tmpx<span class="token operator">^</span><span class="token operator">=</span> lastans<span class="token punctuation">;</span>        tmpc<span class="token operator">=</span> <span class="token function">lca</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> tmpy<span class="token punctuation">)</span><span class="token punctuation">;</span>        lastans<span class="token operator">=</span> vi<span class="token punctuation">[</span><span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>tmpx<span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">[</span>tmpy<span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">[</span>tmpc<span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">[</span>f<span class="token punctuation">[</span>tmpc<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> tmpz<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> lastans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// main</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> LCA </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuoguP2580 - 于是他错误的点名开始了</title>
      <link href="/2019-02/16-luogu2580/"/>
      <url>/2019-02/16-luogu2580/</url>
      
        <content type="html"><![CDATA[<p>题目链接: <a href="https://www.luogu.org/problemnew/show/P2580" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P2580</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇题解原来是我放到Luogu上的，打算搬过来，原地址: <a href="https://ciyang.blog.luogu.org/solution-p2580" target="_blank" rel="noopener">https://ciyang.blog.luogu.org/solution-p2580</a></p><p>当时是自己闲得无聊自创的算法，跑了最优解第3，Trie树中最快了</p><p>不过后来Luogu上的dalao告诉我这个是边压Trie树，因此<del>人生失去意义</del></p><p>此题解非正常字典树,推荐先学习普通的字典树并了解指针的使用</p><p>代码还是之前的代码,名为Lumpy_Tnode.</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>树上的边存储字符串,代表节点的单独前缀.</p><p>写题解的上午有了灵感,然后根据思路模拟了一下,可行性挺高的.代码上比普通的复杂一些,我使用了指针.    </p><p><img src="/images/P2580_1.png" alt="Example"></p><p>按任意顺序插入abcd,abcde,bcde,bcdf四个字符串的Trie树长这样</p><p>红色节点表示已插入字符串的结尾节点</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>通过与比较普通指针版和非指针版Trie来证明一下可行性.  </p><p>已知一个节点要保存26条边的指针</p><p>指针版Trie可使用动态内存,缺点是每个节点只保存一个字符,会有大量边的空指针来占用额外的内存,且new节点多了,内存分配常数较大.</p><p>为了减少常数,可以自己写内存池分配,但无论是什么数据,只要稍带随机性形成链,就会有很多只有一个子节点的节点,这无疑有25个空指针浪费内存.</p><p>非指针版常数小,但空间分配也是很大的问题,多了可能MLE,少了RE.然而仍有很多一条链的树,空间最大浪费N*25啊…<del>先不说影响美观</del>而且时间复杂度依然很高,毕竟查询也是O(N).</p><p>边压Trie的复杂度是会改变的,就是对一条链情况的优化,理论最大时间复杂度是O(N)带有一些常数,不考虑常数情况下,永远小于等于普通Trie.   </p><p>边压Trie巧妙利用字符串指针,赋值、继承等操作只需要指针或长度变化就好了,因此插入最小复杂度是O(1),空间上也少了很多空指针. </p><p>太多证明不如一句代码,我放上代码继续分析. </p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>节点的结构体,原来的char变成了length和字符串指针:  </p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> clear(a) memset(a, 0, sizeof(a))</span><span class="token macro property">#<span class="token directive keyword">define</span> copy(a, b) memcpy(a, b, sizeof(a))</span>    <span class="token keyword">struct</span> Lumpy_Tnode <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pStr<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指向当前存储字符串首元素</span>        <span class="token keyword">int</span> length<span class="token punctuation">,</span> isEnd<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//length存储字符串的长度 isEnd代表是否是结尾节点</span>        Lumpy_Tnode <span class="token operator">*</span>children<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//26个子节点</span>        <span class="token keyword">inline</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pStr<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token operator">=</span> isEnd<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">clear</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">inline</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pStr<span class="token operator">=</span> str<span class="token punctuation">,</span> length<span class="token operator">=</span> len<span class="token punctuation">,</span> isEnd<span class="token operator">=</span> end<span class="token punctuation">,</span> <span class="token function">clear</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token punctuation">}</span> mNode<span class="token punctuation">;</span></code></pre><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>使用递归和循环,判断比较多,先看代码(看起来常数很大)      </p><pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> Lumpy_Tnode <span class="token operator">*</span>bNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//str是指针,指向当前插入字符串的第一个元素</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//字符串长度为0代表结尾</span>        <span class="token comment" spellcheck="true">//其实是为了优化代码美观,当作递归边界</span>            bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ch<span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//子节点已存在</span>            bNode<span class="token operator">=</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">register</span> <span class="token keyword">int</span> sptr<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>sptr <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> sptr <span class="token operator">&lt;</span> bNode<span class="token operator">-</span><span class="token operator">></span>length <span class="token operator">&amp;&amp;</span> bNode<span class="token operator">-</span><span class="token operator">></span>pStr<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>sptr<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//循环来找当前字符串和节点存储的字符串最长前缀</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sptr <span class="token operator">!=</span> bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//节点存储的字符串不是插入字符串的子串</span>                Lumpy_Tnode <span class="token operator">*</span>nNode<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>pStr <span class="token operator">+</span> sptr<span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>length <span class="token operator">-</span> sptr<span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//拆树,运用字符串指针连续地址的特性来操作</span>                <span class="token function">copy</span><span class="token punctuation">(</span>nNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">clear</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//继承原有子节点的各种信息</span>                bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>bNode<span class="token operator">-</span><span class="token operator">></span>pStr<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span> nNode<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//清空原有节点,重新初始化</span>            <span class="token punctuation">}</span>            bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token operator">=</span> sptr<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新当前节点存储的字符串长度,从而更改当前存储的字符串</span>            <span class="token function">insert</span><span class="token punctuation">(</span>str <span class="token operator">+</span> sptr<span class="token punctuation">,</span> length <span class="token operator">-</span> sptr<span class="token punctuation">,</span> bNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//不存在当前首字母的子节点,直接new并且赋值</span>            <span class="token comment" spellcheck="true">//因为是指针操作,所以不需要O(n)复制字符串,理论上复杂度O(3)?</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//调用方式:insert(插入字符串, 字符串长度, Trie根节点);</span></code></pre><p>如果代码看懂了,第一反应可能认为指针操作有一些漏洞.</p><p>的确插入的字符串在插入后就不能进行改变了,所以就只要开一个char[N][K]的数组来保存输入的字符串,K为最长字符串的长度. </p><p>相比较空间复杂度总体仍然较小,其实是把原来每个节点存的char放到了一起,每个节点多了一个指针.</p><p>这其中其实有个很巧妙的事,树上的一条链可能指向的地址是连续的.仔细想了想,其实也有空间浪费,不管是节点上还是树上的最长公共前缀都只指向一个字符串,其他字符串中相同的字符占用的空间就浪费掉了,这句话不懂没事,因为这个浪费造成的影响很小. </p><p>如果代码都没看懂,还有图解:</p><ol><li><p><img src="/images/P2580_2.png" alt="向空树插入abc,再插入ab"></p></li><li><p><img src="/images/P2580_3.png" alt="再向此树插入ac:"></p></li></ol><p>解释一下图2:</p><p>比较ab和ac,最长公共前缀为a</p><p>新建一个字符串指针指向ab中b的节点,长度为1,继承ab的颜色和ab的子节点.</p><p>清空ab的子节点,颜色改为黑(黑表示不为结尾节点),ab的首字母b子节点指向b.</p><p>在我实现时,先更改长度使ab变为a,再向a中插入c.</p><p>因为没有首字母为c的子节点,直接new一个新的.</p><h4 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h4><pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> Lumpy_Tnode <span class="token operator">*</span>bNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//递归到查找的字符串长度为0</span>        <span class="token comment" spellcheck="true">//判断当前节点是否为结尾,是否是第一次查询</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>isEnd <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ch<span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bNode<span class="token operator">=</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">&lt;</span> bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//自带剪枝,若当前查找字符串长度小于当前公共前缀,那么字典树中不存在当前查找的字符串</span>            <span class="token keyword">register</span> <span class="token keyword">int</span> sptr<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>sptr <span class="token operator">&lt;</span> bNode<span class="token operator">-</span><span class="token operator">></span>length <span class="token operator">&amp;&amp;</span> bNode<span class="token operator">-</span><span class="token operator">></span>pStr<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>sptr<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sptr <span class="token operator">!=</span> bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//最长公共前缀必须是当前查找的字符串的子串</span>            <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>str <span class="token operator">+</span> sptr<span class="token punctuation">,</span> length <span class="token operator">-</span> sptr<span class="token punctuation">,</span> bNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//没有子节点,字典树中不存在当前查找的字符串</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//调用方式:find(查询字符串, 字符串长度, Trie根节点);</span></code></pre><p>比插入的代码简单多了,并且自带剪枝,所以比较快.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>（开启O2） 用时: 127ms / 内存: 4248KB<br>（关闭O2） 用时: 144ms / 内存: 4128KB</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> clear(a) memset(a, 0, sizeof(a))</span><span class="token macro property">#<span class="token directive keyword">define</span> copy(a, b) memcpy(a, b, sizeof(a))</span><span class="token keyword">struct</span> Lumpy_Trie <span class="token punctuation">{</span>    <span class="token keyword">struct</span> Lumpy_Tnode <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pStr<span class="token punctuation">;</span>        <span class="token keyword">int</span> length<span class="token punctuation">,</span> isEnd<span class="token punctuation">;</span>        Lumpy_Tnode <span class="token operator">*</span>children<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">inline</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pStr<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token operator">=</span> isEnd<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">clear</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">inline</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pStr<span class="token operator">=</span> str<span class="token punctuation">,</span> length<span class="token operator">=</span> len<span class="token punctuation">,</span> isEnd<span class="token operator">=</span> end<span class="token punctuation">,</span> <span class="token function">clear</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> mNode<span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> Lumpy_Tnode <span class="token operator">*</span>bNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ch<span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bNode<span class="token operator">=</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">register</span> <span class="token keyword">int</span> sptr<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>sptr <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> sptr <span class="token operator">&lt;</span> bNode<span class="token operator">-</span><span class="token operator">></span>length <span class="token operator">&amp;&amp;</span> bNode<span class="token operator">-</span><span class="token operator">></span>pStr<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>sptr<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sptr <span class="token operator">!=</span> bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Lumpy_Tnode <span class="token operator">*</span>nNode<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>pStr <span class="token operator">+</span> sptr<span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>length <span class="token operator">-</span> sptr<span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">copy</span><span class="token punctuation">(</span>nNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">clear</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>                bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>bNode<span class="token operator">-</span><span class="token operator">></span>pStr<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span> nNode<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token operator">=</span> sptr<span class="token punctuation">;</span>            <span class="token function">insert</span><span class="token punctuation">(</span>str <span class="token operator">+</span> sptr<span class="token punctuation">,</span> length <span class="token operator">-</span> sptr<span class="token punctuation">,</span> bNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Lumpy_Tnode</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> Lumpy_Tnode <span class="token operator">*</span>bNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>isEnd <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bNode<span class="token operator">-</span><span class="token operator">></span>isEnd<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ch<span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bNode<span class="token operator">=</span> bNode<span class="token operator">-</span><span class="token operator">></span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">&lt;</span> bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">register</span> <span class="token keyword">int</span> sptr<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>sptr <span class="token operator">&lt;</span> bNode<span class="token operator">-</span><span class="token operator">></span>length <span class="token operator">&amp;&amp;</span> bNode<span class="token operator">-</span><span class="token operator">></span>pStr<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>sptr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>sptr<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sptr <span class="token operator">!=</span> bNode<span class="token operator">-</span><span class="token operator">></span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>str <span class="token operator">+</span> sptr<span class="token punctuation">,</span> length <span class="token operator">-</span> sptr<span class="token punctuation">,</span> bNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> t<span class="token punctuation">;</span><span class="token keyword">char</span> allstr<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> allstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>allstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>allstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">.</span>mNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        j<span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">.</span>mNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"WRONG\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"OK\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"REPEAT\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最需要注意的是输入的字符串insert后不能再更改那一块内存了不能更改了…</p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>我写的常数可能挺大,希望dalao们试试各种卡常优化…  </p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Cpp </tag>
            
            <tag> 字典树 </tag>
            
            <tag> 边压Trie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲聊 - 毒瘤码风推荐</title>
      <link href="/2019-02/15-du-liu-ma-feng-tui-jian/"/>
      <url>/2019-02/15-du-liu-ma-feng-tui-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="码风"><a href="#码风" class="headerlink" title="码风"></a>码风</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>相信码风对于我们来说太熟悉了，以至于平常都忘记了它的存在</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>码风全称代码风格…</p><p>我就不啰嗦了，估计也都知道是啥，想看详细介绍可以右转<a href="https://baike.baidu.com/item/代码风格" target="_blank" rel="noopener">代码风格-百度百科</a>或<a href="https://en.wikipedia.org/wiki/Programming_style" target="_blank" rel="noopener">Programming style-Wikipedia</a></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>那么就直接推荐自己的码风了</p><p>(从来不多打空格的可以跳过这一部分)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// QuickRead</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> e<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f<span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> e<span class="token operator">=</span> e <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">,</span> ch<span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> e <span class="token operator">*</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个空格写法确实毒瘤，估计像我这样的全世界应该有1%…</p><p>赋值符前不加空格，赋值符后加空格，运算符和逻辑符前后都加空格，手打不是很方便，习惯就好了.</p><p>大括号前不换行加空格，for循环中每个语句只在前加空格</p><hr><p>(关于换行等事)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 负载平衡问题</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">absi</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> i <span class="token operator">:</span> <span class="token operator">-</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    sum<span class="token operator">/</span><span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span> sum<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token operator">=</span> s<span class="token punctuation">[</span>n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">+</span><span class="token operator">=</span> <span class="token function">absi</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>只遵守一个原则: 一行只存在一个分号, 能一行表示就不要多行表示</p><p>但也有例外，较长表达式不会压到一行，比较长的函数定义也不会压到一行</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 匈牙利算法</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> nown<span class="token punctuation">,</span> <span class="token keyword">int</span> wptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> head<span class="token punctuation">[</span>nown<span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nexty<span class="token punctuation">)</span> <span class="token punctuation">{</span>        to<span class="token operator">=</span> eds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>walkpast<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">!=</span> wptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            walkpast<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">=</span> wptr<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pp<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pp<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">,</span> wptr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> pp<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">=</span> nown<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>大概就是这种码风，能省略就省略，但一行一条语句。</p><hr><p>(判断语句和数组定义)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 主席树</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmpx<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpy<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpxx<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpyy<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">)</span>            tmpc<span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">update</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> tmpy<span class="token punctuation">,</span> tmpc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">update</span><span class="token punctuation">(</span>tmpx<span class="token punctuation">,</span> tmpyy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>tmpc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">update</span><span class="token punctuation">(</span>tmpxx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tmpy<span class="token punctuation">,</span> <span class="token operator">-</span>tmpc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">update</span><span class="token punctuation">(</span>tmpxx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tmpyy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tmpc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>tmpxx<span class="token punctuation">,</span> tmpyy<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query</span><span class="token punctuation">(</span>tmpx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tmpyy<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query</span><span class="token punctuation">(</span>tmpxx<span class="token punctuation">,</span> tmpy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">query</span><span class="token punctuation">(</span>tmpx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tmpy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>单行if不会换行，如果存在 else / else if 则换行</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> db<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0</span><span class="token punctuation">,</span>           <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token number">1799998</span><span class="token punctuation">,</span>   <span class="token number">844059434</span><span class="token punctuation">,</span> <span class="token number">446759866</span><span class="token punctuation">,</span> <span class="token number">865662267</span><span class="token punctuation">,</span> <span class="token number">29583524</span><span class="token punctuation">,</span>  <span class="token number">127902423</span><span class="token punctuation">,</span> <span class="token number">614370802</span><span class="token punctuation">,</span> <span class="token number">866384115</span><span class="token punctuation">,</span> <span class="token number">771602680</span><span class="token punctuation">,</span> <span class="token number">248905317</span><span class="token punctuation">,</span> <span class="token number">78054944</span><span class="token punctuation">,</span>  <span class="token number">297165834</span><span class="token punctuation">,</span> <span class="token number">271692212</span><span class="token punctuation">,</span> <span class="token number">491940959</span><span class="token punctuation">,</span> <span class="token number">329478404</span><span class="token punctuation">,</span> <span class="token number">984412484</span><span class="token punctuation">,</span> <span class="token number">35704862</span><span class="token punctuation">,</span>  <span class="token number">729995974</span><span class="token punctuation">,</span> <span class="token number">257611164</span><span class="token punctuation">,</span> <span class="token number">47520158</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token number">869867506</span><span class="token punctuation">,</span> <span class="token number">732424548</span><span class="token punctuation">,</span> <span class="token number">678809493</span><span class="token punctuation">,</span> <span class="token number">143987677</span><span class="token punctuation">,</span> <span class="token number">789130682</span><span class="token punctuation">,</span> <span class="token number">973691054</span><span class="token punctuation">,</span> <span class="token number">893883312</span><span class="token punctuation">,</span> <span class="token number">311519914</span><span class="token punctuation">,</span> <span class="token number">650459219</span><span class="token punctuation">,</span> <span class="token number">821045358</span><span class="token punctuation">,</span> <span class="token number">310559620</span><span class="token punctuation">,</span> <span class="token number">775625624</span><span class="token punctuation">,</span> <span class="token number">108543282</span><span class="token punctuation">,</span> <span class="token number">54180205</span><span class="token punctuation">,</span>  <span class="token number">287135615</span><span class="token punctuation">,</span> <span class="token number">875178490</span><span class="token punctuation">,</span> <span class="token number">760920242</span><span class="token punctuation">,</span> <span class="token number">512638949</span><span class="token punctuation">,</span> <span class="token number">254323537</span><span class="token punctuation">,</span> <span class="token number">977186041</span><span class="token punctuation">,</span> <span class="token number">474130473</span><span class="token punctuation">,</span> <span class="token number">455558106</span><span class="token punctuation">,</span>    <span class="token number">435916613</span><span class="token punctuation">,</span> <span class="token number">787985317</span><span class="token punctuation">,</span> <span class="token number">366892998</span><span class="token punctuation">,</span> <span class="token number">42185197</span><span class="token punctuation">,</span>  <span class="token number">192850838</span><span class="token punctuation">,</span> <span class="token number">421591125</span><span class="token punctuation">,</span> <span class="token number">241779127</span><span class="token punctuation">,</span> <span class="token number">969779315</span><span class="token punctuation">,</span> <span class="token number">924599866</span><span class="token punctuation">,</span> <span class="token number">723460313</span><span class="token punctuation">,</span> <span class="token number">430999144</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这个数组定义比较忙=迷，有的时候不会换行有的时候会</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>如果上面这些格式手动的话…估计考试一道题都做不完…</p><p>我目前使用VS Code，他的C++扩展自带格式化工具.clang-format</p><p>在 Visual Studio 和 Vim 中也可以用，并且配置文件是通用的</p><p>VS Code使用.clang-format: 安装C++扩展 -&gt; 选择工作文件夹 -&gt; 在文件夹下创建文件命名为.clang-format -&gt; 打开编辑</p><p>Visual Studio的使用.clang-format: 新建项目 -&gt; 创建.clang-format文件 -&gt; 编辑</p><h4 id="clang-format文件用法"><a href="#clang-format文件用法" class="headerlink" title=".clang-format文件用法"></a>.clang-format文件用法</h4><p><a href="https://clang.llvm.org/docs/ClangFormatStyleOptions.html" target="_blank" rel="noopener">官方文档</a>或者自行百度</p><p>常用设置:</p><p>SpaceBeforeAssignmentOperator 为赋值符两边的空格</p><p>BraceWrapping 为各位置括号前后换行</p><p>ColumnLimit 为每行最大字符限制(和数组初始化换行有关)</p><h4 id="放一下我的格式化文件配置"><a href="#放一下我的格式化文件配置" class="headerlink" title="放一下我的格式化文件配置:"></a>放一下我的格式化文件配置:</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">--</span><span class="token operator">-</span>Language<span class="token punctuation">:</span>    CppBasedOnStyle<span class="token punctuation">:</span>    LLVMAccessModifierOffset<span class="token punctuation">:</span>    <span class="token number">0</span>AlignAfterOpenBracket<span class="token punctuation">:</span>    AlignAlignConsecutiveAssignments<span class="token punctuation">:</span>    <span class="token boolean">false</span>AlignConsecutiveDeclarations<span class="token punctuation">:</span>    <span class="token boolean">false</span>AlignEscapedNewlinesLeft<span class="token punctuation">:</span>    <span class="token boolean">true</span>AlignOperands<span class="token punctuation">:</span>    <span class="token boolean">true</span>AlignTrailingComments<span class="token punctuation">:</span>    <span class="token boolean">true</span>AllowAllParametersOfDeclarationOnNextLine<span class="token punctuation">:</span>    <span class="token boolean">true</span>AllowShortBlocksOnASingleLine<span class="token punctuation">:</span>    <span class="token boolean">false</span>AllowShortCaseLabelsOnASingleLine<span class="token punctuation">:</span>    <span class="token boolean">true</span>AllowShortFunctionsOnASingleLine<span class="token punctuation">:</span>    EmptyAllowShortIfStatementsOnASingleLine<span class="token punctuation">:</span>    <span class="token boolean">true</span>AllowShortLoopsOnASingleLine<span class="token punctuation">:</span>    <span class="token boolean">true</span>AlwaysBreakAfterDefinitionReturnType<span class="token punctuation">:</span>    NoneAlwaysBreakAfterReturnType<span class="token punctuation">:</span>    NoneAlwaysBreakBeforeMultilineStrings<span class="token punctuation">:</span>    <span class="token boolean">true</span>AlwaysBreakTemplateDeclarations<span class="token punctuation">:</span>    <span class="token boolean">true</span>BinPackArguments<span class="token punctuation">:</span>    <span class="token boolean">false</span>BinPackParameters<span class="token punctuation">:</span>    <span class="token boolean">false</span>BraceWrapping<span class="token punctuation">:</span>      AfterClass<span class="token punctuation">:</span>    <span class="token boolean">false</span>  AfterControlStatement<span class="token punctuation">:</span>    <span class="token boolean">false</span>  AfterEnum<span class="token punctuation">:</span>    <span class="token boolean">false</span>  AfterFunction<span class="token punctuation">:</span>    <span class="token boolean">false</span>  AfterNamespace<span class="token punctuation">:</span>    <span class="token boolean">false</span>  AfterObjCDeclaration<span class="token punctuation">:</span>    <span class="token boolean">false</span>  AfterStruct<span class="token punctuation">:</span>    <span class="token boolean">false</span>  AfterUnion<span class="token punctuation">:</span>    <span class="token boolean">false</span>  BeforeCatch<span class="token punctuation">:</span>    <span class="token boolean">true</span>  BeforeElse<span class="token punctuation">:</span>    <span class="token boolean">true</span>  IndentBraces<span class="token punctuation">:</span>    <span class="token boolean">false</span>BreakBeforeBinaryOperators<span class="token punctuation">:</span>    NonAssignmentBreakBeforeBraces<span class="token punctuation">:</span>    CustomBreakBeforeTernaryOperators<span class="token punctuation">:</span>    <span class="token boolean">false</span>BreakConstructorInitializersBeforeComma<span class="token punctuation">:</span>    <span class="token boolean">false</span>ColumnLimit<span class="token punctuation">:</span>    <span class="token number">250</span>CommentPragmas<span class="token punctuation">:</span>    <span class="token string">'^ IWYU pragma:'</span>ConstructorInitializerAllOnOneLineOrOnePerLine<span class="token punctuation">:</span>    <span class="token boolean">true</span>ConstructorInitializerIndentWidth<span class="token punctuation">:</span>    <span class="token number">4</span>ContinuationIndentWidth<span class="token punctuation">:</span>    <span class="token number">4</span>Cpp11BracedListStyle<span class="token punctuation">:</span>    <span class="token boolean">true</span>DerivePointerAlignment<span class="token punctuation">:</span>    <span class="token boolean">false</span>DisableFormat<span class="token punctuation">:</span>    <span class="token boolean">false</span>ExperimentalAutoDetectBinPacking<span class="token punctuation">:</span>    <span class="token boolean">false</span>ForEachMacros<span class="token punctuation">:</span>    <span class="token punctuation">[</span> foreach<span class="token punctuation">,</span> Q_FOREACH<span class="token punctuation">,</span> BOOST_FOREACH <span class="token punctuation">]</span>IncludeCategories<span class="token punctuation">:</span>   <span class="token operator">-</span> Regex<span class="token punctuation">:</span>    <span class="token string">'^"(llvm|llvm-c|clang|clang-c)/'</span>    Priority<span class="token punctuation">:</span>    <span class="token number">2</span>  <span class="token operator">-</span> Regex<span class="token punctuation">:</span>    <span class="token string">'^(&lt;|"(gtest|isl|json)/)'</span>    Priority<span class="token punctuation">:</span>    <span class="token number">3</span>  <span class="token operator">-</span> Regex<span class="token punctuation">:</span>    <span class="token string">'.*'</span>    Priority<span class="token punctuation">:</span>    <span class="token number">1</span>IndentCaseLabels<span class="token punctuation">:</span>    <span class="token boolean">true</span>IndentWidth<span class="token punctuation">:</span>    <span class="token number">4</span>IndentWrappedFunctionNames<span class="token punctuation">:</span>    <span class="token boolean">false</span>KeepEmptyLinesAtTheStartOfBlocks<span class="token punctuation">:</span>    <span class="token boolean">false</span>MacroBlockBegin<span class="token punctuation">:</span>    <span class="token string">''</span>MacroBlockEnd<span class="token punctuation">:</span>    <span class="token string">''</span>MaxEmptyLinesToKeep<span class="token punctuation">:</span>    <span class="token number">1</span>NamespaceIndentation<span class="token punctuation">:</span>    InnerObjCBlockIndentWidth<span class="token punctuation">:</span>    <span class="token number">4</span>ObjCSpaceAfterProperty<span class="token punctuation">:</span>    <span class="token boolean">false</span>ObjCSpaceBeforeProtocolList<span class="token punctuation">:</span>    <span class="token boolean">true</span>PenaltyBreakBeforeFirstCallParameter<span class="token punctuation">:</span>    <span class="token number">19</span>PenaltyBreakComment<span class="token punctuation">:</span>    <span class="token number">300</span>PenaltyBreakFirstLessLess<span class="token punctuation">:</span>    <span class="token number">120</span>PenaltyBreakString<span class="token punctuation">:</span>    <span class="token number">1000</span>PenaltyExcessCharacter<span class="token punctuation">:</span>    <span class="token number">1000000</span>PenaltyReturnTypeOnItsOwnLine<span class="token punctuation">:</span>    <span class="token number">60</span>PointerAlignment<span class="token punctuation">:</span>    RightReflowComments<span class="token punctuation">:</span>    <span class="token boolean">true</span>SortIncludes<span class="token punctuation">:</span>    <span class="token boolean">false</span>SpaceAfterCStyleCast<span class="token punctuation">:</span>    <span class="token boolean">false</span>SpaceAfterTemplateKeyword<span class="token punctuation">:</span> <span class="token boolean">true</span>SpaceBeforeAssignmentOperators<span class="token punctuation">:</span>    <span class="token boolean">false</span>SpaceBeforeParens<span class="token punctuation">:</span>    NeverSpaceInEmptyParentheses<span class="token punctuation">:</span>    <span class="token boolean">false</span>SpacesBeforeTrailingComments<span class="token punctuation">:</span>    <span class="token number">2</span>SpacesInAngles<span class="token punctuation">:</span>    <span class="token boolean">true</span>SpacesInContainerLiterals<span class="token punctuation">:</span>    <span class="token boolean">false</span>SpacesInCStyleCastParentheses<span class="token punctuation">:</span>    <span class="token boolean">false</span>SpacesInParentheses<span class="token punctuation">:</span>    <span class="token boolean">false</span>SpacesInSquareBrackets<span class="token punctuation">:</span>    <span class="token boolean">false</span>Standard<span class="token punctuation">:</span>    Cpp11TabWidth<span class="token punctuation">:</span>    <span class="token number">4</span>UseTab<span class="token punctuation">:</span>    Always<span class="token operator">...</span></code></pre><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>用了这个码风，再也不怕代码出BUG了(</p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 闲聊 </tag>
            
            <tag> 码风 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始</title>
      <link href="/2019-02/12-kai-shi/"/>
      <url>/2019-02/12-kai-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="关于搭建"><a href="#关于搭建" class="headerlink" title="关于搭建"></a>关于搭建</h3><p>从下午搭建到现在,基本上算是搭建完了,文章从零开始,以后一点一点填吧.</p><p>其实博客在半月前就已经开始搭建了,只不过选择了一个没有什么配置手册的主题,然后扩展还比较少…最后不得不弃坑。</p><p>之前其实是从gitee上搭建的,现在听了周围dalao的建议,随波逐流来到了github</p><p>关于现在搭建的方法,使用Github + Hexo + Matery.</p><br><p>测试一下HelloWorld</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, world!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">:</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><br><p>测试一下LaTeX</p><p>$$ \LARGE{S_k=\sum_{i=1}^{k}a_i} $$</p><br><p>测试一下内嵌JS</p><p style="text-align: center"><a href="/" style="font-size:25px; text-align:center;"> Ciyang's Blog </a></p><br><h3 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h3><p>作者:Ciyang </p><p>现于 SD-SLYZ 上高中,是一名现役OIer,爱搞一些黑科技,写点高（la）端（ji）题解,出点毒（jian）瘤（dan）题,其实还仍是个中二少年……</p><p>之前自己发明过MidHeap（BST）, 块状字典树（边压Trie）, 后来才知道已经被发明过了,但还是一直热衷于自创毒瘤数据结构来一举成名,其实毫无卵用.</p><p>最近打算颓U3D,做一款SLG网络国战手游,想的很美好,然后并没有时间和精力,还是先熟练U3D的基本操作吧.</p><p>顺便说一句,头像及其沙雕,所以凑活着看,以后再改.</p><p>联系方式:</p><pre><code>  QQ: 896681584  Github: Xciyang  网站通用昵称: Ciyang</code></pre><h3 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h3><p>这个博客不一定只发题解,多数应该还是一些黑科技,学习总结和经历之类的东西吧.</p><p>想设成粉色背景,然后估计被怼的几率比较大,就换了个颜色.</p><p>博客还会不断优化</p><p>相册会陆续换成自己的</p><p>借此吐槽一下这个主题</p><p>关于里面的技能是什么???为什么需要自己填写,自己写百分比…</p><p>其他技能又是什么???为什么要把文章标签当作其他技能…我的技能是闲聊…好像有道理.</p><p>现在已经关闭了那个功能,以后再自己实现吧.</p><h3 id="利益相关"><a href="#利益相关" class="headerlink" title="利益相关"></a>利益相关</h3><p>欢迎收藏!</p><p>欢迎加友链!</p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
