<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>Ciyang’s Blog</title>
  
  <subtitle>Ciyang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xciyang.github.io/"/>
  <updated>2019-12-19T10:00:13.735Z</updated>
  <id>https://xciyang.github.io/</id>
  
  <author>
    <name>Ciyang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UVA751 - Triangle War</title>
    <link href="https://xciyang.github.io/2019-12/19-luoguuva751/"/>
    <id>https://xciyang.github.io/2019-12/19-luoguuva751/</id>
    <published>2019-12-19T09:49:45.000Z</published>
    <updated>2019-12-19T10:00:13.735Z</updated>
    
    <content type="html"><![CDATA[<p>【UVA751】Triangle War<br>题目链接1: <a href="https://www.luogu.com.cn/problem/UVA751" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/UVA751</a><br>题目链接2: <a href="https://www.luogu.com.cn/jump/uva/751" target="_blank" rel="noopener">https://www.luogu.com.cn/jump/uva/751</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近看R在玩某树来做黑白棋AI，让我也想学习博弈相关内容。然后学了max-min策略，然后又学了alpha-beta剪枝。</p><p>这个题是练习max-min策略+alpha-beta剪枝的好题，但是我们也可以记忆化搜索。</p><a id="more"></a><p>并且此题状态少，记忆化只需要20ms，比用alpha-beta剪枝的做法要快一些。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>当然我做这道题还是想学习alpha-beta剪枝的，使用此算法的题解已有，所以不多加解释。</p><p>此题有两种max-min策略的解法，解法1是最大最小化最终胜负（1为先手胜利，-1为后手胜利），解法2是最大最小化最终得分差（先手得分-后手得分），当然流程就是先手最大化此值，后手最小化此值。</p><p>至于局面的存储，与已有题解类似，存储边的编号，然后用二进制表示已连接的边。而三角形连接我们就手写一个数组表示需要哪三条边（很麻烦）。这个题只有单位三角形得分，似乎题意里没说。</p><p>再来说两种解法的差异，因为最终胜负在一方大于等于5分就可判定，所以解法1效率较高，并且我们还可用使用alpha-beta剪枝来优化。</p><p>当然我们也可以用解法2。有一个显然的结论，无论此步是A还是B，一个状态只会对应一个最优得分。那么就可以使用记忆化，已知状态总共有$(1 &lt;&lt; 18) - 1$种，这样效率就高了。并且我们每组数据前不需要清空记忆化数组，因为一个状态对应一个分数，并不需要知道你是如何到达此状态的。</p><p>实现时先模拟给出的N步，然后记录双方已得分数。然后max_min搜索，如果此步得分，继续操作，如果此步不得分，就让对手操作，然后减去对手操作的分数，如果全部连接就返回0，每层都是最大化自己的得分。至于为什么双方都是最大化，我给出以下解释：A最大化(A的得分-B的得分)，B最大化(B的得分-A的得分)，所以都是最大化。</p><p>在最终判定胜负时，设当前玩家为p(p为0或1)，若p已得分数+max_min(从p开始)的结果&gt;(p^1)的分数就判定p胜利，否则(p^1)胜利。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>解法1</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> edg[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> tri[] = &#123;(<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">0</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">2</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">3</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">7</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">2</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">5</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">5</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">6</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">10</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">8</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">9</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">15</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">7</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">9</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">11</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">11</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">10</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">13</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">13</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">14</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">17</span>)&#125;;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> addedge(x, y, z) (edg[x][y] = edg[y][x] = z)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">addedge(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);</span><br><span class="line">addedge(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>);</span><br><span class="line">addedge(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>);</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-comment">// 本连边方式不推荐学习，因此部分内容已省略，相信有更好的方式</span></span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> T, n, tmpx, tmpy;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">nextStep</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lst, <span class="hljs-keyword">int</span> nst)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-comment">// lst 为之前状态 nst 为当前状态</span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)</span><br><span class="line"><span class="hljs-keyword">if</span>((lst &amp; tri[i]) != tri[i] &amp;&amp; (nst &amp; tri[i]) == tri[i]) ++cnt;</span><br><span class="line"><span class="hljs-keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> full = (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">18</span>) - <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">alpha_beta</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nowp, <span class="hljs-keyword">int</span> st, <span class="hljs-keyword">int</span> alpha, <span class="hljs-keyword">int</span> beta, <span class="hljs-keyword">int</span> ans[<span class="hljs-number">2</span>])</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(ans[<span class="hljs-number">0</span>] &gt;= <span class="hljs-number">5</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(ans[<span class="hljs-number">1</span>] &gt;= <span class="hljs-number">5</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> fst = full ^ st, nst;</span><br><span class="line"><span class="hljs-keyword">while</span>(fst) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> edge = fst &amp; (-fst);</span><br><span class="line"><span class="hljs-comment">// 枚举连边</span></span><br><span class="line"><span class="hljs-keyword">int</span> res = nextStep(st, (nst = st | edge));</span><br><span class="line"><span class="hljs-keyword">if</span>(res) &#123;</span><br><span class="line">ans[nowp] += res;</span><br><span class="line">(nowp ? beta : alpha) = (nowp ? min&lt; <span class="hljs-keyword">int</span> &gt; : max&lt; <span class="hljs-keyword">int</span> &gt;)((nowp ? beta : alpha), alpha_beta(nowp, nst, alpha, beta, ans));</span><br><span class="line">ans[nowp] -= res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">(nowp ? beta : alpha) = (nowp ? min&lt; <span class="hljs-keyword">int</span> &gt; : max&lt; <span class="hljs-keyword">int</span> &gt;)((nowp ? beta : alpha), alpha_beta(nowp ^ <span class="hljs-number">1</span>, nst, alpha, beta, ans));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 压行写法</span></span><br><span class="line"><span class="hljs-keyword">if</span>(alpha &gt;= beta) <span class="hljs-keyword">break</span>;</span><br><span class="line"><span class="hljs-comment">// alpha-beta剪枝</span></span><br><span class="line">fst -= edge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> nowp ? beta : alpha;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t = <span class="hljs-number">1</span>; t &lt;= T; t++) &#123;</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="hljs-keyword">int</span> st = <span class="hljs-number">0</span>, p = <span class="hljs-number">0</span>, ans[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0</span>&#125;;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; tmpx &gt;&gt; tmpy;</span><br><span class="line"><span class="hljs-keyword">int</span> res = nextStep(st, st | (<span class="hljs-number">1</span> &lt;&lt; edg[tmpx][tmpy]));</span><br><span class="line">st = st | (<span class="hljs-number">1</span> &lt;&lt; edg[tmpx][tmpy]);</span><br><span class="line"><span class="hljs-keyword">if</span>(res) &#123;</span><br><span class="line">ans[p] += res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">p ^= <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 模拟</span></span><br><span class="line"><span class="hljs-keyword">int</span> res = alpha_beta(p, st, <span class="hljs-number">-0x3f3f3f3f</span>, <span class="hljs-number">0x3f3f3f3f</span>, ans);</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Game "</span> &lt;&lt; t &lt;&lt; <span class="hljs-string">": "</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(res &gt;= <span class="hljs-number">0</span>) &#123;</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"A wins."</span> &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"B wins."</span> &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法2</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> edg[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> tri[] = &#123;(<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">0</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">2</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">3</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">7</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">2</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">5</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">5</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">6</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">10</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">8</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">9</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">15</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">7</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">9</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">11</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">11</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">10</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">13</span>),</span><br><span class="line"> (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">13</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">14</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">17</span>)&#125;;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> addedge(x, y, z) (edg[x][y] = edg[y][x] = z)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> full = (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">18</span>) - <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> mm[full + <span class="hljs-number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">addedge(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);</span><br><span class="line">addedge(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>);</span><br><span class="line">addedge(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>);</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-comment">// 本连边方式不推荐学习，因此部分内容已省略，相信有更好的方式</span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; full; i++) mm[i] = <span class="hljs-number">-0x3f3f3f3f</span>;</span><br><span class="line">mm[full] = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> T, n, tmpx, tmpy;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">nextStep</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lst, <span class="hljs-keyword">int</span> nst)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">// lst 为之前状态 nst 为当前状态</span></span><br><span class="line"><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)</span><br><span class="line"><span class="hljs-keyword">if</span>((lst &amp; tri[i]) != tri[i] &amp;&amp; (nst &amp; tri[i]) == tri[i]) ++cnt;</span><br><span class="line"><span class="hljs-comment">// 本次得分</span></span><br><span class="line"><span class="hljs-keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max_min</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nowp, <span class="hljs-keyword">int</span> st)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(mm[st] != <span class="hljs-number">-0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> mm[st];</span><br><span class="line"><span class="hljs-keyword">int</span> fst = full ^ st, nst, maxx = <span class="hljs-number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(fst) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> edge = fst &amp; (-fst);</span><br><span class="line"><span class="hljs-comment">// 枚举连边</span></span><br><span class="line"><span class="hljs-keyword">int</span> res = nextStep(st, (nst = st | edge));</span><br><span class="line"><span class="hljs-keyword">if</span>(res) &#123;</span><br><span class="line">maxx = max(maxx, res + max_min(nowp, nst));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">maxx = max(maxx, -max_min(nowp ^ <span class="hljs-number">1</span>, nst));</span><br><span class="line">&#125;</span><br><span class="line">fst -= edge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> mm[st] = maxx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t = <span class="hljs-number">1</span>; t &lt;= T; t++) &#123;</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="hljs-keyword">int</span> st = <span class="hljs-number">0</span>, p = <span class="hljs-number">0</span>, ans[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0</span>&#125;;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; tmpx &gt;&gt; tmpy;</span><br><span class="line"><span class="hljs-keyword">int</span> res = nextStep(st, st | (<span class="hljs-number">1</span> &lt;&lt; edg[tmpx][tmpy]));</span><br><span class="line">st = st | (<span class="hljs-number">1</span> &lt;&lt; edg[tmpx][tmpy]);</span><br><span class="line"><span class="hljs-keyword">if</span>(res) &#123;</span><br><span class="line">ans[p] += res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">p ^= <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 模拟</span></span><br><span class="line"><span class="hljs-keyword">int</span> res = max_min(p, st);</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Game "</span> &lt;&lt; t &lt;&lt; <span class="hljs-string">": "</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>((ans[p] + res &gt; ans[p ^ <span class="hljs-number">1</span>]) ^ p) &#123;</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"A wins."</span> &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"B wins."</span> &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>不过这个题3s时限怕是有点水了。</p><p>然后还可以做<a href="https://www.luogu.com.cn/problem/P4363" target="_blank" rel="noopener"> 【九省联考2018】一双木棋chess</a>，也可以使用max-min策略+记忆化搜索。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【UVA751】Triangle War&lt;br&gt;题目链接1: &lt;a href=&quot;https://www.luogu.com.cn/problem/UVA751&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.com.cn/problem/UVA751&lt;/a&gt;&lt;br&gt;题目链接2: &lt;a href=&quot;https://www.luogu.com.cn/jump/uva/751&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.com.cn/jump/uva/751&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近看R在玩某树来做黑白棋AI，让我也想学习博弈相关内容。然后学了max-min策略，然后又学了alpha-beta剪枝。&lt;/p&gt;
&lt;p&gt;这个题是练习max-min策略+alpha-beta剪枝的好题，但是我们也可以记忆化搜索。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://xciyang.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xciyang.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="alpha-beta剪枝" scheme="https://xciyang.github.io/tags/alpha-beta%E5%89%AA%E6%9E%9D/"/>
    
      <category term="记忆化搜索" scheme="https://xciyang.github.io/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>CSP-S 2019 · AFO游记</title>
    <link href="https://xciyang.github.io/2019-12/09-csps2019afo/"/>
    <id>https://xciyang.github.io/2019-12/09-csps2019afo/</id>
    <published>2019-12-09T12:02:17.000Z</published>
    <updated>2020-01-04T13:48:53.574Z</updated>
    
    <content type="html"><![CDATA[<p>打算写一篇游记，以便以后能够回想起这段美好的颓废时光。</p><p>然而一直没有时间写游记，因为最近来机房的次数变少了。其实几周前就已经写完在草稿纸上了，而且一部分已经打到家里的笔记本上了，然后忘了保存到QQ里，因此打算再重写一篇。</p><p>内容较多，语言冗长，请见谅。</p><a id="more"></a><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day -1"></a>Day -1</h2><p>上午一题没写，虽说有场模拟赛但并不想打。在Github和知乎上来回切换颓了一上午加一中午，中午还刷了会（低俗）微博？</p><p>下午Loli召开神圣的经验传授大会，大佬们纷纷讲话，当然好多大佬都回家休息了。轮到我时就只能说说自己的骗分和爆零经历了，然而有些想说的微不足道的注意事项上台全忘了。开完会继续颓废，然后找R一起看了一道Tarjan。</p><p>从R的一个暴力的基础上优化成可过，但是要再写多个小算法。R准备写的时候看到了我的此题的记录，好像Tarjan后只需几行（我很久前AC时大概率是抄的题解，已经全忘了），稍微一下觉得有锅，出了几组数据把暴力都hack了。又手推了几组数据想出了正确思路，然后样例过了，提交全WA。再看代码，多读入一个数字M，竟然过了样例。删去后，样例反而过不去了，一顿查错调试改了好几处小错误，终于AC了。</p><p>AC完并没有很激动，反而我们都很慌。这种错误在NOIP中年年都有，从AC到零蛋，从省队到送退役。又和R讨论发现明天此时已经快到日照了，都开始慌了。之后全员打扫机房，做好退役的准备。</p><p>晚上请假回家颓废，收拾行李。</p><h2 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h2><p>早上想打打板子，发现AK司在打一场名为<code>模板题大赛</code>的洛谷个人赛。我也跟着报名了，这大概是退役前最后一场模拟赛。看题后，发现并不是模板题，T1打了一个DFS，然后被毒瘤输出（全文比较，不忽略空格及换行）卡了，很久才通过。再看排行榜，Rank1仅通过3题，总共5题，AK司通过2题。</p><p>又看了T2，也不是模板题，而且并没有什么思路，只知道是个DP，但还需要一些性质或者其他算法结合一下。此时已经中午，先想了个三分处理就去吃饭了，回来发现还是不会。打算再意识写写的时候已经12点，该出发去校门口集合了。</p><p>然后就很正常的坐上了车，开始颓手机。</p><p>到达考点校区已经五点多了吧，先去了宿舍，和几个学弟（学长），ArachnidaKing和Juan_Feng在一个宿舍。然后去吃饭，逛超市，准备试机。</p><p>中途还与AK司讨论了上午的模拟赛，T2思路复杂，而且显然过多难以证明因此放弃，并认为CSP不会考这种智力题。</p><p>因为SDSC来过的原因，所以对校区比较熟悉，几行人就直接去了考场大楼（实验实训中心）。在楼下面LED滚动屏上还看到了<code>祝CPS考生考试顺利！</code>，纷纷拍照留念。这次对没来过的人挺友好的，楼内都有路标，这样绕来绕去也不会晕了。</p><p>排队进入考场，找到座号，一切顺利。系统Win7，键盘可用，调试可用。然后顺次打了快读、SPFA、LCA，打的过程中想到明天就在这看题了，就觉得又稳又慌。等到打一半模拟退火时试机结束了。我本想跑回宿舍，然而中途被带队老师叫住<code>跟着大部队!</code>。</p><p>晚上先和学弟颓了会王者，用着极慢的网速还拿了MVP，感觉RP++了。再打开之前准备的NOIP算法索引，最后再看看代码。大概十一点半多久睡着了吧。</p><h2 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>进考场前都非常正常，并没有RP—的事情发生。进了考场，先建好文件夹，准备输入压缩包密码。密码是<code>认真思考</code>和<code>2019</code>组合起来，等待解压，打开PDF。</p><p>先大概记了一下时限和内存，还有编译指令。顺序开题，T1题面较复杂，然而看到<code>前一半，后一半</code>的时候就觉得是个log做法，递归或者二分。再看到数据范围$N &lt; 64$时发现比较稳，直接开始写代码。虽然只过了第一个样例，但是立刻发现填0后紧接着要去反，然后样例都过了。又看到数据范围$K &lt; 2^{64} - 1$，再想到ULL最大就是这个数字，我改成ULL。又发现代码中让K自加了，因此特判了$2^{64} - 1$的点。又开始美化代码，将$(1 &lt;&lt; i) / 2$美化成$(1 &lt;&lt; (i - 1))$，然而比赛后才发现这竟然是个坑点，碰巧没踩中。此时大概半个小时，写了个暴力vector和string对拍一下都过了，就觉得100稳了。</p><p>再看T2，一开始觉得不可做。当看到<code>从1出发</code>时，才觉得可做。立刻想到一个$O(N)$的正确性未知的处理单个串做法，发现和普通的括号匹配只差了个计数。只需要维护两个计数器，遇到<code>(</code>清零连续计数器并放入栈内，遇到<code>)</code>时将计数器赋值为栈顶+1并且弹出，在维护一个答案计数器，然后按题意即可。再考虑回溯，用手工栈和系统栈结合一下就过了样例一。然而样例二没过，发现是少了一条语句，补完过了样例二。又手动开栈过了样例三，感觉很稳就没有对拍。</p><p>此时已经2h，觉得自己200比较稳，就休息了一下。看完T3题面，并没有读懂，好像读颠倒了。然而做起来只是逻辑关系更混乱了，并不影响答案。先写了个10分全排列，然后猜了个性质。想了好久，打个了个LCA+BFS，连样例二都没过，又调试微调也没什么用。全部删掉打了个随机化发现和暴力没啥区别。此时就剩整理文件、检查考号、文件名的时间了。</p><p>出了考场，遇到了asuldb和R，交流发现我T1并没有踩坑，然后T3确实很难。吃完饭回宿舍，先是和学弟颓了局王者，然而网速非常慢，全场被队友带飞。又玩了4399小游戏，玩了小学时爱玩的造梦西游3和一些小游戏。四点多的时候想起了机器人赛跑，六七个人一起玩，都非常愉悦。然而中途Loli敲门，我去开门，幸好大家反应快，只奶了几句就走了。</p><p>晚上看知乎，上午T3的出题人匿名发题解。T2被吐槽样例恶臭，而且非常水，引起了一定恐慌。再复习了些代码，十一点半熄灯，很快就睡着了。</p><p>Day1期望得分：100+100(?)+10=210</p><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>起床，吃饭都非常正常。与ctz、ArachnidaKing走在去考场的路上，中途偶遇Loli，他拍了拍ArachnidaKing的肩膀：<code>别着急，慢慢来</code>。进了考场，肚子感到不适，此时离开始还有二十多分钟，又申请出了考场。回来时只剩下十几分钟了，依然是考前准备，听到密码是<code>抓紧时间</code>和几个字符组合。</p><p>一样的流程，顺序开题。T1看了觉得是DP，但是数据范围又很复杂，差点看晕了。计算了复杂度为$O(M^N)$的DFS，包含多个范围，能拿到32分的好成绩，那就先打上了。再仔细思考，感觉正解肯定效率也不太高。又感觉是舞蹈链，但是差别有点大，而且CSP应该不会考。</p><p>只好去看T2，题目形式化的东西看起来不可做。但是发现时自行设置划分数，就觉得没那么难。先想到一个$O(N)$预处理和统计答案时就开始写，倒序的思想，然而过不去样例二。出了几组数据hack后，发现可以用单调栈。其实是自己傻了，把栈想成先进先出了，连样例一都过不去。写了个dfs对拍，发现倒序是正确的，只是预处理有问题。然后单调栈改成单调队列依旧没有调出来，只能改成$O(N^2)$能拿64分。</p><p>此时已经2h多，计算一下两天总分刚过300，有点慌张。抓紧看了T3，看到题目名称是<code>树的重心</code>就知道必不是树的重心。题目描述比较清楚，暴力做法大概就是麻烦的DFS。又看数据范围，$O(N^2)$可拿40分，一条链的再多拿15分，二叉树并不熟悉，先不考虑。然后急匆匆的打完部分分，样例过了，再手推二叉树，发现连二叉树具体是啥都不知道，只能放弃。</p><p>然而比赛只剩半个多小时，回去看T1。仔细想了想，觉得自己想不出正解，想出了也写不完了，仔细思考数据范围，发现有个$O(N^M)$的DP，能多32分。但是这种DP我并不熟悉，似乎记忆化并不可行（？），大概是想简单了。写完后就离考试结束只剩十分钟了，然而样例并没有过，因为是3维数组所以不易调试（现在想想应该先打2维的）只能放弃，恢复成原来的代码。最后再检查程序、文件夹然后就交卷了。</p><p>出考场交流好像很多人都挂的很厉害，似乎我分数还行，不会被Loli强制退役？问了潮发现今天T1确实可以多维数组DP，还是自己平常没怎么打，一到正式比赛把细节都忘了。</p><p>下午觉得自己今天T1没有取摸，可能只有24分了。晚上回家又听说学弟D1T2挂了，然后我也默写提交试一试。提交后只有55分，发现是一条语句没加，导致只能处理一条链的情况。细思极恐，也不知道是默写忘了还是考场上就没加，毕竟样例又那么水。</p><p>又看了SDOI群里，听说390左右能清北冬令营？怕是自己真的就差了今天T1没打完的部分分。</p><p>Day2期望得分：32+64+55=151</p><h2 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5+"></a>Day 5+</h2><p>拿下源程序，都没写挂。在Luogu和Loli的数据上测了，发现D2T2还多了24分，怕是数据水（确实是）。然后看到csp.ac的数据是361，才知道Luogu是真的数据水。。。再看牛客，大家都莫名其妙挂了分，只能等着CCF发成绩了。</p><h2 id="Day-Inf"><a href="#Day-Inf" class="headerlink" title="Day Inf"></a>Day Inf</h2><p>官方成绩100+100+10+32+64+55=361，和考场上估计的一模一样。虽然这个分数也不算差，但是还是有很多遗憾。</p><p>和THUWC、PKUWC无缘了，只能盼望着CCF给我去NOIWC见见世面的机会了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打算写一篇游记，以便以后能够回想起这段美好的颓废时光。&lt;/p&gt;
&lt;p&gt;然而一直没有时间写游记，因为最近来机房的次数变少了。其实几周前就已经写完在草稿纸上了，而且一部分已经打到家里的笔记本上了，然后忘了保存到QQ里，因此打算再重写一篇。&lt;/p&gt;
&lt;p&gt;内容较多，语言冗长，请见谅。&lt;/p&gt;
    
    </summary>
    
    
      <category term="记忆" scheme="https://xciyang.github.io/categories/%E8%AE%B0%E5%BF%86/"/>
    
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="记忆" scheme="https://xciyang.github.io/tags/%E8%AE%B0%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>技巧 - 如何优雅的写代码</title>
    <link href="https://xciyang.github.io/2019-10/08-you-ya-de-xie-dai-ma/"/>
    <id>https://xciyang.github.io/2019-10/08-you-ya-de-xie-dai-ma/</id>
    <published>2019-10-08T03:14:24.000Z</published>
    <updated>2019-12-09T12:30:52.098Z</updated>
    
    <content type="html"><![CDATA[<p>本篇分享写代码相关的一些技巧，可用且不仅用于OIer。</p><p>相关内容：DevC++、Visual Studio Code、MinGW、Git、Github</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>临退役，将自己写代码一年多的经验分享给后人。可能用处不大，也可以当个说明书看。</p><p>内容仅供参考。</p><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><h3 id="DevC"><a href="#DevC" class="headerlink" title="DevC++"></a>DevC++</h3><p>适合初学者使用，优点是上手容易、功能均衡，即可用来写题，也可用来写简单项目。</p><p>然而缺点也很多，自带mingw版本较低，调试能力较低，经常卡死，各种BUG。</p><p>写题这个上手就会，还是有一些技巧的。这里默认使用5.11版本，应该是最新版。</p><p>并且CSP好像只能用这个编辑器。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>此编辑器一般来说无需配置就能使用。</p><h4 id="代码补全"><a href="#代码补全" class="headerlink" title="代码补全"></a>代码补全</h4><p>其实一直是存在的，然而使用的快捷键和输入法冲突了，你只能等待自动出代码补全。<strong>其实可以手动更改！</strong></p><p>步骤：工具-&gt;快捷键选项-&gt;Show Code Completion，将快捷键改成你想要的。</p><p>在写代码时按下快捷键即可弹出补全对话框进行选择，当然有时会出现BUG。</p><p><img src="/images/Code1.jpg" alt="Code Completion"></p><h4 id="AStyle"><a href="#AStyle" class="headerlink" title="AStyle"></a>AStyle</h4><p>代码格式化工具，能简单格式化代码。<strong>默认快捷键Ctrl+Shift+A。</strong></p><p>步骤：Astyle-&gt;格式化选项，支持多种风格，可以自行了解。</p><h4 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h4><p>提供了大量代码模板，可以自己添加删除，软件自带一些模板。</p><p>先说如何更改，步骤：工具-&gt;编辑器属性-&gt;代码-&gt;插入，先点击添加再写代码，其中<code>*|*</code>代表待填位置。点击移除可以移除不想要的。</p><p>那么如何使用？<strong>软件左上角</strong></p><p><img src="/images/Code2.jpg" alt="Code Template"></p><p>自带的几个模板在写项目时经常使用。</p><h4 id="缺省源"><a href="#缺省源" class="headerlink" title="缺省源"></a>缺省源</h4><p>在原来机房盛行DevC++时非常热门，应该说非常好用了。创建空文件自动写入缺省源内容，缺点就是如果缺省源出锅，写的程序都将出现相同问题。</p><p>步骤：工具-&gt;编辑器属性-&gt;代码-&gt;缺省源，更改后确定即可。</p><h4 id="编译器选项"><a href="#编译器选项" class="headerlink" title="编译器选项"></a>编译器选项</h4><p>如果想自己加高版本的编译器，就这样做吧。</p><p>步骤：工具-&gt;编译选项-&gt;由文件夹添加编译器设置-&gt;选择文件夹（你下载的mingw)，这样是最方便的。</p><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><p>非常好的一款编辑器，优点是功能全面、可扩展性高、打开文件速度快、手感极佳、安装较方便。</p><p>当然也有一点缺点和问题，对C++的支持仍需改进，GDB调试监视变量需要优化，文件夹及文件名不支持汉字，写项目不易配置。</p><p>但是我还是非常推荐，写前端、JS非常好用。</p><h4 id="基本插件"><a href="#基本插件" class="headerlink" title="基本插件"></a>基本插件</h4><p>Chinese language简体中文支持，自己选择一个喜欢的图标主题、主题。</p><h3 id="编写调试C"><a href="#编写调试C" class="headerlink" title="编写调试C++"></a>编写调试C++</h3><p>首先需要下载扩展C/C++，才能正常编写调试C++。</p><p>然后进行配置，如果你不使用调试可以使用另一种方法。</p><p>先创建一个文件夹并通过vscode打开，下载mingw，此文章后面会给出下载地址。</p><p>然后在当前打开的文件夹下创建一个名为.vscode的文件夹（若未自动创建），再创建一个名为c_cpp_properties.json的文件，然而这步现在似乎可有可无，不过做了也没有坏处。</p><p>将以下内容写入c_cpp_properties.json文件：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Win32"</span>,</span><br><span class="line">            <span class="hljs-attr">"includePath"</span>: [</span><br><span class="line">                <span class="hljs-string">"$&#123;workspaceFolder&#125;/**"</span>,</span><br><span class="line">                <span class="hljs-string">"D:/Ciyang/mingw64/include"</span>,</span><br><span class="line">                <span class="hljs-string">"D:/Ciyang/mingw64/x86_64-w64-mingw32/include"</span>,</span><br><span class="line">                <span class="hljs-string">"D:/Ciyang/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include"</span>,</span><br><span class="line">                <span class="hljs-string">"D:/Ciyang/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++"</span>,</span><br><span class="line">                <span class="hljs-string">"D:/Ciyang/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward"</span>,</span><br><span class="line">                <span class="hljs-string">"D:/Ciyang/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="hljs-attr">"defines"</span>: [</span><br><span class="line">                <span class="hljs-string">"_DEBUG"</span>,</span><br><span class="line">                <span class="hljs-string">"UNICODE"</span>,</span><br><span class="line">                <span class="hljs-string">"_UNICODE"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="hljs-attr">"intelliSenseMode"</span>: <span class="hljs-string">"gcc-x64"</span>,</span><br><span class="line">            <span class="hljs-attr">"browse"</span>: &#123;</span><br><span class="line">                <span class="hljs-attr">"path"</span>: [</span><br><span class="line">                    <span class="hljs-string">"$&#123;workspaceFolder&#125;"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="hljs-attr">"limitSymbolsToIncludedHeaders"</span>: <span class="hljs-literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="hljs-attr">"version"</span>: <span class="hljs-number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>includePath</code>中的<code>D:/Ciyang/mingw64</code>改为你的mingw路径，都改为可用的存在的路径，甚至你可以用DevC++自带的mingw。</p><p>其他不需要管，可以自行查阅，不影响正常编写代码。现在创建一个HelloWorld.cpp，随便写一些代码，如果有莫名其妙的报错先不用管。</p><p>在vscode中，F5可以调试运行。现在我们按下F5，将会显示没有配置launch.json，然后就可以点击创建。（当然你可以自己在.vscode文件夹中创建launch.json文件）。</p><p>将以下内容写入launch.json文件：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"version"</span>: <span class="hljs-string">"0.2.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"C++ Luauch (GDB)"</span>,</span><br><span class="line">            <span class="hljs-attr">"type"</span>: <span class="hljs-string">"cppdbg"</span>,</span><br><span class="line">            <span class="hljs-attr">"request"</span>: <span class="hljs-string">"launch"</span>,</span><br><span class="line">            <span class="hljs-attr">"program"</span>: <span class="hljs-string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe"</span>,</span><br><span class="line">            <span class="hljs-attr">"args"</span>: [],</span><br><span class="line">            <span class="hljs-attr">"stopAtEntry"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">            <span class="hljs-attr">"cwd"</span>: <span class="hljs-string">"$&#123;fileDirname&#125;"</span>,</span><br><span class="line">            <span class="hljs-attr">"environment"</span>: [],</span><br><span class="line">            <span class="hljs-attr">"externalConsole"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line">            <span class="hljs-attr">"preLaunchTask"</span>: <span class="hljs-string">"build-bug"</span>,</span><br><span class="line">            <span class="hljs-attr">"MIMode"</span>: <span class="hljs-string">"gdb"</span>,</span><br><span class="line">            <span class="hljs-attr">"miDebuggerPath"</span>: <span class="hljs-string">"D:/mingw64/bin/gdb.exe"</span>,</span><br><span class="line">            <span class="hljs-attr">"setupCommands"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-attr">"description"</span>: <span class="hljs-string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    <span class="hljs-attr">"text"</span>: <span class="hljs-string">"-enable-pretty-printing"</span>,</span><br><span class="line">                    <span class="hljs-attr">"ignoreFailures"</span>: <span class="hljs-literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>悬停一些字符串上面会显示帮助信息，<code>miDebuggerPath</code>需要改为你的gdb路径，一般在mingw/bin中。</p><p><code>preLaunchTask</code>是预启动任务，通俗来说，启动程序前运行的任务。如果你想每次运行程序都重新编译，就需要设置。</p><p>这时候回到cpp再按F5就会让你配置任务，在.vscode文件夹中创建tasks.json文件，我们将要配置编译任务。</p><p>将以下内容写入tasks.json文件：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"version"</span>: <span class="hljs-string">"2.0.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-attr">"label"</span>: <span class="hljs-string">"build"</span>,</span><br><span class="line">            <span class="hljs-attr">"command"</span>: <span class="hljs-string">"g++"</span>,</span><br><span class="line">            <span class="hljs-attr">"args"</span>: [</span><br><span class="line">                <span class="hljs-string">"\"$&#123;file&#125;\""</span>,</span><br><span class="line">                <span class="hljs-string">"-o"</span>,</span><br><span class="line">                <span class="hljs-string">"\"$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;\".exe"</span>,</span><br><span class="line">                <span class="hljs-string">"-O2"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="hljs-attr">"type"</span>: <span class="hljs-string">"shell"</span>,</span><br><span class="line">            <span class="hljs-attr">"problemMatcher"</span>: [</span><br><span class="line">                <span class="hljs-string">"$gcc"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-attr">"label"</span>: <span class="hljs-string">"build-bug"</span>,</span><br><span class="line">            <span class="hljs-attr">"command"</span>: <span class="hljs-string">"g++"</span>,</span><br><span class="line">            <span class="hljs-attr">"args"</span>: [</span><br><span class="line">                <span class="hljs-string">"-g"</span>,</span><br><span class="line">                <span class="hljs-string">"\"$&#123;file&#125;\""</span>,</span><br><span class="line">                <span class="hljs-string">"-o"</span>,</span><br><span class="line">                <span class="hljs-string">"\"$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;\".exe"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="hljs-attr">"type"</span>: <span class="hljs-string">"shell"</span>,</span><br><span class="line">            <span class="hljs-attr">"problemMatcher"</span>: [],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-attr">"label"</span>: <span class="hljs-string">"build-bug-Wall"</span>,</span><br><span class="line">            <span class="hljs-attr">"command"</span>: <span class="hljs-string">"g++"</span>,</span><br><span class="line">            <span class="hljs-attr">"args"</span>: [</span><br><span class="line">                <span class="hljs-string">"-g"</span>,</span><br><span class="line">                <span class="hljs-string">"-Wall"</span>,</span><br><span class="line">                <span class="hljs-string">"\"$&#123;file&#125;\""</span>,</span><br><span class="line">                <span class="hljs-string">"-o"</span>,</span><br><span class="line">                <span class="hljs-string">"\"$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe\""</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="hljs-attr">"type"</span>: <span class="hljs-string">"shell"</span>,</span><br><span class="line">            <span class="hljs-attr">"problemMatcher"</span>: [],</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>共有三个任务，分别是build（开启O2优化编译程序）、build-bug（开启调试信息编译程序）、build-bug-Wall（开启调试信息并打开最多的警告编译程序）。</p><p>其中有些<code>${file}</code>、<code>${fileDirname}</code>等为vscode提供的变量，将自动转换为一些内容。</p><p>现在再按下F5，即可运行程序，F9设置断点即可暂停程序。</p><p>更多内容可以看：<a href="https://code.visualstudio.com/docs/editor/tasks#vscode" target="_blank" rel="noopener">https://code.visualstudio.com/docs/editor/tasks#vscode</a></p><h4 id="编写运行C"><a href="#编写运行C" class="headerlink" title="编写运行C++"></a>编写运行C++</h4><p>上面的方法过于复杂，还有一种简单的方法。<strong>下载C/C++ Compile Run插件</strong></p><p>下载后，直接按F6即可自动编译cpp文件并运行。</p><p><strong>现在发现有很多BUG，不推荐使用。</strong></p><h4 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h4><p>vscode支持代码格式化，并且无需配置，<strong>快捷键Alt + Shift + F。</strong></p><p>当然，某些语言可以下载插件进行格式化。也可以自定义格式化，我写过具体的步骤。</p><p>方法：<a href="\2019-02\15-du-liu-ma-feng-tui-jian">毒瘤码风推荐</a></p><h4 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h4><blockquote><p>Q: 头文件一直报错？<br>A: 有时候出BUG无法解决，请重启vscode。如果一直报错请下载名为Include Autocomplete的扩展。</p><p>Q: 库关键字报错？<br>A: 检查c_cpp_properties.json文件。</p></blockquote><h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p>这里只介绍MinGW。</p><h3 id="MinGW"><a href="#MinGW" class="headerlink" title="MinGW"></a>MinGW</h3><p>此工具包含G++、GCC，并且可以安装很多C++库，可以直接选择下载配置完成的版本。</p><h4 id="下载方式"><a href="#下载方式" class="headerlink" title="下载方式"></a>下载方式</h4><p>安装版：<a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe/download" target="_blank" rel="noopener">https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe/download</a></p><p>机房的电脑一直安装失败，安装版似乎需要科学上网。</p><p>解压版：<a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains targetting Win64/Personal Builds/mingw-builds/8.1.0/threads-win32/sjlj/x86_64-8.1.0-release-win32-sjlj-rt_v6-rev0.7z" target="_blank" rel="noopener">https://sourceforge.net/projects/mingw-w64/files/Toolchains targetting Win64/Personal Builds/mingw-builds/8.1.0/threads-win32/sjlj/x86_64-8.1.0-release-win32-sjlj-rt_v6-rev0.7z</a></p><p>旧版本安装版：<a href="https://sourceforge.net/projects/mingw/files/latest/download" target="_blank" rel="noopener">https://sourceforge.net/projects/mingw/files/latest/download</a></p><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>下载安装（解压）后，仍需要配置环境变量。</p><p>步骤：右键计算机-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;系统变量-&gt;找到path。</p><p>如果是win7点击编辑，将原来的mingw路径删掉，我们机房电脑开机就有个Cena评测机的mingw。在末尾添加新下载的mingw/bin路径，如<code>D:\Ciyang\mingw64\bin</code>，不要忘了分号。</p><p>如果是win10，将原有的mingw移除，添加新下载的mingw路径，与win7同理。</p><p>在终端（cmd或powershell）中输入<code>g++ --version</code>查看版本号是否与下载的一致，如果未知指令表明未成功配置。</p><h4 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h4><p>常用的有<code>-o</code>、<code>-g</code>、<code>-O2</code>、<code>-Wall</code>，还有扩大栈内存指令。</p><p>更多指令，可以看：<a href="https://www.cnblogs.com/bugutian/p/4490902.html" target="_blank" rel="noopener">https://www.cnblogs.com/bugutian/p/4490902.html</a></p><h4 id="相关问题-1"><a href="#相关问题-1" class="headerlink" title="相关问题"></a>相关问题</h4><blockquote><p>Q: 为什么配置完环境变量，vscode（cmd）仍显示未知指令？<br>A: 请确保更改环境变量后重启了vscode（cmd）。</p></blockquote><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>所以为什么要讲远程仓库的使用？当然是存储代码和工作区配置，为了不同电脑（机房、自己的笔记本）能<strong>快速同步</strong>。</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>主要是为了更加酷炫，存储代码，<del>还有搭博客</del>。</p><h4 id="下载方式-1"><a href="#下载方式-1" class="headerlink" title="下载方式"></a>下载方式</h4><p>官方链接：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p><p><strong>不科学上网下载完成率0.1%。</strong></p><p>镜像下载：<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">https://github.com/waylau/git-for-win</a></p><h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><p>随机找到一个指南：<a href="https://www.bootcss.com/p/git-guide/" target="_blank" rel="noopener">https://www.bootcss.com/p/git-guide/</a></p><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><h4 id="建立仓库"><a href="#建立仓库" class="headerlink" title="建立仓库"></a>建立仓库</h4><p>步骤：注册一个账号并登录-&gt;右上角点击加号-&gt;New Repositorie-&gt;填写Repository name（库名）-&gt;可填写Description（描述）-&gt;选择Private（私有）-&gt;可选择license授权规则-&gt;选择.gitignore-&gt;Create。</p><p>如果要存储不能公开的信息就选择Private，如果都可以公开也可以设为Public。</p><p>如果要存储写的C++代码，推荐.gitignore选择C++，就不会存储exe文件和一些其他烂七八糟的文件。</p><h4 id="ssh配置"><a href="#ssh配置" class="headerlink" title="ssh配置"></a>ssh配置</h4><p>一般来说我们可以用https链接对github进行访问，当然<strong>选择ssh更加安全。</strong></p><p>随机找了个教程：<a href="https://blog.csdn.net/u013778905/article/details/83501204" target="_blank" rel="noopener">https://blog.csdn.net/u013778905/article/details/83501204</a></p><h4 id="增加远程仓库"><a href="#增加远程仓库" class="headerlink" title="增加远程仓库"></a>增加远程仓库</h4><p>我理解为给远程仓库地址起个别名</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;name&gt; &lt;address&gt;</span><br><span class="line">example : git remote add cw https://github.com/Xciyang/CodeWork.git</span><br></pre></td></tr></table></figure><h4 id="更新本地仓库-拉取远程仓库"><a href="#更新本地仓库-拉取远程仓库" class="headerlink" title="更新本地仓库/拉取远程仓库"></a>更新本地仓库/拉取远程仓库</h4><p>一般称作更新、拉取。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch &lt;name&gt; &lt;branch&gt;</span><br><span class="line">example : git fetch cw master</span><br><span class="line">git pull &lt;name&gt; &lt;branch&gt;</span><br><span class="line">example : git pull cw master</span><br></pre></td></tr></table></figure><h4 id="暂存更改"><a href="#暂存更改" class="headerlink" title="暂存更改"></a>暂存更改</h4><p>如果你写了一道新题，改了一些代码，就会造成一些更改。此命令默认会按照当前文件夹下的.gitignore进行忽略。<code>.</code>为暂存所有更改。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file&gt;</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><h4 id="查看当前状态"><a href="#查看当前状态" class="headerlink" title="查看当前状态"></a>查看当前状态</h4><p>查看当前暂存的更改。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><p>提交当前暂存的更改，并附加某些信息</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;Message&quot;</span><br></pre></td></tr></table></figure><h4 id="推送远程仓库"><a href="#推送远程仓库" class="headerlink" title="推送远程仓库"></a>推送远程仓库</h4><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;name&gt; &lt;branch&gt;</span><br><span class="line">example : git push cw master</span><br></pre></td></tr></table></figure><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>如果安装了Git，并且存在.git文件夹，vscode会自动启用源代码管理插件。还是比较好用的，<strong>通过点击就能帮你使用指令拉取提交推送文件</strong>。你唯一要做的事就是增加仓库。</p><p>拉取代码的步骤：增加仓库-&gt;拉取自-&gt;选择仓库。</p><p>推送代码的步骤：增加仓库-&gt;更改文件-&gt;暂存所有更改-&gt;编辑消息-&gt;全部提交-&gt;推送到-&gt;选择仓库，然后就完成了一次上传。</p><p><img src="/images/Code3.jpg" alt="Vscode with git"></p><h3 id="相关问题-2"><a href="#相关问题-2" class="headerlink" title="相关问题"></a>相关问题</h3><blockquote><p>Q: Connection reset by [server_ip] port 22 ？<br>A: 发现是网络问题，多试几次就好了。</p></blockquote><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果有什么需要解决的问题可以评论或其他方式指出，希望能帮到一些人。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇分享写代码相关的一些技巧，可用且不仅用于OIer。&lt;/p&gt;
&lt;p&gt;相关内容：DevC++、Visual Studio Code、MinGW、Git、Github&lt;/p&gt;
    
    </summary>
    
    
      <category term="技巧" scheme="https://xciyang.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="闲聊" scheme="https://xciyang.github.io/tags/%E9%97%B2%E8%81%8A/"/>
    
      <category term="技巧" scheme="https://xciyang.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="颓废" scheme="https://xciyang.github.io/tags/%E9%A2%93%E5%BA%9F/"/>
    
  </entry>
  
  <entry>
    <title>比赛 - AtCoder Beginner Contest 142</title>
    <link href="https://xciyang.github.io/2019-09/29-atbeginner142/"/>
    <id>https://xciyang.github.io/2019-09/29-atbeginner142/</id>
    <published>2019-09-29T00:10:39.000Z</published>
    <updated>2019-12-09T12:30:53.530Z</updated>
    
    <content type="html"><![CDATA[<p>【AtCoder Beginner Contest 142】<br>比赛链接: <a href="https://atcoder.jp/contests/abc142" target="_blank" rel="noopener">https://atcoder.jp/contests/abc142</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这次比赛略水，真是上分的好比赛。作为仅有300+rating的我直接安排，AK比赛后直接上到900+。</p><p>比赛中有几个题对我还是比较有意义的。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="A"><a href="#A" class="headerlink" title="A"></a>A</h4><p>题意翻译：</p><p>给出一个数$N$，从$1~N$中随机抽取，求抽到奇数的概率。</p><p>这题还挺简单，再看数据范围$1 &lt;= N &lt;= 100$，太水了！</p><h4 id="B"><a href="#B" class="headerlink" title="B"></a>B</h4><p>题意翻译：</p><p>第一行给出一个数$N$代表一个数列的长度，再给出$K$。第二行给出数列各项的值。求数列中大于等于$K$的个数。</p><p>数据范围$1 &lt;= N &lt;= 10^5$，也很水，入门难度。</p><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><p>题意翻译：</p><p>一个教室中有$N$名同学，给出每个同学到达教室时教室中的人$A_i$（包括自己），求出到达顺序。</p><p>数据范围$1 &lt;= N &lt;= 10^5$，正常范围。</p><p>直接上排序，按$A_i$从小到大排序，最后依次输出编号。</p><h4 id="D"><a href="#D" class="headerlink" title="D"></a>D</h4><p>这题看了好长时间才看懂题目。</p><p>题意翻译：</p><p>给出两个数$A$、$B$，求出两个数的共同约数集合的一个子集。这个子集满足各元素两两直接都互质，求出子集最多包含多少元素。</p><p>数据范围$1 &lt;= A,B &lt;= 10^{12}$。</p><p>看起来好像有点麻烦，但实际上我们先求出$C=gcd(A, B)$，那么$C$的约数就是两个数的共同约数。然后再分解质因数即可，题目转换为求一个较大的数的质因数个数。</p><p>核心代码：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> a, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> b)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> b ? gcd(b, a % b) : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans= <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> i= <span class="hljs-number">2</span>; i * i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(m % i == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        ++ans;</span><br><span class="line">        <span class="hljs-keyword">while</span>(m % i == <span class="hljs-number">0</span>) m/= i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(m &gt; <span class="hljs-number">1</span>) ++ans;</span><br></pre></td></tr></table></figure><h4 id="E"><a href="#E" class="headerlink" title="E"></a>E</h4><p>题目到这已经不再那么水了。</p><p>题意翻译：</p><p>给出一个数$N$代表多少上锁的盒子，再给出一个数$M$代表有多少钥匙。每个钥匙需要花$A_i$来购买，可以打开$B_i$个盒子，分别为$C_{ij}$，一个钥匙可以多次使用。问打开所有盒子的最小花费，若无解输出-1。</p><p>数据范围$1 &lt;= N &lt;= 12$、$1 &lt;= M &lt;= 10^3$、$1 &lt;= A_i &lt;= 10^5$</p><p>一开始没看数据范围我以为是舞蹈链，差点自闭了。然后再看数据范围，$N$比较小，于是想到状压DP。</p><p>设置一个数组$F[1 &lt;&lt; N]$表示打开某些盒子的最小花费。</p><p>先枚举$M$个钥匙钥匙，对将钥匙能打开的盒子二进制压缩到数$X$，然后取最小值。</p><p>核心代码：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getx</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> res= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= b[x]; i++) res+= (<span class="hljs-number">1</span> &lt;&lt; (c[x][i] - <span class="hljs-number">1</span>));</span><br><span class="line"><span class="hljs-keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再写转移方程，由于我比较傻，所以一开始写了$F[i | j] = min(F[i] + F[j])$，结果反而枚举的是$x = i | j$。看起来复杂度$2^{3N}$，然后确实TLE了。</p><p>然后我想把方程改为$F[i] = min(F[i], f[j] + f[i ^ j])$，现在想想好像枚举i,j就可以了，那样复杂度$2^{2N}$好像能过，可惜我比赛时没想这种方法。</p><p>我在比赛时用了更麻烦的方法，因为我想起了之前一道题，在初始化时枚举二进制所有子集全部更新。这样预处理复杂度最大$M * 2^{N}$能过，然后再DP。我就来Blog上擅用搜索引擎，搜到了<a href="https://xciyang.github.io/2019-04/22-luoguat2657/">AT2657 - Mole and Abandoned Mine</a>。</p><p>然后非常套路的预处理出每个数二进制下1的个数。</p><p>核心代码：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> res= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(x) ++res, x-= (x &amp; -x);</span><br><span class="line"><span class="hljs-keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">int</span> maxx= (<span class="hljs-number">1</span> &lt;&lt; n);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>; i &lt; maxx; i++) w[i]= getg(i);</span><br><span class="line"><span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(f));</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>, j; i &lt;= m; i++) &#123;</span><br><span class="line">    j= getx(i);</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k= j; k; k= (k - <span class="hljs-number">1</span>) &amp; j) f[k]= min(f[k], a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= <span class="hljs-number">0</span>; j &lt; maxx; j++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(w[j] != i) <span class="hljs-keyword">continue</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k= <span class="hljs-number">0</span>; k &lt; maxx; k++) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(j == k || w[k] &gt;= i || (k &amp; (~j))) <span class="hljs-keyword">continue</span>;</span><br><span class="line">            f[j]= min(f[j], f[k] + f[k ^ j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="F"><a href="#F" class="headerlink" title="F"></a>F</h4><p>终于到最后一题，比较激动。题目还挺复杂的。</p><p>题意翻译：</p><p>给出一个图G，有$N$个点，$M$条单向边，无自环和重边。求出一个子图包含$N’$个点，$M’$为这些点构成的边，满足所有点的入度和出度都为1。如果有多个子图，输出任意一个。输出$N’$和包含的点。无解输出-1。</p><p>数据范围$1 &lt;= N &lt;= 1000$、$1 &lt;= M &lt;= 2000$</p><p>感觉有点难，但毕竟SpecialJudge可以一试，可能会有简单做法。</p><p>先手膜一些图，发现暴力DFS可做。虽然是类似ACM的赛制，但剩余时间不多了，先打个试试吧。</p><p>再膜一下第三组数据，发现只要有环就一定有解。</p><p>因为入度出度为一，可以把这个图称为单环。我们从每个点DFS，让途中经过的点的所有能到达的点入度+1。这样DFS时，如果一个点入度已经大于1，那么从起始点开始一定不能与当前状态构成单环。所以我们每次DFS一个能到达的入度为1的点。点。再记录我们已经走过的点，如果又一次到达某点，那么一定形成了单环。如果某次更新时，途中走过的点的入度&gt;1了，那么这个点也不能与当前状态构成单环。</p><p>解释不清楚，核心代码：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">int</span> n, m, tmpx, tmpy, r[<span class="hljs-number">1005</span>], st[<span class="hljs-number">1005</span>], ans[<span class="hljs-number">1005</span>];</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt; <span class="hljs-keyword">int</span> &gt; edg[<span class="hljs-number">1005</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nown)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(st[nown]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">st[nown]= <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>; i &lt; edg[nown].size(); i++) &#123;</span><br><span class="line">++r[edg[nown][i]];</span><br><span class="line"><span class="hljs-keyword">if</span>(r[edg[nown][i]] &gt; <span class="hljs-number">1</span> &amp;&amp; st[edg[nown][i]]) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= <span class="hljs-number">0</span>; j &lt;= i; j++) --r[edg[nown][j]];</span><br><span class="line">st[nown]= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>; i &lt; edg[nown].size(); i++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(r[edg[nown][i]] == <span class="hljs-number">1</span> &amp;&amp; dfs(edg[nown][i])) &#123;</span><br><span class="line">ans[++ans[<span class="hljs-number">0</span>]]= nown;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>; i &lt; edg[nown].size(); i++) --r[edg[nown][i]];</span><br><span class="line">st[nown]= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我一开始的做法是，枚举每个点为起始点跑一次DFS，直到找出答案，然后就TLE了几个点，但是AC了大部分就还能救。</p><p>既然DFS都是乱搞，那就再加一个随机化。本题时限2s，那么不到1.8s我们就继续DFS。</p><p>然后复杂度我也不太会证明，因为DFS复杂度也非常玄学。大概是O(能过)。最后输出答案我还sort了一遍，因为样例是排序好的。</p><p>核心代码：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">srand(time(<span class="hljs-number">0</span>));</span><br><span class="line"><span class="hljs-keyword">while</span>(clock() &lt; CLOCKS_PER_SEC * <span class="hljs-number">1.8</span>)</span><br><span class="line"><span class="hljs-keyword">if</span>(dfs(rand() % n + <span class="hljs-number">1</span>)) <span class="hljs-keyword">break</span>;</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>仍犯了很多错误，A题一开始竟把奇数看成质数，D题枚举因数没开long long。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【AtCoder Beginner Contest 142】&lt;br&gt;比赛链接: &lt;a href=&quot;https://atcoder.jp/contests/abc142&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://atcoder.jp/contests/abc142&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这次比赛略水，真是上分的好比赛。作为仅有300+rating的我直接安排，AK比赛后直接上到900+。&lt;/p&gt;
&lt;p&gt;比赛中有几个题对我还是比较有意义的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://xciyang.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xciyang.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="比赛" scheme="https://xciyang.github.io/tags/%E6%AF%94%E8%B5%9B/"/>
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="状压DP" scheme="https://xciyang.github.io/tags/%E7%8A%B6%E5%8E%8BDP/"/>
    
      <category term="动态规划" scheme="https://xciyang.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="随机化搜索" scheme="https://xciyang.github.io/tags/%E9%9A%8F%E6%9C%BA%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>NOIP2001 - 统计单词个数</title>
    <link href="https://xciyang.github.io/2019-09/25-luogu1026/"/>
    <id>https://xciyang.github.io/2019-09/25-luogu1026/</id>
    <published>2019-09-25T03:33:20.000Z</published>
    <updated>2019-12-19T09:50:32.245Z</updated>
    
    <content type="html"><![CDATA[<p>【NOIP2001】【LuoguP1026】统计单词个数<br>题目链接: <a href="https://www.luogu.org/problem/P1026" target="_blank" rel="noopener">https://www.luogu.org/problem/P1026</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这题要不是有DP标签我还真想不出这种思路。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先题目描述有点不清楚，结合样例更加好理解。差不多为，字符串长度不超过200，单词种类不超过6个，将字符串分40段求最大单词匹配总数。</p><p>然后给出了一个性质，一个字符自能被当做一次首字符，所以就可以用线性做法。</p><p>我们先预处理，求出每个单词在字符串中的所有匹配位置。那么如果几个单词重叠了该怎么办呢？</p><p>很容易想到，字符串中某字符被当做首字母时，匹配最短的单词最优。因此我们可以求出字符串中每一个字符当首字母时的最短长度。</p><p>如果使用string可以使用find函数，但输入时较为麻烦。所以我用char数组存储，并使用strstr函数。</p><p>接下来考虑DP方程。（因为有DP标签，才会拼凑DP思路，考场上还真不一定想出DP解法）</p><p>非常典型的设一个$F[N][K]$，表示处理到第N个字符，分割为K部分。</p><p>先上经典转移方程进行修改。</p><script type="math/tex; mode=display">F[i][j] = max(F[i - 1][j], f[i - 1][j - 1])</script><p>但你会发现这样没地方加入预处理出的最短长度。因为后面转移时，单词有可能从中间被切开，这样求出答案就是错了。</p><p>然后就写了个鬼畜的方程，设$W_i$为字符串中第i字符当首字母时最短长度（如果不能匹配则无限大）。</p><p>所以$i$会影响到$i + W_i$后的答案，使他们答案+1，取个max。</p><p>然后我们以j为第一关键字，i为第二关键字枚举即可。因为我们分隔字符只会让答案变小，所以将方程改为。</p><script type="math/tex; mode=display">F[i][j] = max(F[i][j], f[i - 1][j - 1])</script><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> p, k, s, w[<span class="hljs-number">405</span>], len[<span class="hljs-number">7</span>], a[<span class="hljs-number">405</span>], f[<span class="hljs-number">205</span>][<span class="hljs-number">45</span>];</span><br><span class="line"><span class="hljs-keyword">char</span> tmps[<span class="hljs-number">405</span>], zd[<span class="hljs-number">7</span>][<span class="hljs-number">205</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; p &gt;&gt; k;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>; i &lt; p; i++) <span class="hljs-built_in">cin</span> &gt;&gt; (tmps + i * <span class="hljs-number">20</span> + <span class="hljs-number">1</span>);</span><br><span class="line">p*= <span class="hljs-number">20</span>;</span><br><span class="line"><span class="hljs-built_in">memset</span>(w, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(w));</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= s; i++) &#123;</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; zd[i], len[i]= <span class="hljs-built_in">strlen</span>(zd[i]);</span><br><span class="line"><span class="hljs-keyword">char</span> *st= <span class="hljs-built_in">strstr</span>(tmps + <span class="hljs-number">1</span>, zd[i]);</span><br><span class="line"><span class="hljs-keyword">while</span>(st) &#123;</span><br><span class="line">w[st - tmps]= min(w[st - tmps], len[i]);</span><br><span class="line">st= <span class="hljs-built_in">strstr</span>(st + <span class="hljs-number">1</span>, zd[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l= <span class="hljs-number">1</span>; l &lt;= k; l++) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= l; i &lt;= p; i++) &#123;</span><br><span class="line">f[i][l]= max(f[i][l], f[i - <span class="hljs-number">1</span>][l - <span class="hljs-number">1</span>]);</span><br><span class="line"><span class="hljs-keyword">if</span>(w[i] != <span class="hljs-number">0x3f3f3f3f</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= max(i + w[i] - <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>); j &lt;= p; j++) f[j][l]= max(f[j][l], f[i][l]) + <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(w[i] == <span class="hljs-number">1</span>) ++f[i][l];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; f[p][k] &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【NOIP2001】【LuoguP1026】统计单词个数&lt;br&gt;题目链接: &lt;a href=&quot;https://www.luogu.org/problem/P1026&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.org/problem/P1026&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这题要不是有DP标签我还真想不出这种思路。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://xciyang.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xciyang.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="动态规划" scheme="https://xciyang.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="字符串" scheme="https://xciyang.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>NOIP2015 - 斗地主增强版</title>
    <link href="https://xciyang.github.io/2019-09/20-luogu2540/"/>
    <id>https://xciyang.github.io/2019-09/20-luogu2540/</id>
    <published>2019-09-20T13:14:30.000Z</published>
    <updated>2019-12-09T12:30:52.068Z</updated>
    
    <content type="html"><![CDATA[<p>【NOIP2015】【LuoguP2540】斗地主增强版<br>题目链接: <a href="https://www.luogu.org/problem/P2540" target="_blank" rel="noopener">https://www.luogu.org/problem/P2540</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>暴力出奇迹，<del>我是搜索小名士</del>。</p><p>早在一年前就用贪心完成了普通版，然后现在忘了。</p><p>所以重新写一遍这道题，并且提高难度做增强版。看了仅剩的智商，我选择搜索。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>其实我一开始没有想着去写100分的代码，因为爆搜的复杂度太大，然后这题好像我只会爆搜。</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>首先，很容易想到一种最纯粹的爆搜。每层都将当前剩余牌可行的情况全部枚举判断，然后打出一种可行的牌进入下一层继续搜索。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">搜索是盲目的，我们考虑剪枝。    ——某金牌教练</span><br></pre></td></tr></table></figure><p>一个剪枝是搜索必备，如果当前答案大于或等于已知的最小答案，我们接下来的搜索一定不会更新答案，所以回到上一层。</p><p>然后再继续想，可以加一个启发式剪枝，计算打出所有剩余牌的最大出牌次数。</p><p>用肉眼就能推出，一副牌的最大出牌次数就是牌的数码种类数，两个王在此可以算一种。然后我们计算出当前最大出牌次数加上当前已出牌次数去更新答案，这样就会剪去接下来的一些较差的出牌方法。</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>上面的方法必不能通过本题，不需要尝试也能猜测。所以还要继续剪枝。</p><p>再稍微思考一下，我们每层搜索将全部出牌方法都枚举一遍过于暴力。我们发现，有些出牌方法自始至终永远不可行，并且可行的出牌方法一定越来越少。然后就想到了预处理，我们预处理出最开始的手牌的可行出牌方法。</p><p>这里我的代码极其鬼畜，可能对代码能力有些要求。我用了一些自认为省空间，用起来舒服的方法。将可行方法的信息写成结构体，就不演示，代码中在讲讲。</p><p>最关键的是，我们要计算每种方法的出牌数量，可用来后续我们继续优化。</p><p>这些代码全部可在输入后搜索前执行，我是将这些可行方法放到了vector中。在搜索时，枚举vector的所有元素。再进行一次针对性判断，也就是判断需要打的那几张牌就够了。</p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>我们说记录了每种方法的出牌数量。那我们从大到小排序，这样大概能优化时间，我也不知道。</p><p>在这我们提个醒，如果你将王炸、对子、三张牌放入可行方法中，那你一定会TLE，因为我一开始就是这样。（实践出真知，但其实非加强版不需要，到这里已经通过了）</p><p>我们每层搜索，只枚举上一层搜索枚举没有枚举到的就行了，这是个小剪枝。如果当前方法的出牌数大于当前剩余数量，就直接枚举下一个出牌方法，这也可算上个小剪枝。然后还要再次判断当前剩余的牌下这种方法是否可行。</p><p>还有几个小的要点，我们不管是预处理，还是每层搜索都要用到一个小动态规划，用来求某个牌当左端点，可以连成（单、双、三）顺子的最大长度。鉴于这个题的难度，我相信大家都会这个小动归。</p><p>然后还有几个提示，四带二可以带两个相同数码的对子（俗称炸弹），同理，可以带两个相同数码的一张牌（俗称对子）。然后1当14，大小王当15、16比较好写代码。</p><p>经过多次提交更改调试，终于通过了本题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>不开O2两秒多通过。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> T, n;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PAI</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> num, col;</span><br><span class="line">&#125; ps[<span class="hljs-number">30</span>];</span><br><span class="line"><span class="hljs-comment">// 记录牌的数码，颜色（没啥用）</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SHUNZI 3</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SANDAI 4</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIDAI 5</span></span><br><span class="line"><span class="hljs-comment">//顺子、三带、四带</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CP</span> &#123;</span></span><br><span class="line">    <span class="hljs-comment">// 记录出牌方法的信息</span></span><br><span class="line"><span class="hljs-keyword">int</span> typ, l, r, k1, k2, siz;</span><br><span class="line">    <span class="hljs-comment">// typ 为宏定义的值</span></span><br><span class="line">    <span class="hljs-comment">// siz 为出牌数量</span></span><br><span class="line">    <span class="hljs-comment">// l r 多种使用。l：顺子左端点，其他为最多的那张牌。r：顺子右端点，其他为少的那张牌需要的个数</span></span><br><span class="line">    <span class="hljs-comment">// k1 k2 三带、四带使用，表示附带哪一（两）张牌。</span></span><br><span class="line">CP(<span class="hljs-keyword">int</span> typ, <span class="hljs-keyword">int</span> siz, <span class="hljs-keyword">int</span> l= <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> r= <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> k1= <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> k2= <span class="hljs-number">0</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>-&gt;typ= typ, <span class="hljs-keyword">this</span>-&gt;siz= siz, <span class="hljs-keyword">this</span>-&gt;l= l, <span class="hljs-keyword">this</span>-&gt;r= r, <span class="hljs-keyword">this</span>-&gt;k1= k1, <span class="hljs-keyword">this</span>-&gt;k2= k2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> CP &amp;c2) <span class="hljs-keyword">const</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> siz &gt; c2.siz;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">int</span> pai[<span class="hljs-number">20</span>], bestans, us3[<span class="hljs-number">20</span>], us2[<span class="hljs-number">20</span>], us1[<span class="hljs-number">20</span>];</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt; CP &gt; v;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nown, <span class="hljs-keyword">int</span> nowa, <span class="hljs-keyword">int</span> ls)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(nowa &gt;= bestans) <span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-comment">// 小剪枝</span></span><br><span class="line">bestans= min(bestans, nowa + nown);</span><br><span class="line">    <span class="hljs-comment">// 更新答案，全部单打（没什么用）</span></span><br><span class="line"><span class="hljs-keyword">if</span>(!nown) <span class="hljs-keyword">return</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> res= <span class="hljs-number">0</span>, us[<span class="hljs-number">4</span>][<span class="hljs-number">20</span>];</span><br><span class="line"><span class="hljs-built_in">memset</span>(us, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(us));</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">16</span>; i++) res+= (pai[i] != <span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-keyword">if</span>(pai[<span class="hljs-number">15</span>] &amp;&amp; pai[<span class="hljs-number">16</span>]) --res;</span><br><span class="line">    <span class="hljs-comment">// 15、16为大小王，主程序中有，大小王可以王炸</span></span><br><span class="line">bestans= min(bestans, nowa + res);</span><br><span class="line">    <span class="hljs-comment">// 再次更新答案（剪枝）</span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">14</span>, cnt= <span class="hljs-number">0</span>; i &gt;= <span class="hljs-number">2</span>; i--) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(pai[i] &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line">us[<span class="hljs-number">1</span>][i]= us[<span class="hljs-number">1</span>][i + <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(pai[i] &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line">us[<span class="hljs-number">2</span>][i]= us[<span class="hljs-number">2</span>][i + <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(pai[i] &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line">us[<span class="hljs-number">3</span>][i]= us[<span class="hljs-number">3</span>][i + <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="hljs-comment">// DP出可行的顺子长度</span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= ls; i &lt; v.size(); i++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(v[i].siz &gt; nown) <span class="hljs-keyword">continue</span>;</span><br><span class="line"><span class="hljs-keyword">switch</span>(v[i].typ) &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> SHUNZI: &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(v[i].r - v[i].l + <span class="hljs-number">1</span> &gt; us[v[i].k1][v[i].l]) <span class="hljs-keyword">break</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= v[i].l; j &lt;= v[i].r; j++) pai[j]-= v[i].k1;</span><br><span class="line">dfs(nown - v[i].siz, nowa + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= v[i].l; j &lt;= v[i].r; j++) pai[j]+= v[i].k1;</span><br><span class="line">                <span class="hljs-comment">// 判断顺子</span></span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> SANDAI: &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(pai[v[i].l] &lt; <span class="hljs-number">3</span> || pai[v[i].k1] &lt; v[i].r) <span class="hljs-keyword">break</span>;</span><br><span class="line">pai[v[i].l]-= <span class="hljs-number">3</span>, pai[v[i].k1]-= v[i].r;</span><br><span class="line">dfs(nown - v[i].siz, nowa + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>);</span><br><span class="line">pai[v[i].l]+= <span class="hljs-number">3</span>, pai[v[i].k1]+= v[i].r;</span><br><span class="line">                <span class="hljs-comment">// 判断三带</span></span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> SIDAI: &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(pai[v[i].l] &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">break</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(pai[v[i].k1] &lt; <span class="hljs-number">1</span> || pai[v[i].k2] &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(v[i].r == <span class="hljs-number">2</span> &amp;&amp; (pai[v[i].k1] &lt; <span class="hljs-number">2</span> || pai[v[i].k2] &lt; <span class="hljs-number">2</span>)) <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-comment">// 都需要两张</span></span><br><span class="line"><span class="hljs-keyword">if</span>(v[i].r == <span class="hljs-number">2</span> &amp;&amp; v[i].k1 == v[i].k2 &amp;&amp; pai[v[i].k1] &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-comment">// 两对相同数码</span></span><br><span class="line"><span class="hljs-keyword">if</span>(v[i].r == <span class="hljs-number">1</span> &amp;&amp; v[i].k1 == v[i].k2 &amp;&amp; pai[v[i].k1] &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-comment">// 两张相同数码</span></span><br><span class="line">pai[v[i].l]-= <span class="hljs-number">4</span>;</span><br><span class="line">pai[v[i].k1]-= v[i].r;</span><br><span class="line">pai[v[i].k2]-= v[i].r;</span><br><span class="line">dfs(nown - v[i].siz, nowa + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>);</span><br><span class="line">pai[v[i].l]+= <span class="hljs-number">4</span>;</span><br><span class="line">pai[v[i].k1]+= v[i].r;</span><br><span class="line">pai[v[i].k2]+= v[i].r;</span><br><span class="line">                <span class="hljs-comment">// 判断四带</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">default</span>: <span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;T, &amp;n);</span><br><span class="line"><span class="hljs-keyword">while</span>(T--) &#123;</span><br><span class="line"><span class="hljs-built_in">memset</span>(pai, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(pai)), bestans= <span class="hljs-number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;ps[i].num, &amp;ps[i].col);</span><br><span class="line"><span class="hljs-keyword">if</span>(ps[i].num == <span class="hljs-number">1</span>) ps[i].num= <span class="hljs-number">14</span>;</span><br><span class="line">            <span class="hljs-comment">// 1 当 14</span></span><br><span class="line"><span class="hljs-keyword">if</span>(ps[i].num == <span class="hljs-number">0</span>) ps[i].num= ps[i].col + <span class="hljs-number">14</span>;</span><br><span class="line">            <span class="hljs-comment">// 大小王当15、16</span></span><br><span class="line">++pai[ps[i].num];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">memset</span>(us3, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(us3)), <span class="hljs-built_in">memset</span>(us2, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(us2)), <span class="hljs-built_in">memset</span>(us1, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(us1));</span><br><span class="line">v.clear();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">14</span>; i &gt;= <span class="hljs-number">3</span>; i--) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(pai[i] &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line">us1[i]= us1[i + <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(pai[i] &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line">us2[i]= us2[i + <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(pai[i] &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line">us3[i]= us3[i + <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="hljs-comment">// DP出顺子长度</span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">16</span>; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= <span class="hljs-number">5</span>; j &lt;= us1[i]; j++) v.push_back(CP(SHUNZI, j, i, i + j - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>));</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= <span class="hljs-number">3</span>; j &lt;= us2[i]; j++) v.push_back(CP(SHUNZI, j * <span class="hljs-number">2</span>, i, i + j - <span class="hljs-number">1</span>, <span class="hljs-number">2</span>));</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= <span class="hljs-number">2</span>; j &lt;= us3[i]; j++) v.push_back(CP(SHUNZI, j * <span class="hljs-number">3</span>, i, i + j - <span class="hljs-number">1</span>, <span class="hljs-number">3</span>));</span><br><span class="line">            <span class="hljs-comment">// i 当左端点的顺子</span></span><br><span class="line"><span class="hljs-keyword">if</span>(pai[i] &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= <span class="hljs-number">2</span>; j &lt;= <span class="hljs-number">16</span>; j++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(i == j || !pai[j]) <span class="hljs-keyword">continue</span>;</span><br><span class="line">v.push_back(CP(SANDAI, <span class="hljs-number">4</span>, i, <span class="hljs-number">1</span>, j));</span><br><span class="line"><span class="hljs-keyword">if</span>(pai[j] &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line">v.push_back(CP(SANDAI, <span class="hljs-number">5</span>, i, <span class="hljs-number">2</span>, j));</span><br><span class="line">&#125;</span><br><span class="line">            <span class="hljs-comment">// 三带</span></span><br><span class="line"><span class="hljs-keyword">if</span>(pai[i] &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= <span class="hljs-number">2</span>; j &lt;= <span class="hljs-number">16</span>; j++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(i == j || !pai[j]) <span class="hljs-keyword">continue</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k= j + <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">16</span>; k++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(i == k || !pai[k]) <span class="hljs-keyword">continue</span>;</span><br><span class="line">v.push_back(CP(SIDAI, <span class="hljs-number">6</span>, i, <span class="hljs-number">1</span>, j, k));</span><br><span class="line"><span class="hljs-keyword">if</span>(pai[j] &lt; <span class="hljs-number">2</span> || pai[k] &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">continue</span>;</span><br><span class="line">v.push_back(CP(SIDAI, <span class="hljs-number">8</span>, i, <span class="hljs-number">2</span>, j, k));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(pai[j] == <span class="hljs-number">4</span>) v.push_back(CP(SIDAI, <span class="hljs-number">8</span>, i, <span class="hljs-number">2</span>, j, j));</span><br><span class="line"><span class="hljs-keyword">if</span>(pai[j] &gt; <span class="hljs-number">2</span>) v.push_back(CP(SIDAI, <span class="hljs-number">6</span>, i, <span class="hljs-number">1</span>, j, j));</span><br><span class="line">&#125;</span><br><span class="line">            <span class="hljs-comment">// 四带</span></span><br><span class="line">&#125;</span><br><span class="line">sort(v.begin(), v.end());</span><br><span class="line">        <span class="hljs-comment">// 排序</span></span><br><span class="line">dfs(n, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; bestans &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【NOIP2015】【LuoguP2540】斗地主增强版&lt;br&gt;题目链接: &lt;a href=&quot;https://www.luogu.org/problem/P2540&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.org/problem/P2540&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;暴力出奇迹，&lt;del&gt;我是搜索小名士&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;早在一年前就用贪心完成了普通版，然后现在忘了。&lt;/p&gt;
&lt;p&gt;所以重新写一遍这道题，并且提高难度做增强版。看了仅剩的智商，我选择搜索。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://xciyang.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xciyang.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="搜索" scheme="https://xciyang.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
      <category term="模拟" scheme="https://xciyang.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>LuoguP1282 - 多米诺骨牌</title>
    <link href="https://xciyang.github.io/2019-09/19-luogu1282/"/>
    <id>https://xciyang.github.io/2019-09/19-luogu1282/</id>
    <published>2019-09-19T11:42:16.000Z</published>
    <updated>2019-12-09T12:30:52.061Z</updated>
    
    <content type="html"><![CDATA[<p>【LuoguP1041】多米诺骨牌<br>题目链接: <a href="https://www.luogu.org/problem/P1282" target="_blank" rel="noopener">https://www.luogu.org/problem/P1282</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近重点做动态规划。今天自己成功推出了两三道题，然后开始水多年未更新的博客？</p><p>不能颓废！</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先看数据范围$(N &lt;= 1000, A_i/B_i &lt;= 6)$，那么搜索当然不可能，肯定是考虑动态规划。</p><p>还是回归搜索上，比较好分析。一个牌只有两种状态，旋转与不旋转。我们只需要先找到最小差，再考虑最小旋转次数。</p><p>再看数据范围，$O(6N^2)$不会超时。我们既要求最小差又要求最小最小旋转次数，又可知所有数的总和是确定的，不如就设个背包。</p><p>$F[N(1000)][SUM(6000)]$表示处理到第N个点，上方块的和为SUM时最小的旋转次数。</p><p>一开始除$F[0]$为0外都赋值为无穷大，然后转移$A_i$表示上方块,$B_i$表示下方块。</p><script type="math/tex; mode=display">F[N][i] = min(F[N - 1][i - A_i], F[N - 1][i - B_i] + 1)</script><p>然后由于比较闲（怕超空间，然而并不会？）。显然，只要记录N-1的状态，就开了滚动数组$F[2][SUM]$。</p><p>最后先找最小差，我们计算$X = \lfloor\frac{SUM}{2} \rfloor$。</p><p>如果$SUM$为奇，那么上下差不可能为0，并且上方块和为$X$或$X + 1$时差都为1，因此再设置$Y = X + 1$。</p><p>如果$SUM$为偶，那么上方块和为$X$时上下差就为0，$Y = X$。</p><p>我们枚举一个数$i$从0开始，不断增大，表示一个范围（大概是这样）。</p><p>判断$F[N][X - i]$和$F[N][Y + i]$是否有值，若有则输出小的那个。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码较丑，推荐自己写代码。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n, a[<span class="hljs-number">1005</span>], b[<span class="hljs-number">1005</span>], c[<span class="hljs-number">1005</span>], f[<span class="hljs-number">2</span>][<span class="hljs-number">8000</span>], sum;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i], c[i]= a[i] - b[i], sum+= a[i] + b[i];</span><br><span class="line"><span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(f));</span><br><span class="line">f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= <span class="hljs-number">0</span>; j &lt;= sum; j++) f[i &amp; <span class="hljs-number">1</span>][j]= <span class="hljs-number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= sum; j &gt;= a[i]; j--) f[i &amp; <span class="hljs-number">1</span>][j]= f[(i &amp; <span class="hljs-number">1</span>) ^ <span class="hljs-number">1</span>][j - a[i]];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= sum; j &gt;= b[i]; j--) f[i &amp; <span class="hljs-number">1</span>][j]= min(f[i &amp; <span class="hljs-number">1</span>][j], f[(i &amp; <span class="hljs-number">1</span>) ^ <span class="hljs-number">1</span>][j - b[i]] + <span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> res= <span class="hljs-number">0x3f3f3f3f</span>, sum1= sum / <span class="hljs-number">2</span>, sum2= sum1 + sum % <span class="hljs-number">2</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>; i &lt; sum; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(sum1 + i &gt; n &amp;&amp; sum2 - i &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;</span><br><span class="line">res= min(f[n &amp; <span class="hljs-number">1</span>][sum1 + i], f[n &amp; <span class="hljs-number">1</span>][sum2 - i]);</span><br><span class="line"><span class="hljs-keyword">if</span>(f[n &amp; <span class="hljs-number">1</span>][sum1 + i] != <span class="hljs-number">0x3f3f3f3f</span> || f[n &amp; <span class="hljs-number">1</span>][sum2 - i] != <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>我的代码必须开8000，如果开8000以下好像会RE。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【LuoguP1041】多米诺骨牌&lt;br&gt;题目链接: &lt;a href=&quot;https://www.luogu.org/problem/P1282&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.org/problem/P1282&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近重点做动态规划。今天自己成功推出了两三道题，然后开始水多年未更新的博客？&lt;/p&gt;
&lt;p&gt;不能颓废！&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://xciyang.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xciyang.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="动态规划" scheme="https://xciyang.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="背包" scheme="https://xciyang.github.io/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>HAOI2011 - Problem b</title>
    <link href="https://xciyang.github.io/2019-09/02-luogu2522/"/>
    <id>https://xciyang.github.io/2019-09/02-luogu2522/</id>
    <published>2019-09-02T12:01:44.000Z</published>
    <updated>2019-12-09T12:30:52.070Z</updated>
    
    <content type="html"><![CDATA[<p>【LuoguP2522】【BZOJ2301】【HAOI2011】Problem b<br>题目链接1: <a href="https://www.luogu.org/problem/P2522" target="_blank" rel="noopener">https://www.luogu.org/problem/P2522</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2301" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=2301</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>机房很久前就人均会反演，今天我终于看懂是啥了。</p><p>然后把整除分块理解透彻！</p><a id="more"></a><p>先做道最简单的题练练手，感谢<a href="https://oi-wiki.org/math/mobius/" target="_blank" rel="noopener">莫比乌斯反演 - OI WIKI</a>和<a href="https://ctz45562.github.io/" target="_blank" rel="noopener">大佬CTZ</a>的帮助。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>本题题目翻译成公式：</p><script type="math/tex; mode=display">\sum_{x=a}^{b}\sum_{y=c}^{d} [gcd(x,y)=k]</script><p>可以按照二维前缀和的思想分治一下，先设</p><script type="math/tex; mode=display">F(n,m) = \sum_{i=1}^{n}\sum_{j=1}^{m} [gcd(i,j)=k]</script><p>那么</p><script type="math/tex; mode=display">ans = F(b,d) - F(b,c-1) - F(a-1,d) + F(a-1,c-1)</script><p>然后对F(n,m)进行化简，首先两边同除以K，至于可行性，记录一下大佬的亲自讲解</p><p>如果原式中$gcd(i,j)=k$，那么$i,j$一定是k的倍数，现在设</p><script type="math/tex; mode=display">i = i' * k , j = j' * k</script><p>那么一定$gcd(i’,j’)=1$，所以得出</p><script type="math/tex; mode=display">F(n,m) = \sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor} [gcd(i,j)=1]</script><p>这就可以莫比乌斯反演了，首先记住一个通用公式</p><script type="math/tex; mode=display">[gcd(i,j)=1] = \sum_{d \mid gcd(i,j)}\mu(d)</script><p>然后代入F(n,m)中</p><script type="math/tex; mode=display">F(n,m) = \sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor} \sum_{d \mid gcd(i,j)}\mu(d)</script><p>先默认$n &lt; m$，那么可知$d \in [1,\lfloor \frac{n}{k} \rfloor]$</p><p>然后改变一下位置</p><script type="math/tex; mode=display">F(n,m) = \sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\mu(d)\sum_{i=1}^{\lfloor \frac{n}{k} \rfloor}[i \mid p]\sum_{j=1}^{\lfloor \frac{m}{k} \rfloor}[j \mid p]</script><p>注意，右边是一个整体，后面的$[i\mid d],[j\mid d]$取1或0，也就是表示能否整除。</p><p>这样还能进一步化简，根据常识易得</p><script type="math/tex; mode=display">\sum_{i=1}^{n} i \mid p = \lfloor \frac{n}{p} \rfloor</script><p>从而推出</p><script type="math/tex; mode=display">F(n,m) = \sum_{d=1}^{\lfloor \frac{n}{k} \rfloor}\mu(d)\lfloor \frac{n}{kd} \rfloor{\lfloor \frac{m}{kd} \rfloor}</script><p>式子终于推完了，然后就是整除分块。</p><p>其实我一开始没看懂整除分块是因为不知道有啥用，其实是用来$O(\sqrt{n})$求这个式子</p><script type="math/tex; mode=display">\sum_{i=1}^{n} \lfloor \frac{i}{p} \rfloor</script><p>这样就好说了，我们知道某些$\lfloor \frac{i}{p} \rfloor$的值是相等的，并且这些项在一个连续区间$[l,r]$内。</p><p>所以枚举时找一个右端点$r$，直接计算$[i,r]$这个区间的结果，这个$r= \lfloor \frac{n}{\lfloor \frac{n}{i} \rfloor} \rfloor$。</p><p>具体证明不难，<a href="https://oi-wiki.org/math/mobius/#_3" target="_blank" rel="noopener">数论分块 - OI WIKI</a>有略证。</p><p>然后就写代码，还需要写莫比乌斯函数筛、前缀和。</p><p>这个莫比乌斯函数筛我有待研究。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXA 50001</span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> miu[<span class="hljs-number">50005</span>], notzs[<span class="hljs-number">50005</span>], zs[<span class="hljs-number">50005</span>], sum[<span class="hljs-number">50005</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">shai</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">notzs[<span class="hljs-number">1</span>]= <span class="hljs-number">1</span>, miu[<span class="hljs-number">1</span>]= <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">2</span>; i &lt;= MAXA; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(!notzs[i]) miu[i]= <span class="hljs-number">-1</span>, zs[++zs[<span class="hljs-number">0</span>]]= i;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= <span class="hljs-number">1</span>; j &lt;= zs[<span class="hljs-number">0</span>] &amp;&amp; i * zs[j] &lt;= MAXA; j++) &#123;</span><br><span class="line">notzs[i * zs[j]]= <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(i % zs[j] == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">miu[i * zs[j]]= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">miu[i * zs[j]]= -miu[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= MAXA; i++) sum[i]= sum[i - <span class="hljs-number">1</span>] + miu[i];</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> res= <span class="hljs-number">0</span>;</span><br><span class="line">n/= k, m/= k;</span><br><span class="line"><span class="hljs-keyword">if</span>(n &gt; m) swap(n, m);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>, j; i &lt;= n; i= j + <span class="hljs-number">1</span>) &#123;</span><br><span class="line">j= min(n / (n / i), m / (m / i));</span><br><span class="line">res+= (sum[j] - sum[i - <span class="hljs-number">1</span>]) * (n / i) * (m / i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> query(x, y) query(x, y, k)</span></span><br><span class="line"><span class="hljs-keyword">int</span> t;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">shai();</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="hljs-keyword">int</span> a, b, c, d, k;</span><br><span class="line"><span class="hljs-keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; k;</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; query(b, d) - query(b, c - <span class="hljs-number">1</span>) - query(a - <span class="hljs-number">1</span>, d) + query(a - <span class="hljs-number">1</span>, c - <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>然后你还可以把<a href="https://www.luogu.org/problem/P3455" target="_blank" rel="noopener">【LuoguP3455】【POI2007】ZAP-Queries</a> 一块通过了，只需要改一下输入输出。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【LuoguP2522】【BZOJ2301】【HAOI2011】Problem b&lt;br&gt;题目链接1: &lt;a href=&quot;https://www.luogu.org/problem/P2522&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.org/problem/P2522&lt;/a&gt;&lt;br&gt;题目链接2: &lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=2301&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.lydsy.com/JudgeOnline/problem.php?id=2301&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;机房很久前就人均会反演，今天我终于看懂是啥了。&lt;/p&gt;
&lt;p&gt;然后把整除分块理解透彻！&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://xciyang.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xciyang.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="莫比乌斯反演" scheme="https://xciyang.github.io/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
      <category term="整除分块" scheme="https://xciyang.github.io/tags/%E6%95%B4%E9%99%A4%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>技巧 - 写一个应用于Luogu的油猴插件</title>
    <link href="https://xciyang.github.io/2019-08/22-luogusearcher/"/>
    <id>https://xciyang.github.io/2019-08/22-luogusearcher/</id>
    <published>2019-08-22T13:10:57.000Z</published>
    <updated>2019-12-09T12:30:52.096Z</updated>
    
    <content type="html"><![CDATA[<p>写一个应用于Luogu的油猴插件，拥有在任意页面上快捷搜索跳转题目的功能。</p><p>安装链接（插件发布地址）: <a href="https://greasyfork.org/zh-CN/scripts/389291-luogu-quick-searcher" target="_blank" rel="noopener">https://greasyfork.org/zh-CN/scripts/389291-luogu-quick-searcher</a></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>应同机房大佬要求，做一个洛谷快捷题目搜索的油猴插件。</p><h4 id="一些鲜为人知的历史"><a href="#一些鲜为人知的历史" class="headerlink" title="一些鲜为人知的历史"></a>一些鲜为人知的历史</h4><p>其实这个早在洛谷??.9版本（大概是18年底的一次UI更新）就写过一次了。</p><p>那段时间luogu把搜索框去掉了，以致于不能方便的搜索题目，才写了这个插件，并且使用luogu很早前搜索框的css。</p><p>过了半个月洛谷又更新了，然后右上角个人头像旁边多了搜索框。我当时直接退坑了，后来没多长时间插件就无法使用了。</p><h4 id="为什么要重构插件"><a href="#为什么要重构插件" class="headerlink" title="为什么要重构插件"></a>为什么要重构插件</h4><p>然后我发现洛谷新的搜索框非常不贴近人意（小声），然后同机房大佬又一次要求。</p><p>趁着没东西颓废一晚上颓了出来，恰好半年时间，我的JS、HTML能力已经大幅提高，所以这个插件做起来相当简单。</p><h4 id="那现在和半年前有什么区别"><a href="#那现在和半年前有什么区别" class="headerlink" title="那现在和半年前有什么区别"></a>那现在和半年前有什么区别</h4><p>首先洛谷把半年前已经废了的CSS都删了（包括半年前的搜索框CSS）。</p><p>并且洛谷的页面也有很大变化。误人子弟的说一句，好像洛谷现在是二次加载动态渲染？然后不用jQuery了？</p><p>然后是个人原因，现在的我有一定JS写代码能力，对一些基础语法比较熟练，熟悉很多方法。之前傻傻分不清jQuery和Web API的函数，只能一次一次测试来运用（哪个能用就用哪个）。</p><h3 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h3><p>可以先进入文章开头的链接查看介绍，也可以查看全部代码。</p><p>首先我们设定 F1 打开搜索框，若已打开就关闭，F1键码为112。注册按键：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">document</span>.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123; <span class="hljs-keyword">if</span> (event.keyCode == <span class="hljs-number">112</span>) mainfunc(); &#125;;</span><br></pre></td></tr></table></figure><p>mainfunc 函数就是用来打开关闭对话框。但是这个页面本来没有对话框，该怎么打开呢？</p><p>那么就需要新建，新建需要在网页中插入HTML。根据经验，我们需要在页面加载完成之后才能插入HTML，否则有不可预料的BUG。判断网页是否加载完成：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.readyState == <span class="hljs-string">"complete"</span>) &#123;</span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    Write your code here.</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是新建元素、改样式、插入到网页中，这些很语法基础就直接给出，相关函数请自行了解。</p><p>我们选择把元素加入到页面的app（洛谷设计的）中。初始化：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> newElement = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"div"</span>);</span><br><span class="line">newElement.id = <span class="hljs-string">"CiyangSearch"</span>;</span><br><span class="line">newElement.innerHTML = <span class="hljs-string">"&lt;input type = 'text'&gt; | &lt;a&gt;&lt;i class = 'fas fa-search'&gt;&lt;/i&gt;&lt;/a&gt; | &lt;a&gt;&lt;i class= 'fa fa-cog'&gt;&lt;/i&gt;&lt;/a&gt;"</span>;</span><br><span class="line">newElement.style.position = <span class="hljs-string">"fixed"</span>;</span><br><span class="line">newElement.style.zIndex = <span class="hljs-string">"2"</span>;</span><br><span class="line">newElement.style.top = <span class="hljs-string">"10%"</span>;</span><br><span class="line">newElement.style.left = <span class="hljs-string">"30%"</span>;</span><br><span class="line">newElement.style.width = <span class="hljs-string">"240px"</span>;</span><br><span class="line">newElement.style.backgroundColor = <span class="hljs-string">"rgb(128,128,128)"</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> appElement = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'app'</span>);</span><br><span class="line">appElement.appendChild(newElement);</span><br></pre></td></tr></table></figure><p>上面的代码就已经可以打开一个搜索框，还有搜索按钮和设置按钮，但非常丑陋。</p><p>只有搜索框但是不能进行搜索，所以要绑定点击搜索按钮和回车键，回车键的键码为13。注册函数：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">newElement.children[<span class="hljs-number">0</span>].onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (event.keyCode == <span class="hljs-number">13</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> str = <span class="hljs-keyword">this</span>.value;</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">        Write your code here.</span></span><br><span class="line"><span class="hljs-comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line">newElement.children[<span class="hljs-number">1</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> str = newElement.children[<span class="hljs-number">0</span>].value;</span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    Write your code here.</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>str就是搜索框中输入的内容，获取后就可以跳转题目了。</p><p>我们想让它可自动识别是否为题目，如果是就打开题目页面，否则就打开题目列表进行搜索。</p><p>比如：输入P1001打开P1001题目页面，输入1001就进入题目列表搜索1001。</p><p>因为OI不学正则表达式，所以一般情况下我们想到if判断。这非常麻烦，会使代码复杂冗长，这个时候正则表达式就能大显身手了。</p><p>此处借鉴了另一个油猴插件<a href="https://greasyfork.org/zh-CN/scripts/388947-luogu-problem-jumper" target="_blank" rel="noopener">Luogu Problem Jumper</a>的匹配代码，应该是匹配洛谷题目最好的代码。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">judegeProblem</span>(<span class="hljs-params">str</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (str.match(<span class="hljs-regexp">/AT[0-9]&#123;1,4&#125;/</span>) == str) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (str.match(<span class="hljs-regexp">/CF[0-9]&#123;1,4&#125;[A-Z][0-9]&#123;0,1&#125;/</span>) == str) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (str.match(<span class="hljs-regexp">/SP[0-9]&#123;1,5&#125;/</span>) == str) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (str.match(<span class="hljs-regexp">/P[0-9]&#123;4&#125;/</span>) == str) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (str.match(<span class="hljs-regexp">/UVA[0-9]&#123;1,5&#125;/</span>) == str) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (str.match(<span class="hljs-regexp">/U[0-9]&#123;1,6&#125;/</span>) == str) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (str.match(<span class="hljs-regexp">/T[0-9]&#123;1,6&#125;/</span>) == str) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是打开页面，有两种方式，前者是从当前页跳转，后者是新标签页打开。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.location = url;</span><br><span class="line"><span class="hljs-built_in">window</span>.open(url);</span><br></pre></td></tr></table></figure><p>我们想要设计为用户选择首选方式，可首选其中一种方式，搜索时先输入 # 才能用优先级低的方式。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> dUrl = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">A lot of code.</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">judgeURL</span>(<span class="hljs-params">way, str</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (str.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (judegeProblem(str)) go(dUrl ^ way, <span class="hljs-string">'/problemnew/show/'</span> + str);</span><br><span class="line">    <span class="hljs-keyword">else</span> go(dUrl ^ way, <span class="hljs-string">'/problem/list?keyword='</span> + str);</span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">go</span>(<span class="hljs-params">k, url</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>) <span class="hljs-built_in">window</span>.location = url;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-built_in">window</span>.open(url);</span><br><span class="line">    removek();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dUrl设为1就是首选新标签页，way表示是否先输入了 # 。</p><p>再回到绑定按键、点击搜索按钮的地方，比较懒所以代码没有合并到一起：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">newElement.children[<span class="hljs-number">0</span>].onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (event.keyCode == <span class="hljs-number">13</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> str = <span class="hljs-keyword">this</span>.value;</span><br><span class="line">        <span class="hljs-keyword">if</span> (str.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (str[<span class="hljs-number">0</span>] == <span class="hljs-string">'#'</span>) judgeURL(<span class="hljs-number">1</span>, str.substring(<span class="hljs-number">1</span>, str.length));</span><br><span class="line">        <span class="hljs-keyword">else</span> judgeURL(<span class="hljs-number">0</span>, str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line">newElement.children[<span class="hljs-number">1</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> str = newElement.children[<span class="hljs-number">0</span>].value;</span><br><span class="line">    <span class="hljs-keyword">if</span> (str.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (str[<span class="hljs-number">0</span>] == <span class="hljs-string">'#'</span>) judgeURL(<span class="hljs-number">1</span>, str.substring(<span class="hljs-number">1</span>, str.length));</span><br><span class="line">    <span class="hljs-keyword">else</span> judgeURL(<span class="hljs-number">0</span>, str);</span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>主体基本完成，然后就是一些小功能。若打开搜索框，再次按下 F1 关闭。使设置打开页面方式更加可视化，完善设置按钮。</p><p>在 mainfuc 函数中，先加入一行代码：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (removek()) <span class="hljs-keyword">return</span>;</span><br></pre></td></tr></table></figure><p>之前我们为了方便，将搜索框整体的元素ID改为了CiyangSearch，可以直接根据此ID来获取控件。代码简单：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removek</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> search = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"CiyangSearch"</span>);</span><br><span class="line">    <span class="hljs-keyword">if</span> (search) &#123;</span><br><span class="line">        search.parentNode.removeChild(search);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完善设置按钮也很简单，首先在 mainfunc 绑定按键、搜索按钮处理下加入一行代码：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newElement.children[<span class="hljs-number">2</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; setLink(); &#125;;</span><br></pre></td></tr></table></figure><p>先介绍两个油猴自带的函数，GM_setValue和GM_getValue，可以非常方便的存储和读取数据，具体原理可以自行搜索。</p><p>点击设置按钮后跳出对话框，用户输入1或者0，设置首选方式。将之前的dUrl设置为读取数据。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> dUrl = GM_getValue(<span class="hljs-string">"default_way"</span>);</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setLink</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> defaultWay = prompt(<span class="hljs-string">"请输入首选打开网页方式，1 为新标签页，0为从当前页跳转。当前为"</span> + dUrl + <span class="hljs-string">"，搜索先输入 # 可使用优先级低的方式。"</span>);</span><br><span class="line">    <span class="hljs-keyword">if</span> (defaultWay == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (defaultWay != <span class="hljs-string">"0"</span> &amp;&amp; defaultWay != <span class="hljs-string">"1"</span>) &#123;</span><br><span class="line">        alert(<span class="hljs-string">"您的输入有误"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    GM_setValue(<span class="hljs-string">"default_way"</span>, defaultWay);</span><br><span class="line">    location.reload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还有需要一个使搜索的输入框自动获得焦点的小特性，只要在元素（控件）插入页面后加入一行代码：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newElement.children[<span class="hljs-number">0</span>].focus();</span><br></pre></td></tr></table></figure><p>然后8.23美化了一下UI，具体就不给出了。增加了设置背景颜色，换汤不换药。其中较为重要的修改：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> dUrl = GM_getValue(<span class="hljs-string">"default_way"</span>), bgColor = GM_getValue(<span class="hljs-string">"searcher_bg"</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (bgColor == <span class="hljs-literal">undefined</span>) &#123;</span><br><span class="line">    GM_setValue(<span class="hljs-string">"searcher_bg"</span>, <span class="hljs-string">"rgba(135,206,235,0.5)"</span>);</span><br><span class="line">    bgColor = <span class="hljs-string">"rgba(135,206,235,0.5)"</span>;</span><br><span class="line">&#125;</span><br><span class="line">newElement.innerHTML = <span class="hljs-string">"&lt;input type = 'text'&gt; | &lt;i class = 'fas fa-search'&gt;&lt;/i&gt; | &lt;i class= 'fas fa-cog'&gt;&lt;/i&gt; | &lt;i class ='fas fa-crosshairs'&gt;&lt;/i&gt; |"</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setBGColor</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> searcherBG = prompt(<span class="hljs-string">"请输入背景颜色码，支持RGB和十六进制。当前为"</span> + bgColor + <span class="hljs-string">"。"</span>, bgColor);</span><br><span class="line">    <span class="hljs-keyword">if</span> (searcherBG == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;</span><br><span class="line">    GM_setValue(<span class="hljs-string">"searcher_bg"</span>, searcherBG);</span><br><span class="line">    location.reload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别处于代码各个位置，思路与设置打开方式类似，自行了解即可。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>还有什么问题可以在博客或发布网站评论提出，也可以用社交软件联系我。</p><p>在greasyfork发布，链接：<a href="https://greasyfork.org/zh-CN/scripts/389291-luogu-quick-searcher" target="_blank" rel="noopener">https://greasyfork.org/zh-CN/scripts/389291-luogu-quick-searcher</a></p><p>如果时间充足还会一直更新，有要求也可以提出。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写一个应用于Luogu的油猴插件，拥有在任意页面上快捷搜索跳转题目的功能。&lt;/p&gt;
&lt;p&gt;安装链接（插件发布地址）: &lt;a href=&quot;https://greasyfork.org/zh-CN/scripts/389291-luogu-quick-searcher&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://greasyfork.org/zh-CN/scripts/389291-luogu-quick-searcher&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技巧" scheme="https://xciyang.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="技巧" scheme="https://xciyang.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="颓废" scheme="https://xciyang.github.io/tags/%E9%A2%93%E5%BA%9F/"/>
    
      <category term="JavaScript" scheme="https://xciyang.github.io/tags/JavaScript/"/>
    
      <category term="HTML" scheme="https://xciyang.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Daily Literary - 文艺日常</title>
    <link href="https://xciyang.github.io/2019-08/21-literatureandart/"/>
    <id>https://xciyang.github.io/2019-08/21-literatureandart/</id>
    <published>2019-08-21T12:04:23.000Z</published>
    <updated>2020-01-04T13:59:25.075Z</updated>
    
    <content type="html"><![CDATA[<p>半年没更新了啊！</p><p>最近更新: 2020.01.04</p><p>图片来源于网络，如有侵权请联系我。</p><p>日常收集文艺语句，来源于知乎、网页、原创。</p><a id="more"></a><ol><li><p>喜欢上一个人很容易，爱上一个人很难，但是忘掉一个人是最难的。</p></li><li><p>喜欢一样东西就不要问别人好不好看。这个世界上永远没有感同身受，真正能治愈自己的，只有你自己。</p></li><li><p>太敏感的人会体谅到他人的痛苦，自然就无法轻易做到坦率。所谓的坦率，其实就是暴力。</p></li><li><p>世上的事情都经不起推敲，一推敲，哪一件都藏着委屈。</p></li><li><p>我慢慢明白了我为什么不快乐，因为我总是期待一个结果。</p></li><li><p>人生所有的希望，都是在绝望中得到了领悟。</p></li><li><p>拥有的总是不安，没得到的都喜欢。你和余生正相反，而我曾一度，混为一谈。</p></li><li><p>有些笑容背后是紧咬牙关的灵魂。</p></li><li><p>你可以拥有一切，但不能同时。</p></li></ol><hr><h4 id="关于本篇"><a href="#关于本篇" class="headerlink" title="关于本篇"></a>关于本篇</h4><p>持续更新，作者也不知道怎么回事就开了这个专栏。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;半年没更新了啊！&lt;/p&gt;
&lt;p&gt;最近更新: 2020.01.04&lt;/p&gt;
&lt;p&gt;图片来源于网络，如有侵权请联系我。&lt;/p&gt;
&lt;p&gt;日常收集文艺语句，来源于知乎、网页、原创。&lt;/p&gt;
    
    </summary>
    
    
      <category term="闲聊" scheme="https://xciyang.github.io/categories/%E9%97%B2%E8%81%8A/"/>
    
    
      <category term="闲聊" scheme="https://xciyang.github.io/tags/%E9%97%B2%E8%81%8A/"/>
    
      <category term="语录" scheme="https://xciyang.github.io/tags/%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>LuoguP1456 - Monkey King</title>
    <link href="https://xciyang.github.io/2019-08/20-luogu1456/"/>
    <id>https://xciyang.github.io/2019-08/20-luogu1456/</id>
    <published>2019-08-19T23:47:33.000Z</published>
    <updated>2019-12-09T12:30:52.067Z</updated>
    
    <content type="html"><![CDATA[<p>【LuoguP1456】Monkey King<br>题目链接: <a href="https://www.luogu.org/problem/P1456" target="_blank" rel="noopener">https://www.luogu.org/problem/P1456</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>左偏树真是我见过最好写的（高级？）数据结构。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题其实就是个板子题。</p><p>看题意发现要维护大根堆，然后还有合并操作，那直接上左偏树。</p><p>话说左偏树找根的时候需要路径压缩，不然会被卡。所以直接上并查集，这样复杂度就正确了。</p><p>假设 X 和 Y 打架，我们先找他们的根 FX 和 FY 就是最牛叉的朋友，如果是一个人就输出-1，否则给 FX 和 FY的值都减半。</p><p>然后合并 FX 和 FY 的左右子树，视为将 FX 、FY 删去。</p><p>最后再把减半后的值当做一个子树再插入就完成了。</p><p>提醒一下，这题多组数据，我第一次交就被坑了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n, m, v[<span class="hljs-number">100005</span>], f[<span class="hljs-number">100005</span>], l[<span class="hljs-number">100005</span>], r[<span class="hljs-number">100005</span>], d[<span class="hljs-number">100005</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> tmpx, tmpy;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> f[x] == x ? x : f[x]= getf(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(!x || !y) <span class="hljs-keyword">return</span> x + y;</span><br><span class="line"><span class="hljs-keyword">if</span>(v[x] &lt; v[y]) swap(x, y);</span><br><span class="line">r[x]= merge(r[x], y), f[l[x]]= f[r[x]]= f[x]= x;</span><br><span class="line"><span class="hljs-keyword">if</span>(d[r[x]] &gt; d[l[x]]) swap(r[x], l[x]);</span><br><span class="line">d[x]= d[r[x]] + <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x= getf(x), y= getf(y);</span><br><span class="line"><span class="hljs-keyword">if</span>(x == y) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">v[x]&gt;&gt;= <span class="hljs-number">1</span>, v[y]&gt;&gt;= <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> newx= merge(l[x], r[x]), newy= merge(l[y], r[y]);</span><br><span class="line">l[x]= r[x]= l[y]= r[y]= d[x]= d[y]= <span class="hljs-number">0</span>;</span><br><span class="line">newx= merge(newx, x), newy= merge(newy, y), newx= merge(newx, newy);</span><br><span class="line"><span class="hljs-keyword">return</span> v[newx];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">cin</span> &gt;&gt; v[i], f[i]= i, l[i]= r[i]= d[i]= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; tmpx &gt;&gt; tmpy;</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; solve(tmpx, tmpy) &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【LuoguP1456】Monkey King&lt;br&gt;题目链接: &lt;a href=&quot;https://www.luogu.org/problem/P1456&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.org/problem/P1456&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;左偏树真是我见过最好写的（高级？）数据结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://xciyang.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xciyang.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="左偏树" scheme="https://xciyang.github.io/tags/%E5%B7%A6%E5%81%8F%E6%A0%91/"/>
    
      <category term="并查集" scheme="https://xciyang.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>重新开始</title>
    <link href="https://xciyang.github.io/2019-08/15-chong-xin-kai-shi/"/>
    <id>https://xciyang.github.io/2019-08/15-chong-xin-kai-shi/</id>
    <published>2019-08-15T12:08:53.000Z</published>
    <updated>2019-12-09T12:29:13.669Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于重新搭建"><a href="#关于重新搭建" class="headerlink" title="关于重新搭建"></a>关于重新搭建</h3><p>之前的主题用了半年多了，打算换个主题提高RP？</p><p>然后又是先试了一个主题，发现太简洁没几个功能然后换成了现在这个。</p><p>总体来说还不错，不知道博客还能用几天。唉~</p><p>关于现在搭建的方法,使用Github + Hexo + Nexmoe.</p><a id="more"></a><p>下面都是从第一篇博客复制过来的，有细微修改。</p><p><br></p><p>测试一下HelloWorld</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Hello, world!"</span> &lt;&lt; <span class="hljs-built_in">std</span>:<span class="hljs-built_in">endl</span>;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>测试一下LaTeX</p><script type="math/tex; mode=display">\LARGE{S_k=\sum_{i=1}^{k}a_i}</script><p><br></p><p>测试一下内嵌JS</p><p style="text-align: center"><a href="/" style="font-size:25px; text-align:center;"> Ciyang's Blog </a></p><p><br></p><h3 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h3><p>作者:Ciyang </p><p>现于 SD-SLYZ 上高中,是一名现役OIer,爱搞一些黑科技,写点高（la）端（ji）题解,出点毒（jian）瘤（dan）题,其实还仍是个中二少年……</p><p>顺便说一句，头像还是很沙雕，所以凑活着看，以后再改。</p><p>然后最近颓的挺多，但是都没什么意义，希望有大佬跟给我推荐一些颓的东西。</p><p>联系方式:<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QQ: 896681584</span><br><span class="line">Github: Xciyang</span><br><span class="line">网站通用昵称: Ciyang</span><br></pre></td></tr></table></figure></p><h3 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h3><p>这个博客不一定只发题解,多数应该还是一些黑科技,学习总结和经历之类的东西吧.</p><h3 id="利益相关"><a href="#利益相关" class="headerlink" title="利益相关"></a>利益相关</h3><p>欢迎收藏~互加友链在那个友链页面评论吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于重新搭建&quot;&gt;&lt;a href=&quot;#关于重新搭建&quot; class=&quot;headerlink&quot; title=&quot;关于重新搭建&quot;&gt;&lt;/a&gt;关于重新搭建&lt;/h3&gt;&lt;p&gt;之前的主题用了半年多了，打算换个主题提高RP？&lt;/p&gt;
&lt;p&gt;然后又是先试了一个主题，发现太简洁没几个功能然后换成了现在这个。&lt;/p&gt;
&lt;p&gt;总体来说还不错，不知道博客还能用几天。唉~&lt;/p&gt;
&lt;p&gt;关于现在搭建的方法,使用Github + Hexo + Nexmoe.&lt;/p&gt;
    
    </summary>
    
    
      <category term="闲聊" scheme="https://xciyang.github.io/categories/%E9%97%B2%E8%81%8A/"/>
    
    
      <category term="闲聊" scheme="https://xciyang.github.io/tags/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
  <entry>
    <title>LuoguP5440 - 【XR-2】奇迹</title>
    <link href="https://xciyang.github.io/2019-07/15-luogu5440/"/>
    <id>https://xciyang.github.io/2019-07/15-luogu5440/</id>
    <published>2019-07-15T12:26:53.000Z</published>
    <updated>2019-12-09T12:30:52.090Z</updated>
    
    <content type="html"><![CDATA[<p>【LuoguP5440】【XR-2】奇迹<br>题目链接: <a href="https://www.luogu.org/problemnew/show/P5440" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P5440</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>不要学那些很酷很炫的算法，不要看不起那些基础算法，比如说搜索。</p></blockquote><p>然后我就天天做搜索，最后退役。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>正解搜索或暴力枚举，代码区已经几乎是相同的思路，只是有些大佬有很多优化，效率快，但是特批有很多并且极其复杂。经对比我觉得我的代码可视性还是不错的，并且没有乱七八糟的特判，可以说是常规DFS代码+筛质数优化的代码。</p><p>下面说一下思路。首先题目很好理解，一个有效日期，日、月+日、年+月+日组成的数字均为质数，那就先不考虑优化，直接上模拟。</p><p>按DFS的常规模板（自己总结出来的），先有一个参数，代表搜索到哪一位。在本题中就是日期的第几位数字，我选择的顺序为：日-&gt;月-&gt;年，这样可以逐层判断，而且效率较高代码优雅。</p><p>第二个参数，是为了方便和小幅提升效率，我们把已经枚举完的位编成一个整数$ x $，然后日就是 x % 100 ，月就是 x % 10000 /  100 ，年就是x / 10000<br>。</p><p>这道题中还需要考虑到特殊情况，是否必须为闰年或大月。我为了方便，当成两个参数来传递，现在想想好像可以改一个。因为一个只考虑年份，一个只考虑月份。DFS带详细注释代码如下，自己觉得算得上优雅。<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 调用方法: dfs(8, 0, 0, 0)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nown, <span class="hljs-keyword">int</span> num, <span class="hljs-keyword">int</span> rn, <span class="hljs-keyword">int</span> jy)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(nown == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    <span class="hljs-comment">// 日期全部枚举完</span></span><br><span class="line"><span class="hljs-keyword">if</span>(num / <span class="hljs-number">10000</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-comment">// 非常关键，0不能当年份（我一开始没加就得10分）</span></span><br><span class="line"><span class="hljs-keyword">if</span>(rn &amp;&amp; pdrn(num / <span class="hljs-number">10000</span>) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-comment">// 如果必须为闰年就判断年份</span></span><br><span class="line"><span class="hljs-keyword">return</span> pdzs(num);</span><br><span class="line">    <span class="hljs-comment">// 总日期还得为质数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(nown == <span class="hljs-number">6</span>) &#123;</span><br><span class="line">    <span class="hljs-comment">// 枚举完日</span></span><br><span class="line"><span class="hljs-keyword">if</span>(num == <span class="hljs-number">0</span> || num &gt; <span class="hljs-number">31</span> || !pdzs(num)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-comment">// 如果是等于0日、31日以上或不是质数就return</span></span><br><span class="line"><span class="hljs-keyword">if</span>(num == <span class="hljs-number">31</span>) jy= <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-comment">// 如果是31日就必须为大月</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(nown == <span class="hljs-number">4</span>) &#123;</span><br><span class="line">    <span class="hljs-comment">// 判断完日、月</span></span><br><span class="line"><span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">32</span> || num &gt; <span class="hljs-number">1231</span> || !pdzs(num)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-comment">// 如果是等于0月、13月以上或不是质数就return</span></span><br><span class="line"><span class="hljs-keyword">if</span>(jy &amp;&amp; !yue[num / <span class="hljs-number">100</span>]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-comment">// 如果必须为大月就判断月份num / 100，yue数组代表是否为大月</span></span><br><span class="line"><span class="hljs-keyword">if</span>(num / <span class="hljs-number">100</span> == <span class="hljs-number">2</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(num % <span class="hljs-number">100</span> &gt; <span class="hljs-number">29</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-comment">// 2月最多29天</span></span><br><span class="line"><span class="hljs-keyword">if</span>(num % <span class="hljs-number">100</span> == <span class="hljs-number">29</span>) rn= <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-comment">// 如果是2月29日就必须为闰年</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[nown] != <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> dfs(nown - <span class="hljs-number">1</span>, a[nown] * p10[<span class="hljs-number">8</span> - nown] + num, rn, jy);</span><br><span class="line">    <span class="hljs-comment">// 如果输入给出就直接进入下一层，p10数组相当于pow10</span></span><br><span class="line"><span class="hljs-keyword">int</span> res= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; i++) res+= dfs(nown - <span class="hljs-number">1</span>, i * p10[<span class="hljs-number">8</span> - nown] + num, rn, jy);</span><br><span class="line">    <span class="hljs-comment">// 枚举0~9为此位</span></span><br><span class="line"><span class="hljs-keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果是用复杂度为$ O(\sqrt{n}) $ 的判断质数就只有90分，所以还得用线性筛预处理出$  \sqrt{100000000} = 10000 $ 以内的质数，然后我们判断质数就对这些数取模就行了，具体原理不再解释。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 筛10005以内的质数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">flag[<span class="hljs-number">1</span>]= <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">10005</span>; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(!flag[i]) prim[++tot]= i;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= <span class="hljs-number">1</span>; j &lt;= tot; j++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(i * prim[j] &gt;= <span class="hljs-number">10005</span>) <span class="hljs-keyword">break</span>;</span><br><span class="line">flag[i * prim[j]]= <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(i % prim[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 判断质数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pdzs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= tot; i++)</span><br><span class="line"><span class="hljs-keyword">if</span>(x % prim[i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> x == prim[i];</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以愉快的AC了，总代码只有70行且简单优雅。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n, a[<span class="hljs-number">9</span>], prim[<span class="hljs-number">10005</span>], flag[<span class="hljs-number">10005</span>], tot;</span><br><span class="line"><span class="hljs-keyword">char</span> tmpc;</span><br><span class="line"><span class="hljs-keyword">int</span> p10[]= &#123;<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">100000</span>, <span class="hljs-number">1000000</span>, <span class="hljs-number">10000000</span>, <span class="hljs-number">100000000</span>&#125;;</span><br><span class="line"><span class="hljs-keyword">int</span> yue[]= &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">flag[<span class="hljs-number">1</span>]= <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">10005</span>; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(!flag[i]) prim[++tot]= i;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= <span class="hljs-number">1</span>; j &lt;= tot; j++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(i * prim[j] &gt;= <span class="hljs-number">10005</span>) <span class="hljs-keyword">break</span>;</span><br><span class="line">flag[i * prim[j]]= <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(i % prim[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pdrn</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> (x % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; x % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || (x % <span class="hljs-number">400</span> == <span class="hljs-number">0</span> &amp;&amp; x % <span class="hljs-number">3200</span> != <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pdzs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= tot; i++)</span><br><span class="line"><span class="hljs-keyword">if</span>(x % prim[i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> x == prim[i];</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nown, <span class="hljs-keyword">int</span> num, <span class="hljs-keyword">int</span> rn, <span class="hljs-keyword">int</span> jy)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(nown == <span class="hljs-number">0</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(num / <span class="hljs-number">10000</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(rn &amp;&amp; pdrn(num / <span class="hljs-number">10000</span>) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> pdzs(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(nown == <span class="hljs-number">6</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(num == <span class="hljs-number">0</span> || num &gt; <span class="hljs-number">31</span> || !pdzs(num)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(num == <span class="hljs-number">31</span>) jy= <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(nown == <span class="hljs-number">4</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">32</span> || num &gt; <span class="hljs-number">1231</span> || !pdzs(num)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(jy &amp;&amp; !yue[num / <span class="hljs-number">100</span>]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(num / <span class="hljs-number">100</span> == <span class="hljs-number">2</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(num % <span class="hljs-number">100</span> &gt; <span class="hljs-number">29</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(num % <span class="hljs-number">100</span> == <span class="hljs-number">29</span>) rn= <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[nown] != <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> dfs(nown - <span class="hljs-number">1</span>, a[nown] * p10[<span class="hljs-number">8</span> - nown] + num, rn, jy);</span><br><span class="line"><span class="hljs-keyword">int</span> res= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; i++) res+= dfs(nown - <span class="hljs-number">1</span>, i * p10[<span class="hljs-number">8</span> - nown] + num, rn, jy);</span><br><span class="line"><span class="hljs-keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">char</span> ch= getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>((ch &lt; <span class="hljs-string">'0'</span> || ch &gt; <span class="hljs-string">'9'</span>) &amp;&amp; ch != <span class="hljs-string">'-'</span>) ch= getchar();</span><br><span class="line"><span class="hljs-keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">9</span>) put(x / <span class="hljs-number">10</span>);</span><br><span class="line"><span class="hljs-built_in">putchar</span>(<span class="hljs-string">'0'</span> + x % <span class="hljs-number">10</span>);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">init(), <span class="hljs-built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="hljs-keyword">while</span>(n--) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++) tmpc= get(), a[i]= (tmpc == <span class="hljs-string">'-'</span> ? <span class="hljs-number">-1</span> : tmpc - <span class="hljs-string">'0'</span>);</span><br><span class="line">put(dfs(<span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【LuoguP5440】【XR-2】奇迹&lt;br&gt;题目链接: &lt;a href=&quot;https://www.luogu.org/problemnew/show/P5440&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.org/problemnew/show/P5440&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;不要学那些很酷很炫的算法，不要看不起那些基础算法，比如说搜索。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后我就天天做搜索，最后退役。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://xciyang.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xciyang.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="搜索" scheme="https://xciyang.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>技巧 - 在OJ上出交互题</title>
    <link href="https://xciyang.github.io/2019-07/12-zai-oj-shang-chu-jiao-hu-ti/"/>
    <id>https://xciyang.github.io/2019-07/12-zai-oj-shang-chu-jiao-hu-ti/</id>
    <published>2019-07-12T12:53:51.000Z</published>
    <updated>2019-12-09T12:30:52.109Z</updated>
    
    <content type="html"><![CDATA[<p>有关在OJ上出交互题的一些技巧</p><p>本博客所指的OJ仅指SYZOJ，即搭建LOJ使用的在线评测系统。</p><p>SYZOJ源码链接(Github仓库): <a href="https://github.com/syzoj/syzoj" target="_blank" rel="noopener">https://github.com/syzoj/syzoj</a></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在校内使用SYZOJ搭建内网OJ已经有些时日了。其实之前就看到有交互题这一说，但一直没有去关注和了解。</p><p>今天正颓废时，突然想起了交互题，然后开始便研究。</p><p>本以为是testlib，现在才发现SYZOJ有自己特有的交互方式。</p><h3 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h3><p>SYZOJ帮助中的原话如下：</p><blockquote><p>交互器和选手程序同时运行，交互器的标准输入和标准输出连接了选手程序的标准输出和标准输入 —— 交互通过输入输出进行。<br>交互器运行时，其目录下会有 input 文件，表示该测试点的输入文件。交互器运行结束后，需要将选手得分写入 score.txt 文件中，并将提供给用户的额外信息输出到标准错误输出（stderr）中。<br>如果您希望实现 NOI 试题风格的交互（选手通过函数调用与交互器交互），请编写一些头文件作为「附加源文件」并封装标准输入输出的交互。</p></blockquote><p>要学习出交互题，前提是要会出一道传统题。对于出传统题就需要知道的知识就不予讲解。</p><h4 id="如何交互"><a href="#如何交互" class="headerlink" title="如何交互"></a>如何交互</h4><p>根据帮助，<code>交互通过输入输出进行</code>，那么意为选手程序使用std::cout输出给交互器程序，而交互器程序使用std::cin读取选手的输出，反过来也是如此。</p><p>LOJ中交互题系统测试题<a href="https://loj.ac/problem/6" target="_blank" rel="noopener">Guess Number</a>可以自行了解一下。</p><h4 id="输入文件"><a href="#输入文件" class="headerlink" title="输入文件"></a>输入文件</h4><p>根据帮助，<code>目录下会有 input 文件，表示该测试点的输入文件</code>，那么就需要用文件流操作，我选择使用std::ifstream来读取input文件。交互器从输入文件读取一个整数的实例：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-function">ifstream <span class="hljs-title">datin</span><span class="hljs-params">(<span class="hljs-string">"input"</span>)</span></span>;</span><br><span class="line">    datin &gt;&gt; n;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选手得分"><a href="#选手得分" class="headerlink" title="选手得分"></a>选手得分</h4><p><code>将选手得分写入 score.txt 文件中</code> 也是同理，使用std::ofstream打开score.txt文件，写入一个数即可。</p><p>可以根据查询次数等信息来确定得分，支持部分正确（0 &lt;= 得分 &lt;= 100）。</p><h4 id="额外信息"><a href="#额外信息" class="headerlink" title="额外信息"></a>额外信息</h4><p>继续看帮助，<code>将提供给用户的额外信息输出到标准错误输出（stderr）中</code>。额外信息就是测试点的反馈信息，我们常在传统题WA时看到<code>Files user_out and answer differ</code>。给出一个交互器判定选手输出的实例（不完整）：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">int</span> n, ans;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// main_code</span></span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cerr</span> &lt;&lt; <span class="hljs-string">"Wrong answer! The correct answer is "</span> &lt;&lt; ans &lt;&lt; <span class="hljs-string">" ."</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当WA时输出正确的答案以供选手参考，与Special Judge类似。</p><h4 id="封装交互"><a href="#封装交互" class="headerlink" title="封装交互"></a>封装交互</h4><p>帮助最后一句，是可选的。我们可以封装标准输入输出的交互，我们对于C++而言，可以写一个头文件interactor.h。</p><p>我们模拟一个很简单的题来示范interactor.h，选手输出两个数（代表一个坐标）与交互器进行交互，交互器返回一个数表示与终点的曼哈顿距离。</p><p>代码如下（只是interactor.h）：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; y &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">std</span>::flush;</span><br><span class="line">    <span class="hljs-keyword">int</span> res;</span><br><span class="line">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; res;</span><br><span class="line">    <span class="hljs-keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以把它当做附加源文件提供给选手，方便不太懂的选手交互。</p><h4 id="数据判断"><a href="#数据判断" class="headerlink" title="数据判断"></a>数据判断</h4><p>在交互过程中，交互器需要面对选手提供的各种输出数据。这些数据可能不合法，为了节省代码，介绍一个assert函数，貌似testlib中有类似的函数。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">template</span> &lt; <span class="hljs-keyword">typename</span> T &gt;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">assert</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp;condition, <span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> &amp;message)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(!condition) &#123;</span><br><span class="line"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cerr</span> &lt;&lt; message &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line">score &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此函数是模板函数，刚入门C++的人可能不太懂。对于这个函数来讲，模板就是为了适用所有类型。condition为一个表达式，message为提供的额外信息。</p><p>判断选手输出是否为整数可以用以下代码，如果不是，cin就会出错，然后执行if中的语句（选手的输出等同于交互器的输入）。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">int</span> x, y;</span><br><span class="line">assert(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; x &gt;&gt; y, <span class="hljs-string">"Invalid `x` or `y`!"</span>);</span><br></pre></td></tr></table></figure><p>交互器判断选手输出的数的范围也是如此：</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert(x &gt;= <span class="hljs-number">1</span> &amp;&amp; x &lt;= n &amp;&amp; y &gt;= <span class="hljs-number">1</span> &amp;&amp; y &lt;= n, <span class="hljs-string">"`x` and `y` must in [1, n]!"</span>);</span><br></pre></td></tr></table></figure><h4 id="data-yml"><a href="#data-yml" class="headerlink" title="data.yml"></a>data.yml</h4><p>写好标程、题面，造好数据之后，对于SYZOJ的交互题必须用data.yml来指明交互器。</p><p>交互题与传统题的data.yml差别较小，只是增加交互器名称即可。使用C++11编写名为interactor.cpp的交互器，要在其中增加以下内容：</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interactor:</span><br><span class="line">  language: cpp11</span><br><span class="line">  fileName: interactor.cpp</span><br></pre></td></tr></table></figure><p>然后数据文件的ZIP中需要包含interactor.cpp文件。</p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>总体来说比较简单。交互题一般能增大难度、限制选手的算法，也是强制在线的一种实现方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有关在OJ上出交互题的一些技巧&lt;/p&gt;
&lt;p&gt;本博客所指的OJ仅指SYZOJ，即搭建LOJ使用的在线评测系统。&lt;/p&gt;
&lt;p&gt;SYZOJ源码链接(Github仓库): &lt;a href=&quot;https://github.com/syzoj/syzoj&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/syzoj/syzoj&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技巧" scheme="https://xciyang.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="闲聊" scheme="https://xciyang.github.io/tags/%E9%97%B2%E8%81%8A/"/>
    
      <category term="技巧" scheme="https://xciyang.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="颓废" scheme="https://xciyang.github.io/tags/%E9%A2%93%E5%BA%9F/"/>
    
  </entry>
  
  <entry>
    <title>NOI2003 - 文本编辑器</title>
    <link href="https://xciyang.github.io/2019-07/11-luogu4008/"/>
    <id>https://xciyang.github.io/2019-07/11-luogu4008/</id>
    <published>2019-07-11T03:04:15.000Z</published>
    <updated>2019-12-09T12:30:52.080Z</updated>
    
    <content type="html"><![CDATA[<p>【LuoguP4008】【BZOJ1507】【NOI2003】文本编辑器 Editor<br>题目链接1: <a href="https://www.luogu.org/problemnew/show/P4008" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P4008</a><br>题目链接2: <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1507" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=1507</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这题放在任务计划里已经有些时日了，又拿出来看了看题面。原本是练习Splay用的，但因为不够熟练和懒得缘故，一直不想动手写。看了题解，发现了一个思路简单，代码较为暴力的数据结构——“块状链表”。</p><a id="more"></a><p>然后就愉快的做（抄）完了，首先感谢<a href="https://www.cnblogs.com/HenryHuang-Never-Settle/p/10803406.html" target="_blank" rel="noopener">@HenryHuang的题解</a>，他的题解使我学习块状链表得到了很大帮助。</p><p>我才不会告诉你很久以前我以为这是STL中string的练手题。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先这道题有一个光标，只需用一个变量就可以维护光标。</p><p>然后就只剩下Insert、Delete、Get操作了，一般我们都会想到平衡树（Splay），但是难理解且代码复杂。</p><p>首先我们都听说过甚至用过链表，STL中的list就是使用链表实现。这种数据结构只能$ O(1) $获得首节点和尾结点，需要逐个遍历才能获得中间的节点。</p><p>不过链表也有优点，由于它的结构为一条链，每个节点维护了前节点指针和后节点指针，因此向中间插入一个数的复杂度为$ O(1) $。</p><p>然而对于这道题，使用链表并不可行，数据范围太大。</p><p>还有一个最简单最常见的数据结构，名叫数组。这个数据结构支持$ O(1) $访问。STL中有封装好的类数组数据结构vector，其中有封装好的函数insert用来插入操作。</p><p>对于数组，插入操作只需要2次memcpy函数，一次赋值操作就能完成，但是复杂度是极高的。每次插入的理论最大复杂度是 $ O(\frac{n}{2}) $</p><p>那么这题就不能投机取巧了吗？万一把数组和链表通过一定方式结合起来，复杂度不就会均衡了吗？</p><p>众所周知，优化暴力的方法有很多，其中分块（根号）算法就非常热门。那么我们让数组的大小$ \sqrt{n} $，然后将这些数组通过链表链接起来，那复杂度不就均衡了吗。</p><p>这种数据结构就是我使用的——块状链表。首先是定义一个结构体，用来存储某一节点的信息。我们只需要维护一个指向下一元素指针即可。</p><p>题目中说明了最大数据范围：</p><blockquote><p>所有 INSERT 插入的字符数之和不超过 2M（1M=1024*1024 字节） ，正确的输出文件长度不超过 3M 字节。</p></blockquote><p>所以我设置每个块的大小为1300，其实块大小在一定范围内即可。在这范围内，块大小和效率只有微小的关系。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> sqrtn= <span class="hljs-number">1300</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BLOCK</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> siz, nxt;</span><br><span class="line"><span class="hljs-keyword">char</span> ch[sqrtn &lt;&lt; <span class="hljs-number">1</span>];</span><br><span class="line">&#125; b[sqrtn &lt;&lt; <span class="hljs-number">2</span>];</span><br></pre></td></tr></table></figure><h4 id="内存池"><a href="#内存池" class="headerlink" title="内存池"></a>内存池</h4><p>为了节点数组循环利用，学习原题解的做法，使用内存池。注意，程序开始时需要初始化内存池。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">int</span> blocks[sqrtn &lt;&lt; <span class="hljs-number">2</span>], bp, cur;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">newb</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> blocks[bp++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delb</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">blocks[--bp]= x;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>肯定会有人问，块状链表怎么维护呢？这是最核心的部分。</p><h4 id="Split"><a href="#Split" class="headerlink" title="Split"></a>Split</h4><p>当某一个块较大时我们需要分裂成两个块。在某些操作（插入、删除等）时，我们可以先从光标位置分裂这个块，然后就可以很方便的对后面的内容进行操作。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// x 代表块编号，p代表分裂的位置（相对于块x）</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(x == <span class="hljs-number">-1</span> || p == b[x].siz) <span class="hljs-keyword">return</span>;</span><br><span class="line">add(x, newb(), b[x].ch + p, b[x].siz - p);</span><br><span class="line">b[x].siz= p;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h4><p>上面的split函数中用到了add，这个函数是用来在某一块后面插入一个块。但add函数用作插入，那样就不能维护块状链表的性质了。</p><p>add函数与链表的插入类似，只不过赋值变成了memcpy函数。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// x 代表块编号</span></span><br><span class="line"><span class="hljs-comment">// y 常为一个未初始的块</span></span><br><span class="line"><span class="hljs-comment">// st 为块 y 中的内容</span></span><br><span class="line"><span class="hljs-comment">// siz 为 st 的长度</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">char</span> *st, <span class="hljs-keyword">int</span> siz)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(y != <span class="hljs-number">-1</span>) b[y].nxt= b[x].nxt, b[y].siz= siz, <span class="hljs-built_in">memcpy</span>(b[y].ch, st, siz);</span><br><span class="line">b[x].nxt= y;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h4><p>如果两个相邻的块都很小，那么维护时就要需要合并。我选择将靠后的块合并到靠前的块中，这样比较简单。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// x 代表块的编号</span></span><br><span class="line"><span class="hljs-comment">// y 代表合并到 x 的块的编号</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">memcpy</span>(b[x].ch + b[x].siz, b[y].ch, b[y].siz);</span><br><span class="line">b[x].siz+= b[y].siz, b[x].nxt= b[y].nxt, delb(y);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="何时维护"><a href="#何时维护" class="headerlink" title="何时维护"></a>何时维护</h4><p>其实我学习的时候，一开始也对维护有些不解。虽然知道了如何维护，但没有具体的思路，不知道什么时候需要维护。</p><p>根据前人的题解，维护只需要部分维护，即在插入和删除操作之后，维护相关的块。只要保证相邻两块大小之和大于$ \sqrt{n} $，每块大小不超过$ \sqrt{n} $，并且不考虑当块较大时的分裂操作，可以保证块的数量控制在 $ [\sqrt{n},\sqrt{2n}] $ 范围内。</p><p>这里再次感谢<a href="https://www.cnblogs.com/HenryHuang-Never-Settle/p/10803406.html" target="_blank" rel="noopener">@HenryHuang的题解</a>所给予的帮助。</p><h4 id="对于本题"><a href="#对于本题" class="headerlink" title="对于本题"></a>对于本题</h4><p>本题中有插入和删除操作，两者类似。先得到光标当前所属的块，将此块在光标位置分裂。</p><p>对于插入，N 代表要插入的字符串长度。我们在分裂的位置先插入$ \frac{N}{\sqrt{n}} $个长度为$ \sqrt{n} $的块，剩下不足$ \sqrt{n} $长度的再独自插入，因为思路简单就不做解释。然后判断大小合并分裂位置前的块$ x $与$ x $的next块，合并刚插入的最后一个块$ y $与$ y $的next块。</p><p>对于删除，N 代表要删除的长度。在分裂的位置后逐个删除回收即可，如果最后一个块的长度大于剩余删除数，就再次分裂最后一个块，然后删除。</p><p>这部分代码将最后给出，先给出遍历块查找当前光标位置的代码。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// x 为要找的位置，</span></span><br><span class="line"><span class="hljs-comment">// 因为 x 也是一个引用，最后将赋值为相对于块res的位置</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pos</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> res= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(res != <span class="hljs-number">-1</span> &amp;&amp; b[res].siz &lt; x) x-= b[res].siz, res= b[res].nxt;</span><br><span class="line"><span class="hljs-keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于Get操作更简单，不需要分裂操作，我为了方便直接在函数中输出了。推荐学习者自行构思，有助于对块状链表的理解。</p><p>提示，此题读入较大，建议使用极速IO优化。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">IOBUF</span> &#123;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">char</span> buff[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">24</span>], *p, *pend;</span><br><span class="line">&#125; in;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">char</span> buff[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">24</span>], *p;</span><br><span class="line">&#125; out;</span><br><span class="line">IOBUF() &#123;</span><br><span class="line">in.p= in.buff, out.p= out.buff, in.pend= in.buff + fread(in.buff, <span class="hljs-number">1</span>, <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">24</span>, <span class="hljs-built_in">stdin</span>);</span><br><span class="line">&#125;</span><br><span class="line">~IOBUF() &#123;</span><br><span class="line">fwrite(out.buff, <span class="hljs-number">1</span>, out.p - out.buff, <span class="hljs-built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; IOB;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> getchar() (*(IOB.in.p++))</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> putchar(c) (*(IOB.out.p++)= (c))</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> e= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">char</span> ch= getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch &lt; <span class="hljs-string">'0'</span> || ch &gt; <span class="hljs-string">'9'</span>) ch= getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) e= e * <span class="hljs-number">10</span> + ch - <span class="hljs-string">'0'</span>, ch= getchar();</span><br><span class="line"><span class="hljs-keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> sqrtn= <span class="hljs-number">1300</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BLOCK</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> siz, nxt;</span><br><span class="line"><span class="hljs-keyword">char</span> ch[sqrtn &lt;&lt; <span class="hljs-number">1</span>];</span><br><span class="line">&#125; b[sqrtn &lt;&lt; <span class="hljs-number">2</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> blocks[sqrtn &lt;&lt; <span class="hljs-number">2</span>], bp, cur;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt; (sqrtn &lt;&lt; <span class="hljs-number">2</span>); i++) blocks[i]= i;</span><br><span class="line">b[<span class="hljs-number">0</span>].nxt= <span class="hljs-number">-1</span>, bp= <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">newb</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> blocks[bp++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delb</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">blocks[--bp]= x;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">char</span> *st, <span class="hljs-keyword">int</span> siz)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(y != <span class="hljs-number">-1</span>) b[y].nxt= b[x].nxt, b[y].siz= siz, <span class="hljs-built_in">memcpy</span>(b[y].ch, st, siz);</span><br><span class="line">b[x].nxt= y;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pos</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">// &amp;x</span></span><br><span class="line"><span class="hljs-keyword">int</span> res= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(res != <span class="hljs-number">-1</span> &amp;&amp; b[res].siz &lt; x) x-= b[res].siz, res= b[res].nxt;</span><br><span class="line"><span class="hljs-keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(x == <span class="hljs-number">-1</span> || p == b[x].siz) <span class="hljs-keyword">return</span>;</span><br><span class="line">add(x, newb(), b[x].ch + p, b[x].siz - p);</span><br><span class="line">b[x].siz= p;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">memcpy</span>(b[x].ch + b[x].siz, b[y].ch, b[y].siz);</span><br><span class="line">b[x].siz+= b[y].siz, b[x].nxt= b[y].nxt, delb(y);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> siz, <span class="hljs-keyword">char</span> *st)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> nowp= pos(w);</span><br><span class="line">split(nowp, w);</span><br><span class="line"><span class="hljs-keyword">int</span> nextp, fp= nowp;</span><br><span class="line"><span class="hljs-keyword">while</span>(sqrtn &lt; siz) &#123;</span><br><span class="line">nextp= newb();</span><br><span class="line">add(nowp, nextp, st, sqrtn);</span><br><span class="line">st+= sqrtn, siz-= sqrtn, nowp= nextp;</span><br><span class="line">&#125;</span><br><span class="line">nextp= newb(), add(nowp, nextp, st, siz);</span><br><span class="line"><span class="hljs-keyword">if</span>(b[nextp].nxt != <span class="hljs-number">-1</span> &amp;&amp; b[nextp].siz + b[b[nextp].nxt].siz &lt; sqrtn) merge(nextp, b[nextp].nxt);</span><br><span class="line"><span class="hljs-keyword">if</span>(b[fp].nxt != <span class="hljs-number">-1</span> &amp;&amp; b[fp].siz + b[b[fp].nxt].siz &lt; sqrtn) merge(fp, b[fp].nxt);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">erase</span><span class="hljs-params">(<span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> siz)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> nowp= pos(w);</span><br><span class="line">split(nowp, w);</span><br><span class="line"><span class="hljs-keyword">int</span> nextp= b[nowp].nxt;</span><br><span class="line"><span class="hljs-keyword">while</span>(siz &gt; b[nextp].siz) siz-= b[nextp].siz, b[nowp].nxt= b[nextp].nxt, delb(nextp), nextp= b[nowp].nxt;</span><br><span class="line">split(nextp, siz), b[nowp].nxt= b[nextp].nxt, delb(nextp);</span><br><span class="line"><span class="hljs-keyword">while</span>(b[nowp].nxt != <span class="hljs-number">-1</span> &amp;&amp; b[nowp].siz + b[b[nowp].nxt].siz &lt; sqrtn) merge(nowp, b[nowp].nxt);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> siz)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> nowp= pos(w), mins;</span><br><span class="line">mins= min(siz, b[nowp].siz - w), siz-= mins;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= w; i &lt; w + mins; i++) <span class="hljs-built_in">putchar</span>(b[nowp].ch[i]);</span><br><span class="line"><span class="hljs-keyword">while</span>(siz) &#123;</span><br><span class="line">nowp= b[nowp].nxt, mins= min(siz, b[nowp].siz), siz-= mins;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>; i &lt; mins; i++) <span class="hljs-built_in">putchar</span>(b[nowp].ch[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">readopt</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">char</span> ch= getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch != <span class="hljs-string">'M'</span> &amp;&amp; ch != <span class="hljs-string">'I'</span> &amp;&amp; ch != <span class="hljs-string">'D'</span> &amp;&amp; ch != <span class="hljs-string">'G'</span> &amp;&amp; ch != <span class="hljs-string">'P'</span> &amp;&amp; ch != <span class="hljs-string">'N'</span>) ch= getchar();</span><br><span class="line"><span class="hljs-keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> m, n;</span><br><span class="line"><span class="hljs-keyword">char</span> str[<span class="hljs-number">1048576</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">init(), m= read();</span><br><span class="line"><span class="hljs-keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="hljs-keyword">switch</span>(readopt()) &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'M'</span>: cur= read(); <span class="hljs-keyword">break</span>;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'P'</span>: --cur; <span class="hljs-keyword">break</span>;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'N'</span>: ++cur; <span class="hljs-keyword">break</span>;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'I'</span>: &#123;</span><br><span class="line">n= read();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">str[i]= getchar();</span><br><span class="line"><span class="hljs-keyword">if</span>(str[i] &lt; <span class="hljs-number">32</span> || str[i] &gt; <span class="hljs-number">126</span>) --i;</span><br><span class="line">&#125;</span><br><span class="line">insert(cur, n, str);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'D'</span>: &#123;</span><br><span class="line">n= read();</span><br><span class="line">erase(cur, n);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">'G'</span>: &#123;</span><br><span class="line">n= read();</span><br><span class="line">get(cur, n);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">default</span>: <span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【LuoguP4008】【BZOJ1507】【NOI2003】文本编辑器 Editor&lt;br&gt;题目链接1: &lt;a href=&quot;https://www.luogu.org/problemnew/show/P4008&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.org/problemnew/show/P4008&lt;/a&gt;&lt;br&gt;题目链接2: &lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=1507&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.lydsy.com/JudgeOnline/problem.php?id=1507&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这题放在任务计划里已经有些时日了，又拿出来看了看题面。原本是练习Splay用的，但因为不够熟练和懒得缘故，一直不想动手写。看了题解，发现了一个思路简单，代码较为暴力的数据结构——“块状链表”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://xciyang.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xciyang.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="分块" scheme="https://xciyang.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="块状链表" scheme="https://xciyang.github.io/tags/%E5%9D%97%E7%8A%B6%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LuoguP3396 - 哈希冲突</title>
    <link href="https://xciyang.github.io/2019-07/09-luogu3396/"/>
    <id>https://xciyang.github.io/2019-07/09-luogu3396/</id>
    <published>2019-07-09T08:42:10.000Z</published>
    <updated>2019-12-09T12:30:52.082Z</updated>
    
    <content type="html"><![CDATA[<p>【LuoguP3396】哈希冲突<br>题目链接: <a href="https://www.luogu.org/problemnew/show/P3396" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3396</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>话说快暑假了…但是好像没有几天假期啊。</p><p>然后期末考试之际做了找到题，发现暴力好像都能用分块优化。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>读完题目，发现想不到任何复杂度较低思路。对于几乎不接触分块的我，数据范围似乎没有什么用。</p><p>然后就打开了题解，才知道可以根号算法（不指分块），不过我统一把用sqrt函数的解法都叫做分块。</p><p>暴力的复杂度大概是$ O(mn) $ ，每次查询我们都需要$ O(n) $ 来遍历数组，修改是$ O(1) $。如果预处理的话那更玄学，每次查询时$ O(1) $，而修改是$ O(n^2) $ ，那么很有可能变成$ O(n^2m) $算法。</p><p>所以考虑只预处理$ \sqrt{n} $的模数，复杂度为$ O(n \sqrt{n}) $。</p><p>对于查询，如果查询的模数不超过$ \sqrt{n} $那么可以直接输出答案。如果模数超过$ \sqrt{n} $，我们只需要枚举模$ p $后的结果，把他们加起来，那么复杂度仍为$ \frac{n}{\sqrt{n}} = \sqrt{n} $。</p><p>对于修改，与预处理类似，还是只修改$ \sqrt{n} $的模数，由于只是单点修改，所以少了一层循环，那么复杂度为$ O(\sqrt{n}) $。</p><p>总复杂度最大是$ O((m + n)\sqrt{n}) $，然后就可以写代码了，代码极为简单，感觉像是暴力。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n, m, nb, v[<span class="hljs-number">150001</span>], sum[<span class="hljs-number">1500</span>][<span class="hljs-number">1500</span>], tmpx, tmpy;</span><br><span class="line"><span class="hljs-keyword">char</span> cmd;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m, nb= <span class="hljs-built_in">sqrt</span>(n);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= nb; i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j= <span class="hljs-number">1</span>; j &lt;= n; j++) sum[i][j % i]+= v[j];</span><br><span class="line"><span class="hljs-keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; cmd &gt;&gt; tmpx &gt;&gt; tmpy;</span><br><span class="line"><span class="hljs-keyword">if</span>(cmd == <span class="hljs-string">'A'</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(tmpx &lt;= nb)</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; sum[tmpx][tmpy] &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> ans= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= tmpy; i &lt;= n; i+= tmpx) ans+= v[i];</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= nb; i++) sum[i][tmpx % i]= sum[i][tmpx % i] - v[tmpx] + tmpy;</span><br><span class="line">            v[tmpx]= tmpy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>因为之前根号算法做比较少，而这道题给我很大的启示，以后一些只能想到暴力的题可以尝试使用根号来优化。</p><p>听说这题不用根号，而使用1/3次方作为块的大小效率更高。但是不会证明，而且复杂度比较玄学，可能只适用这一道题的数据吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【LuoguP3396】哈希冲突&lt;br&gt;题目链接: &lt;a href=&quot;https://www.luogu.org/problemnew/show/P3396&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.org/problemnew/show/P3396&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;话说快暑假了…但是好像没有几天假期啊。&lt;/p&gt;
&lt;p&gt;然后期末考试之际做了找到题，发现暴力好像都能用分块优化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://xciyang.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xciyang.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="分块" scheme="https://xciyang.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>LuoguP3709 - 大爷的字符串题</title>
    <link href="https://xciyang.github.io/2019-07/01-luogu3709/"/>
    <id>https://xciyang.github.io/2019-07/01-luogu3709/</id>
    <published>2019-07-01T12:13:27.000Z</published>
    <updated>2019-12-09T12:30:52.079Z</updated>
    
    <content type="html"><![CDATA[<p>【LuoguP3709】大爷的字符串题<br>题目链接: <a href="https://www.luogu.org/problemnew/show/P3709" target="_blank" rel="noopener">https://www.luogu.org/problemnew/show/P3709</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近一个月是各种忙啊。先是准备了半个多月的合格考，然后终于回归了OI。最近一周又生病请假等就没有更新过题解。上次更新题解也是很久之前，因为中间有段时间颓废过度做项目，现在那个项目基本已经咕咕，因为懒得再下Visual Studio了。</p><p>这几天一直在做莫队，然后做到这道题，打算水篇题解。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题可以说是语文阅读理解神题，丝毫看不懂出题人意图是什么。</p><p>根据出题人的解释，一句话概括如下: </p><blockquote><p>给你 N 个数, M 次询问区间[l, r]中众数的出现次数</p></blockquote><p>然后就非常容易，但是字符集数据范围1e9需要离散化，我直接边读入边使用map处理。</p><p>根据一些其他题解的提示，我们开一个cnt数组记录区间内某个数出现的次数，然后用cntt数组记录cnt数组中数出现的次数。</p><p>在区间扩大时ans和cnt数组取max，然后区间缩小时就判断cntt是否已经为0，如果是就让ans减一。当然不能忘了区间更改时cnt和cntt肯定都会有所改变。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>评测详情(未开O2): Accepted 100 用时: 1634ms / 内存: 9740KB</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x= <span class="hljs-number">0</span>, f= <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">char</span> ch= getchar();</span><br><span class="line">    <span class="hljs-keyword">while</span>(ch &lt; <span class="hljs-string">'0'</span> || ch &gt; <span class="hljs-string">'9'</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'-'</span>) f= <span class="hljs-number">-1</span>;</span><br><span class="line">        ch= getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">while</span>(ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) x= x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">'0'</span>, ch= getchar();</span><br><span class="line">    <span class="hljs-keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span>) x= -x, <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'-'</span>);</span><br><span class="line">    <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">9</span>) write(x / <span class="hljs-number">10</span>);</span><br><span class="line">    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'0'</span> + x % <span class="hljs-number">10</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> n, m, a[<span class="hljs-number">200001</span>], mapptr, cnt[<span class="hljs-number">200001</span>], cntt[<span class="hljs-number">200001</span>], nowans, ans[<span class="hljs-number">200001</span>], ns;</span><br><span class="line"><span class="hljs-built_in">map</span>&lt; <span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span> &gt; mapping;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QUERY</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> id, l, r, bl;</span><br><span class="line">    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> QUERY &amp;q2) <span class="hljs-keyword">const</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> bl == q2.bl ? r &lt; q2.r : l &lt; q2.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; qs[<span class="hljs-number">200001</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    --cntt[cnt[x]];</span><br><span class="line">    ++cntt[++cnt[x]];</span><br><span class="line">    nowans= max(nowans, cnt[x]);</span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    --cntt[cnt[x]];</span><br><span class="line">    <span class="hljs-keyword">if</span>(!cntt[cnt[x]] &amp;&amp; nowans == cnt[x]) --nowans;</span><br><span class="line">    ++cntt[--cnt[x]];</span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    n= read(), m= read(), ns= <span class="hljs-built_in">sqrt</span>(n);</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        a[i]= read();</span><br><span class="line">        <span class="hljs-keyword">if</span>(!mapping[a[i]]) mapping[a[i]]= ++mapptr;</span><br><span class="line">        a[i]= mapping[a[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= m; i++) qs[i].l= read(), qs[i].r= read(), qs[i].id= i, qs[i].bl= (qs[i].l - <span class="hljs-number">1</span>) / ns;</span><br><span class="line">    sort(qs + <span class="hljs-number">1</span>, qs + m + <span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">int</span> l= <span class="hljs-number">1</span>, r= <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">while</span>(l &lt; qs[i].l) del(a[l++]);</span><br><span class="line">        <span class="hljs-keyword">while</span>(l &gt; qs[i].l) add(a[--l]);</span><br><span class="line">        <span class="hljs-keyword">while</span>(r &gt; qs[i].r) del(a[r--]);</span><br><span class="line">        <span class="hljs-keyword">while</span>(r &lt; qs[i].r) add(a[++r]);</span><br><span class="line">        ans[qs[i].id]= nowans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i &lt;= m; i++) write(-ans[i]), <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【LuoguP3709】大爷的字符串题&lt;br&gt;题目链接: &lt;a href=&quot;https://www.luogu.org/problemnew/show/P3709&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.org/problemnew/show/P3709&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近一个月是各种忙啊。先是准备了半个多月的合格考，然后终于回归了OI。最近一周又生病请假等就没有更新过题解。上次更新题解也是很久之前，因为中间有段时间颓废过度做项目，现在那个项目基本已经咕咕，因为懒得再下Visual Studio了。&lt;/p&gt;
&lt;p&gt;这几天一直在做莫队，然后做到这道题，打算水篇题解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://xciyang.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://xciyang.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="STL" scheme="https://xciyang.github.io/tags/STL/"/>
    
      <category term="莫队" scheme="https://xciyang.github.io/tags/%E8%8E%AB%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>项目日记 - 开发图片爬虫 Ⅲ</title>
    <link href="https://xciyang.github.io/2019-06/03-spiking3/"/>
    <id>https://xciyang.github.io/2019-06/03-spiking3/</id>
    <published>2019-06-03T12:45:10.000Z</published>
    <updated>2019-12-09T12:30:52.094Z</updated>
    
    <content type="html"><![CDATA[<p>用C++开发一个图片爬虫 Ⅲ ：URL预处理 【咕咕】<br>封面图片来自网络，如有侵权将删除。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一节说这节介绍WinHTTP，现在好像鸽子了。经过我再三思考后，还是先深入学习WinInet吧。</p><p>关于根据链接下载网页的各种方式在第一节已经介绍过了。这里再补充一下，还有一种方式是使用外部库libcurl，使用方便代码简洁，但我不把它当做我们主要学习的对象，因为它太过于简单。</p><p>这节可以说是个扩展篇，并不是这个项目优先考虑的内容。先介绍它主要是因为这部分东西更有意思，大家可能会更感兴趣。</p><a id="more"></a><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>这个预处理是我自己勉强定义的，所以大家可能不理解。</p><p>通俗的说，URL预处理意为对一个URL链接本体进行处理，请大家不要误以为是对HTML网页内容进行分析。</p><p>再说清楚一些，获取链接所指向的内容前，程序并不知道这个内容是什么类型的。也就是说，它可能是一个HTML也可能是图片，又或者是一个CSS文件。所以我们要对URL进行一定的预处理，然后判断文件后缀之类的。</p><p>先给出本节流程图：</p><p><img src="/images/spiKing5.png" alt="项目流程图"></p><p>很多人可能不理解获得内容类型为什么需要先分解URL，那就接着往下看。</p><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>从基础说起，大家都模糊地知道URL是什么，我给出它的定义：</p><blockquote><p>URL是统一资源定位符（英语Uniform Resource Locator的缩写）也被称为网页地址，是因特网上标准的资源的地址。它最初是由蒂姆·伯纳斯·李发明用来作为万维网的地址。现在它已经被万维网联盟编制为互联网标准RFC1738了。</p></blockquote><p>URL由多部分组成，详细说有9部分，我们一个一个介绍。有关资料部分来自于<a href="https://blog.csdn.net/u014686399/article/details/84726335" target="_blank" rel="noopener">going_han的博客</a>。</p><p>一个URL的实例: <code>scheme://user:password@host:port/path;params?query#frag</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">名称</th><th style="text-align:left">介绍</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">协议(protocol)</td><td style="text-align:left">为进行网络中的数据交换而建立的规则、标准或约定。有时也叫scheme，常用的协议有http、https、ftp、file、mailto。</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">用户名(user)</td><td style="text-align:left">一般用不到，为访问资源使用的用户名。</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">密码(password)</td><td style="text-align:left">一般也用不到，为访问资源使用的密码。</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">域名(domain)</td><td style="text-align:left">域名（英语：Domain Name），简称域名、网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。有时也叫host，可以使用IP地址作为域名使用。</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">端口(port)</td><td style="text-align:left">在网络技术中，端口（Port）有好几种意思。我们这里所指的端口不是指物理意义上的端口，而是特指TCP/IP协议中的端口，是逻辑意义上的端口。端口不是一个必须部分，如果省略将采用协议默认使用的端口。</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">路径(path)</td><td style="text-align:left">由零或多个“/”符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">参数(params)</td><td style="text-align:left">这是用于指定特殊参数的可选项。</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">查询(query)</td><td style="text-align:left">可选项。用于给动态网页传递参数，可有多个参数，用“&amp;”符号隔开，每个参数的名和值用“=”符号隔开。</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">片段(frag)</td><td style="text-align:left">主要用于对资源进行分类。例如一个网页中有多个名词解释，可使用fragment直接定位到某一名词解释。访问一个帮助文档时，文档的各个章节就可以表述为片段。</td></tr></tbody></table></div><p>所以分解URL有什么用呢？我们再简单了解一下HTTP访问的步骤，HTTP访问时会进行多步操作，其中有两步我想重点介绍一下，分别是：发送请求头(Request Headers)和接受响应头(Response Headers)。</p><p>其实大家现在就可以直观的了解它，介绍一种方法。</p><p>随便找一个可用网页（比如这篇博客） -&gt; 点击键盘上的F12，弹出开发人员调试工具 -&gt; 进入’Network’选项页 -&gt; 点击录制按钮（黑色的圆点），按钮变红色 -&gt; 刷新页面。</p><p>然后会有很多信息，我们要找的一般在第一个位置，Name一般为URL最后一个’/‘后的字符串。如果是在这篇博客进行的上述操作，则Name为’03-spiking3/‘，点击会显示详细信息。</p><p>我使用的浏览器效果如下图，部分进行了打码处理，URL为localhost是因为我在本地测试。</p><p><img src="/images/spiKing6.png" alt="开发人员调试工具截图"></p><p>这里已经很直观了，我们需要的就是Response Headers中的’Content-Type:text/html’，这个可以用来判断内容的类型。大家可以再打开一个图片URL进行观察，比如上面那个截图，发现其中’Content-Type:image/png’。我们根据此信息来判断内容的类型。</p><p>其他信息大家可以自行了解，对项目作用不大，我就不作介绍了。</p><p>另外，本节含有大量string类的内容，但只要不是初学者都很熟悉了，因此不作理论上的介绍。</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>这部分理论易理解，但代码部分比较长。先给出本节所有的代码:</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">string</span> _trim(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;str) &#123;</span><br><span class="line"><span class="hljs-keyword">size_t</span> start= str.find_first_not_of(<span class="hljs-string">" \n\r\t"</span>);</span><br><span class="line"><span class="hljs-keyword">size_t</span> until= str.find_last_not_of(<span class="hljs-string">" \n\r\t"</span>);</span><br><span class="line"><span class="hljs-built_in">string</span>::const_iterator i= start == <span class="hljs-built_in">string</span>::npos ? str.begin() : str.begin() + start;</span><br><span class="line"><span class="hljs-built_in">string</span>::const_iterator x= until == <span class="hljs-built_in">string</span>::npos ? str.end() : str.begin() + until + <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(i, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parse_url</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;raw_url, <span class="hljs-built_in">string</span> &amp;port, <span class="hljs-built_in">string</span> &amp;domain, <span class="hljs-built_in">string</span> &amp;path)</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">string</span> x= _trim(raw_url), protocol, query;</span><br><span class="line"><span class="hljs-keyword">int</span> offset= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">size_t</span> pos1, pos2, pos3, pos4;</span><br><span class="line">offset= offset == <span class="hljs-number">0</span> &amp;&amp; x.compare(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-string">"https://"</span>) == <span class="hljs-number">0</span> ? <span class="hljs-number">8</span> : offset;</span><br><span class="line">offset= offset == <span class="hljs-number">0</span> &amp;&amp; x.compare(<span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-string">"http://"</span>) == <span class="hljs-number">0</span> ? <span class="hljs-number">7</span> : offset;</span><br><span class="line">pos1= x.find_first_of(<span class="hljs-string">'/'</span>, offset + <span class="hljs-number">1</span>);</span><br><span class="line">path= pos1 == <span class="hljs-built_in">string</span>::npos ? <span class="hljs-string">""</span> : x.substr(pos1);</span><br><span class="line">domain= <span class="hljs-built_in">string</span>(x.begin() + offset, pos1 != <span class="hljs-built_in">string</span>::npos ? x.begin() + pos1 : x.end());</span><br><span class="line">path= (pos2= path.find(<span class="hljs-string">"#"</span>)) != <span class="hljs-built_in">string</span>::npos ? path.substr(<span class="hljs-number">0</span>, pos2) : path;</span><br><span class="line">port= (pos3= domain.find(<span class="hljs-string">":"</span>)) != <span class="hljs-built_in">string</span>::npos ? domain.substr(pos3 + <span class="hljs-number">1</span>) : <span class="hljs-string">"0"</span>;</span><br><span class="line">domain= domain.substr(<span class="hljs-number">0</span>, pos3 != <span class="hljs-built_in">string</span>::npos ? pos3 : domain.length());</span><br><span class="line">protocol= offset &gt; <span class="hljs-number">0</span> ? x.substr(<span class="hljs-number">0</span>, offset - <span class="hljs-number">3</span>) : <span class="hljs-string">""</span>;</span><br><span class="line">query= (pos4= path.find(<span class="hljs-string">"?"</span>)) != <span class="hljs-built_in">string</span>::npos ? path.substr(pos4 + <span class="hljs-number">1</span>) : <span class="hljs-string">""</span>;</span><br><span class="line">path= pos4 != <span class="hljs-built_in">string</span>::npos ? path.substr(<span class="hljs-number">0</span>, pos4) : path;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">judgeUrlType</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *Url, <span class="hljs-built_in">string</span> &amp;fileSuffix)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">static</span> byte Temp[MAXBLOCKSIZE];</span><br><span class="line">HINTERNET hSession= InternetOpenA(<span class="hljs-string">"DownloadKit"</span>, INTERNET_OPEN_TYPE_PRECONFIG, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>), hConnect= <span class="hljs-number">0</span>, hRequest= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(hSession != <span class="hljs-literal">NULL</span>) &#123;</span><br><span class="line">INTERNET_PORT nPort= <span class="hljs-number">0</span>;</span><br><span class="line">DWORD dwReadSize= MAXBLOCKSIZE;</span><br><span class="line"><span class="hljs-built_in">string</span> sPort, sServer, sObject;</span><br><span class="line">parse_url(Url, sPort, sServer, sObject);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">size_t</span> i= <span class="hljs-number">0</span>; i &lt; sPort.size(); i++) nPort= nPort * <span class="hljs-number">10</span> + sPort[i] - <span class="hljs-string">'0'</span>;</span><br><span class="line">hConnect= InternetConnectA(hSession, sServer.c_str(), nPort, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, INTERNET_SERVICE_HTTP, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);</span><br><span class="line"><span class="hljs-keyword">if</span>(hConnect == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">goto</span> fail;</span><br><span class="line">hRequest= HttpOpenRequestA(</span><br><span class="line">hConnect, <span class="hljs-string">"GET"</span>, sObject.c_str(), <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, INTERNET_FLAG_KEEP_CONNECTION | INTERNET_FLAG_NO_AUTH | INTERNET_FLAG_NO_COOKIES | INTERNET_FLAG_NO_UI | INTERNET_FLAG_IGNORE_CERT_CN_INVALID | INTERNET_FLAG_RELOAD, <span class="hljs-literal">NULL</span>);</span><br><span class="line"><span class="hljs-keyword">if</span>(hRequest == <span class="hljs-literal">NULL</span> || !HttpSendRequest(hRequest, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>)) <span class="hljs-keyword">goto</span> fail;</span><br><span class="line"><span class="hljs-keyword">if</span>(!HttpQueryInfoA(hRequest, HTTP_QUERY_RAW_HEADERS, Temp, &amp;dwReadSize, <span class="hljs-literal">NULL</span>)) <span class="hljs-keyword">goto</span> fail;</span><br><span class="line">Temp[dwReadSize]= <span class="hljs-string">'\0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> i= <span class="hljs-number">0</span>; i &lt; dwReadSize; i= i + <span class="hljs-built_in">strlen</span>((<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)Temp + i) + <span class="hljs-number">1</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">string</span>((<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)Temp + i).compare(<span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-string">"Content-Type:"</span>) == <span class="hljs-number">0</span>) &#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>, Temp + i + <span class="hljs-number">14</span>);</span><br><span class="line">fileSuffix= <span class="hljs-string">""</span>;</span><br><span class="line">fileSuffix= (<span class="hljs-built_in">string</span>((<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)Temp + i + <span class="hljs-number">14</span>).compare(<span class="hljs-string">"text/html"</span>) == <span class="hljs-number">0</span>) ? <span class="hljs-string">"html"</span> : fileSuffix;</span><br><span class="line">fileSuffix= (<span class="hljs-built_in">string</span>((<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)Temp + i + <span class="hljs-number">14</span>).compare(<span class="hljs-string">"image/png"</span>) == <span class="hljs-number">0</span>) ? <span class="hljs-string">"png"</span> : fileSuffix;</span><br><span class="line">fileSuffix= (<span class="hljs-built_in">string</span>((<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)Temp + i + <span class="hljs-number">14</span>).compare(<span class="hljs-string">"image/jpeg"</span>) == <span class="hljs-number">0</span>) ? <span class="hljs-string">"jpg"</span> : fileSuffix;</span><br><span class="line">fileSuffix= (<span class="hljs-built_in">string</span>((<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)Temp + i + <span class="hljs-number">14</span>).compare(<span class="hljs-string">"image/gif"</span>) == <span class="hljs-number">0</span>) ? <span class="hljs-string">"gif"</span> : fileSuffix;</span><br><span class="line"><span class="hljs-comment">// Add what you want</span></span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(hRequest) InternetCloseHandle(hRequest);</span><br><span class="line"><span class="hljs-keyword">if</span>(hConnect) InternetCloseHandle(hConnect);</span><br><span class="line"><span class="hljs-keyword">if</span>(hSession) InternetCloseHandle(hSession);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">fail:</span><br><span class="line"><span class="hljs-keyword">if</span>(hRequest) InternetCloseHandle(hRequest);</span><br><span class="line"><span class="hljs-keyword">if</span>(hConnect) InternetCloseHandle(hConnect);</span><br><span class="line"><span class="hljs-keyword">if</span>(hSession) InternetCloseHandle(hSession);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Internet Error\n"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>_trim</em>函数作用为去除字符串的空白换行符。</p><p><em>parse_url</em>函数作用为分解URL，分解为端口、域名和路径。</p><p><em>judgeUrlType</em>函数作用为获得HTTP响应头并分析URL内容类型。</p><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><p>本节使用C++STL中的string类比较多，简单的大家都使用过，所以介绍一下几个比较陌生的函数。</p><h5 id="find-first-not-of"><a href="#find-first-not-of" class="headerlink" title="find_first_not_of"></a>find_first_not_of</h5><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">size_t</span> find_first_not_of (<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; str, <span class="hljs-keyword">size_t</span> pos = <span class="hljs-number">0</span>) <span class="hljs-keyword">const</span>;</span><br><span class="line"><span class="hljs-keyword">size_t</span> find_first_not_of (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s, <span class="hljs-keyword">size_t</span> pos = <span class="hljs-number">0</span>) <span class="hljs-keyword">const</span>;</span><br><span class="line"><span class="hljs-keyword">size_t</span> find_first_not_of (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s, <span class="hljs-keyword">size_t</span> pos, <span class="hljs-keyword">size_t</span> n) <span class="hljs-keyword">const</span>;</span><br><span class="line"><span class="hljs-keyword">size_t</span> find_first_not_of (<span class="hljs-keyword">char</span> c, <span class="hljs-keyword">size_t</span> pos = <span class="hljs-number">0</span>) <span class="hljs-keyword">const</span>;</span><br></pre></td></tr></table></figure><p><em>Return Value</em>即返回值，返回第一个不匹配字符的位置，如果没有不匹配字符则返回string::npos。若使用字符串作参数，则此处不匹配字符指参数中不包含的字符。</p><h5 id="string-npos"><a href="#string-npos" class="headerlink" title="string::npos"></a>string::npos</h5><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">size_t</span> npos = <span class="hljs-number">-1</span>;</span><br></pre></td></tr></table></figure><h5 id="find-last-not-of"><a href="#find-last-not-of" class="headerlink" title="find_last_not_of"></a>find_last_not_of</h5><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">size_t</span> find_last_not_of (<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; str, <span class="hljs-keyword">size_t</span> pos = npos) <span class="hljs-keyword">const</span>;</span><br><span class="line"><span class="hljs-keyword">size_t</span> find_last_not_of (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s, <span class="hljs-keyword">size_t</span> pos = npos) <span class="hljs-keyword">const</span>;</span><br><span class="line"><span class="hljs-keyword">size_t</span> find_last_not_of (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s, <span class="hljs-keyword">size_t</span> pos, <span class="hljs-keyword">size_t</span> n) <span class="hljs-keyword">const</span>;</span><br><span class="line"><span class="hljs-keyword">size_t</span> find_last_not_of (<span class="hljs-keyword">char</span> c, <span class="hljs-keyword">size_t</span> pos = npos) <span class="hljs-keyword">const</span>;</span><br></pre></td></tr></table></figure><p><em>Return Value</em>即返回值，与find_first_not_of类似，返回最后一个不匹配字符的位置。</p><h5 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h5><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">substr</span> <span class="hljs-params">(<span class="hljs-keyword">size_t</span> pos = <span class="hljs-number">0</span>, <span class="hljs-keyword">size_t</span> len = npos)</span> <span class="hljs-keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p><em>Return Value</em>即返回值，返回从pos开始长度为len的子串。</p><h4 id="InternetConnectA"><a href="#InternetConnectA" class="headerlink" title="InternetConnectA"></a>InternetConnectA</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用C++开发一个图片爬虫 Ⅲ ：URL预处理 【咕咕】&lt;br&gt;封面图片来自网络，如有侵权将删除。&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;上一节说这节介绍WinHTTP，现在好像鸽子了。经过我再三思考后，还是先深入学习WinInet吧。&lt;/p&gt;
&lt;p&gt;关于根据链接下载网页的各种方式在第一节已经介绍过了。这里再补充一下，还有一种方式是使用外部库libcurl，使用方便代码简洁，但我不把它当做我们主要学习的对象，因为它太过于简单。&lt;/p&gt;
&lt;p&gt;这节可以说是个扩展篇，并不是这个项目优先考虑的内容。先介绍它主要是因为这部分东西更有意思，大家可能会更感兴趣。&lt;/p&gt;
    
    </summary>
    
    
      <category term="项目" scheme="https://xciyang.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="颓废" scheme="https://xciyang.github.io/tags/%E9%A2%93%E5%BA%9F/"/>
    
      <category term="项目" scheme="https://xciyang.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="爬虫" scheme="https://xciyang.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>项目日记 - 开发图片爬虫 Ⅱ</title>
    <link href="https://xciyang.github.io/2019-05/28-spiking2/"/>
    <id>https://xciyang.github.io/2019-05/28-spiking2/</id>
    <published>2019-05-28T12:54:38.000Z</published>
    <updated>2019-12-09T12:30:52.106Z</updated>
    
    <content type="html"><![CDATA[<p>用C++开发一个图片爬虫 Ⅱ ：编码转换</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们上一节学习了获取网页的代码，那么大家可能会以为接下来就是分析网页了。但事实上，我们还需要先转换编码。我们都知道，C++编程常用的是ASCII编码，而网页大部分使用的是UTF-8编码。</p><p>因此我们要先将获取后的网页转换成我们想要的编码，再去分析内容。</p><a id="more"></a><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>我们写编码转换的代码，肯定要知道这些编码之间的关系。</p><p>ASCII编码我们再熟悉不过了，然而我相信很多人和我一样，分不清什么是Unicode，UTF-8，UTF-16，UTF-32。</p><p>我不想用长篇大论来解释这些东西，就给出它们各自的定义和我们需要知道的东西。如果想更深入的了解，可以自行搜索。</p><blockquote><p>Unicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准，包括字符集、编码方案等。</p></blockquote><p>至于它为什么诞生，我简单说明一下。因为我们熟知的ASCII码能表示的字符是非常有限的，根本无法承受那么多国家的字符。因此国际组织就又发明了一个新的编码，几乎收尽所有国家的字符，甚至包括特殊字符。</p><p>Unicode与其他编码类似，也是每一个字符都对应一个数字来表示它。但Unicode也仅仅如此，它没有规定这个二进制代码如何存储。</p><p>那么问题来了，在Unicode编码下，假设有一个3字节的二进制代码，计算机怎么知道表示的是一个字符还是两个字符或者是三个字符呢？因此UTF-8、UTF-16这一系列东西就诞生了。</p><p>先介绍UTF-8，这是开发网页首选的编码存储方式。</p><blockquote><p>UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码，又称万国码，由Ken Thompson于1992年创建。</p></blockquote><p>如果略懂编码的话，可变长度是最大特点。但是为了实现可变长度，就需要一些二进制位来表示长度，我认为它的编码规则可以说是非常典型了。</p><div class="table-container"><table><thead><tr><th>字节数</th><th>二进制编码形式 </th></tr></thead><tbody><tr><td>1字节</td><td>0xxxxxxx</td></tr><tr><td>2字节</td><td>110xxxxx 10xxxxxx </td></tr><tr><td>3字节</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>4字节</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx </td></tr><tr><td>5字节</td><td>111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx </td></tr><tr><td>6字节</td><td>1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table></div><p>再简单说一下UTF-16，定义：</p><blockquote><p>UTF-16是Unicode字符编码五层次模型的第三层：字符编码表（Character Encoding Form，也称为 “storage format”）的一种实现方式。</p></blockquote><p>UTF-16虽然也可变长度，但不如UTF-8灵活。它有大尾序和小尾序两种储存形式，这个可以自行查阅。</p><blockquote><p>UTF-32 (或 UCS-4)是一种将Unicode字符编码的协定，对每一个Unicode码位使用恰好32位元。其它的Unicode transformation formats则使用不定长度编码。</p></blockquote><p>网上找到一个工具，<a href="https://www.qqxiuzi.cn/bianma/Unicode-UTF.php" target="_blank" rel="noopener">Unicode和UTF编码转换</a>，有兴趣可以试一下。</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>我们为什么要了解上面那些东西，最终还是为了更容易理解代码。先给出一个将一个字符串从UTF-8转为ASCII的示例代码，从网上抄下来的。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *<span class="hljs-title">changeTxtEncoding</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *szU8)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> wcsLen= MultiByteToWideChar(CP_UTF8, <span class="hljs-literal">NULL</span>, szU8, <span class="hljs-built_in">strlen</span>(szU8), <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-keyword">wchar_t</span> *wszString= <span class="hljs-keyword">new</span> <span class="hljs-keyword">wchar_t</span>[wcsLen + <span class="hljs-number">1</span>];</span><br><span class="line">MultiByteToWideChar(CP_UTF8, <span class="hljs-literal">NULL</span>, szU8, <span class="hljs-built_in">strlen</span>(szU8), wszString, wcsLen);</span><br><span class="line">wszString[wcsLen]= <span class="hljs-string">'\0'</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> ansiLen= WideCharToMultiByte(CP_ACP, <span class="hljs-literal">NULL</span>, wszString, wcslen(wszString), <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);</span><br><span class="line"><span class="hljs-keyword">char</span> *szAnsi= <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[ansiLen + <span class="hljs-number">1</span>];</span><br><span class="line">WideCharToMultiByte(CP_ACP, <span class="hljs-literal">NULL</span>, wszString, wcslen(wszString), szAnsi, ansiLen, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);</span><br><span class="line">szAnsi[ansiLen]= <span class="hljs-string">'\0'</span>;</span><br><span class="line"><span class="hljs-keyword">delete</span>[] wszString;</span><br><span class="line"><span class="hljs-keyword">return</span> szAnsi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此函数是将一个字符串，先从UTF-8转为UTF-16，再转为ASCII。</p><h4 id="MultiByteToWideChar"><a href="#MultiByteToWideChar" class="headerlink" title="MultiByteToWideChar"></a>MultiByteToWideChar</h4><p>此函数可将字符串映射到UTF-16(宽字符)字符串。字符串不一定来自多字节字符集。在这里，字符集或代码页我们都可以理解为编码映射表。<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">MultiByteToWideChar</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    _In_ UINT CodePage,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    _In_ DWORD dwFlags,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    _In_NLS_string_(cbMultiByte) LPCCH lpMultiByteStr,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    _In_ <span class="hljs-keyword">int</span> cbMultiByte,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    _Out_writes_to_opt_(cchWideChar,<span class="hljs-keyword">return</span>) LPWSTR lpWideCharStr,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    _In_ <span class="hljs-keyword">int</span> cchWideChar</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    )</span></span>;</span><br></pre></td></tr></table></figure><br>定义简化如下：<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">MultiByteToWideChar</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">UINT CodePage, </span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">DWORD dwFlags, </span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">LPCCH lpMultiByteStr, </span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">int</span> cbMultiByte, </span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">LPWSTR lpWideCharStr, </span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">int</span> cchWideChar</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">)</span></span>;</span><br></pre></td></tr></table></figure><br><em>CodePage</em>为指定执行转换的字符集。如果原字符串为ASCII通常选择CP_ACP，关于CP_ACP与CP_THREAD_ACP的区别可以自己了解。我们这里原字符串为UTF-8，因此选择CP_UTF8。数值表：</p><div class="table-container"><table><thead><tr><th>数值</th><th>说明   </th></tr></thead><tbody><tr><td>CP_ACP</td><td>Windows系统默认的ANSI代码页。 </td></tr><tr><td>CP_MACCP</td><td>Mac系统代码页。 </td></tr><tr><td>CP_ACP</td><td>OEM系统代码页。 </td></tr><tr><td>CP_SYMBOL</td><td>符号字符集。 </td></tr><tr><td>CP_THREAD_ACP</td><td>当前Windows线程的ANSI代码页。 </td></tr><tr><td>CP_UTF7</td><td>使用UTF-7。 </td></tr><tr><td>CP_UTF8</td><td>使用UTF-8。 </td></tr></tbody></table></div><p><em>dwFlags</em>设定转换类型。缺省值为MB_PRECOMPOSED，对于UTF-8必须为0或MB_ERR_INVALID_CHARS，此参数作用较小，数值表就不给出了。</p><p><em>lpMultiByteStr</em>指向一个要转换的字符串。</p><p><em>cbMultiByte</em>指定长度，如果lpMultiByteStr指向的字符串为空结束，此参数可设为-1。如果设为-1，函数将处理包括终止空字符在内的所有字符。我们可以用strlen来自行获得长度。</p><p><em>lpWideCharStr</em>为指向接收缓冲器的指针。</p><p><em>cchWideChar</em>为lpWideCharStr指示的缓冲器的大小(以字符为单位)。如果此值为0不使用lpWideCharStr缓冲区。</p><p><em>Return Value</em>即返回值，返回写入到缓冲器的字符数。如果cchWideChar为0则返回缓冲器所需大小(以字符为单位)。</p><p>我们第一次调用此函数时应将cchWideChar设为0，并记录函数返回值，第二次调用时将cchWideChar设为此值。</p><h4 id="WideCharToMultiByte"><a href="#WideCharToMultiByte" class="headerlink" title="WideCharToMultiByte"></a>WideCharToMultiByte</h4><p>与MultiByteToWideChar恰恰相反，但多两个参数，此函数可将UTF-16(宽字符)字符串映射到新字符串。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">WideCharToMultiByte</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">UINT CodePage, </span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">DWORD dwFlags, </span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">LPCWCH lpWideCharStr, </span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">int</span> cchWideChar, </span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">LPSTR lpMultiByteStr, </span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">int</span> cbMultiByte, </span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">LPCCH lpDefaultChar, </span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">LPBOOL lpUsedDefaultChar</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">)</span></span>;</span><br></pre></td></tr></table></figure><p><em>CodePage</em>为指定执行转换的字符集。可选数值与MultiByteToWideChar相同，我们这里选择CP_ACP。</p><p><em>dwFlags</em>设定转换类型。设为0即可。</p><p><em>lpWideCharStr</em>指向一个要转换的字符串。</p><p><em>cchWideChar</em>指定长度。对于宽字符，自行使用wcslen来获得。</p><p><em>lpMultiByteStr</em>为指向接收缓冲器的指针。</p><p><em>cbMultiByte</em>为lpMultiByteStr指示的缓冲器的大小(以字符为单位)。</p><p><em>lpDefaultChar</em>为指向另一个接收缓冲器的指针，如果某个字符不能在指定的代码页中表示将使用此缓冲器。我们不需要，设为NULL即可。</p><p><em>lpUsedDefaultChar</em>为一个指向BOOL变量的指针。如果使用了lpDefaultChar将被设为TRUE，否则为FALSE。我们也设为NULL即可。</p><p><em>Return Value</em>即返回值，与MultiByteToWideChar相类比。</p><p>调用两次，步骤也与MultiByteToWideChar相似。</p><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p>网上给的代码没有释放内存的语句，可能会造成内存泄露。</p><p><em>delete</em>语句使用过指针都知道，释放一个指针指向的内存。</p><p><em>delete[]</em>语句释放一个数组指针指向的内存。</p><p>如果想深入了解其中的原理，可以自行查阅。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这一节简单介绍了编码的知识和使用C++进行编码转换的代码。我们这个项目深入了解编码系统，所介绍的也不过是冰山一角。</p><p>现在大家已经可以自己写代码对网页进行简单分析了。下一节我打算介绍关于WinHTTP的内容和用途。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用C++开发一个图片爬虫 Ⅱ ：编码转换&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;我们上一节学习了获取网页的代码，那么大家可能会以为接下来就是分析网页了。但事实上，我们还需要先转换编码。我们都知道，C++编程常用的是ASCII编码，而网页大部分使用的是UTF-8编码。&lt;/p&gt;
&lt;p&gt;因此我们要先将获取后的网页转换成我们想要的编码，再去分析内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="项目" scheme="https://xciyang.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="颓废" scheme="https://xciyang.github.io/tags/%E9%A2%93%E5%BA%9F/"/>
    
      <category term="项目" scheme="https://xciyang.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="爬虫" scheme="https://xciyang.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>项目日记 - 开发图片爬虫 Ⅰ</title>
    <link href="https://xciyang.github.io/2019-05/26-spiking1/"/>
    <id>https://xciyang.github.io/2019-05/26-spiking1/</id>
    <published>2019-05-26T00:58:05.000Z</published>
    <updated>2019-12-09T12:30:52.091Z</updated>
    
    <content type="html"><![CDATA[<p>用C++开发一个图片爬虫 Ⅰ ：获取网页内容</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个项目很久前就开始写了，但一直没有很完善。最近想起来，打算重新完善这个项目。</p><p>本教程仅适用于C++。内容较为复杂，可以根据自己需要来阅读。</p><a id="more"></a><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>做一个项目，首先需要知道你的目标是什么。这个项目名为图片爬虫，当然是为了下载图片。</p><p>再具体一点，用户先给出一个网址，我们先保存网页，抓取网页上的图片链接和其他网址链接。然后保存每一张图片到用户设置的文件夹中。深入其他网址链接，循环这一步骤。</p><p>那么我们去爬一个图片网站，就可以找到很多好（<del>康</del>）看的图片了。</p><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>先了解爬虫的定义，如下：</p><blockquote><p>网络爬虫（英语：web crawler），也叫网络蜘蛛（spider），是一种用来自动浏览万维网的网络机器人。其目的一般为编纂网络索引。</p></blockquote><p>对于这个东西我还想补充一下，爬虫操作不当可能是违法的，但对于我们这些小项目来说，请求服务器资源的速度一般达不到攻击服务器的要求。爬虫有一个国际互联网界通行的道德规范，名叫robots协议，有兴趣可以去了解一下。我们就先不管那么多，还是技术更要紧些，不干扰网站正常运行就行了。</p><p>那么如何去开发呢？我们目的很明确，所以大概分为几个步骤。我制作了一个流程图来演示：<br><img src="/images/spiKing2.png" alt="项目流程图"></p><p>现在对每个步骤进行解释，先设置爬取的网站，这个很简单。第一个要实现的就是如何获取网页，关于这个我做一个较为详细的理论说明。</p><p>关于用C++实现获取网页内容，我所知有两种方法，使用Winsock或WinInet。相信大家对这两个东西一定有所了解，不了解的可以细读定义。</p><p>先大致了解Winsock的定义：</p><blockquote><p>Windows Sockets API (WSA), 简短记为Winsock, 是Windows的TCP/IP网络编程接口（API）。</p></blockquote><p>具体是什么可以再自行了解，我这个项目选择使用的是WinInet。</p><blockquote><p>WinInet（“Windows Internet”）API帮助程序员使用三个常见的Internet协议，这三个协议是用于World Wide Web万维网的超文本传输协议（HTTP：Hypertext Transfer Protocol）、文件传输协议（FTP：File Transfer Protocol）和另一个称为Gopher的文件传输协议。WinInet函数的语法与常用的Win32 API函数的语法类似，这使得使用这些协议就像使用本地硬盘上的文件一样容易。</p></blockquote><p>定义中已经说了，这个API非常容易使用，这也是我为什么选择使用它。</p><p>再补充一下，我最近又查阅到了第三种方法，使用WinHTTP。我会在以后的章节对它进行详细的说明。相比而言，它其实更适合对网页的操作。定义：</p><blockquote><p>Microsoft Windows HTTP Services(WinHTTP)为开发者提供了HTTP客户端应用程序编程接口(API)，用于通过HTTP协议向其他HTTP服务器发送请求。</p></blockquote><p>在官方有WinHTTP与WinInet的对比，如果用简短的话来说明他俩的关系，那就是：</p><blockquote><p>除了少数例外，WinInet是WinHTTP的超集。在两者之间进行选择时，应使用WinInet，除非您计划在需要模拟和会话隔离的服务或类似服务的进程中运行。</p></blockquote><p>如果还想了解更多WinInet与WinHTTP的区别，可以看<a href="https://docs.microsoft.com/zh-cn/windows/desktop/wininet/wininet-vs-winhttp" target="_blank" rel="noopener">官方英文文档</a>。</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>相信大家已经对这些东西都有了大致了解，那么就开始写代码了。输入网址的主程序代码就不给出了，我先放出获取页面的代码实例，是从网上找到并改编之后的。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;wininet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXBLOCKSIZE 1024 * 1024</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">downloadUrl</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *Url, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *FilePath)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">static</span> byte Temp[MAXBLOCKSIZE];</span><br><span class="line">HINTERNET hSession= InternetOpenA(<span class="hljs-string">"DownloadKit"</span>, INTERNET_OPEN_TYPE_PRECONFIG, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>), hOpenUrl= <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(hSession != <span class="hljs-literal">NULL</span>) &#123;</span><br><span class="line">hOpenUrl= InternetOpenUrlA(hSession, Url, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, INTERNET_FLAG_DONT_CACHE, <span class="hljs-literal">NULL</span>);</span><br><span class="line"><span class="hljs-keyword">if</span>(hOpenUrl == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">goto</span> fail;</span><br><span class="line">FILE *stream= fopen(FilePath, <span class="hljs-string">"wb"</span>);</span><br><span class="line">ULONG Number= <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(Number &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">InternetReadFile(hOpenUrl, Temp, MAXBLOCKSIZE, &amp;Number);</span><br><span class="line">fwrite(Temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>), Number, stream);</span><br><span class="line">&#125;</span><br><span class="line">fclose(stream);</span><br><span class="line"><span class="hljs-keyword">if</span>(hOpenUrl) InternetCloseHandle(hOpenUrl);</span><br><span class="line"><span class="hljs-keyword">if</span>(hSession) InternetCloseHandle(hSession);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">fail:</span><br><span class="line"><span class="hljs-keyword">if</span>(hOpenUrl) InternetCloseHandle(hOpenUrl);</span><br><span class="line"><span class="hljs-keyword">if</span>(hSession) InternetCloseHandle(hSession);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Internet Error\n"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先大致说明一下函数参数，Url为你想下载网页的网址，filePath为保存到电脑的路径。</p><p>你可以找一个网址，选一个存文件的路径，调用函数并编译，你会发现这段代码是无法通过编译的，因为还需要连接静态链接库。</p><p>如果使用Visual Studio，需要在函数之前加入以下这句，并且忽略编号为4996的警告。<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">"wininet.lib"</span>)</span></span><br></pre></td></tr></table></figure></p><p>如果使用MinGW，需要添加编译命令来/MinGW64/lib/libwininet.a文件。如果使用DevC++还可以通过项目属性来添加，这里不作细说。如果遇到了其他困难可以下方留言，我将会在第一时间解答。</p><h4 id="InternetOpenA"><a href="#InternetOpenA" class="headerlink" title="InternetOpenA"></a>InternetOpenA</h4><p>先来讲解InternetOpenA函数。这个是我头文件里的定义。如果你使用Unicode遍码就改成InternetOpenW，用法类似。<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INTERNETAPI_(HINTERNET) InternetOpenA(</span><br><span class="line">    _In_opt_ LPCSTR lpszAgent,</span><br><span class="line">    _In_ DWORD dwAccessType,</span><br><span class="line">    _In_opt_ LPCSTR lpszProxy,</span><br><span class="line">    _In_opt_ LPCSTR lpszProxyBypass,</span><br><span class="line">    _In_ DWORD dwFlags</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><br><em>lpszAgent</em>指向一个空结束的字符串，用来设置UserAgent。对于我们用处不大，可以随意设置。</p><p><em>dwAccessType</em>指定访问类型，用于是否使用代理或注册表配置。我们选择使用IE代理，如果想设置代理服务器则使用INTERNET_OPEN_TYPE_PROXY。数值表：</p><div class="table-container"><table><thead><tr><th>数值</th><th>说明   </th></tr></thead><tbody><tr><td>INTERNET_OPEN_TYPE_DIRECT</td><td>使用直接连接网络。</td></tr><tr><td>INTERNET_OPEN_TYPE_PRECONFIG</td><td>获取代理或直接从注册表中的配置，使用代理连接网络。</td></tr><tr><td>INTERNET_OPEN_TYPE_PRECONFIG_WITH_NO_AUTOPROXY</td><td>获取代理或直接从注册表中的配置，并防止启动Microsoft JScript或Internet设置（INS）文件的使用。 </td></tr><tr><td>INTERNET_OPEN_TYPE_PROXY</td><td>通过代理的请求，除非代理旁路列表中提供的名称解析绕过代理,在这种情况下，该功能的使用。</td></tr></tbody></table></div><p><em>lpszProxy</em>指向一个空结束的字符串，该字符串指定的代理服务器的名称，我们此参数应该设置为NULL。设置代理还要在这里深入研究，由于比较麻烦，我们先不去了解了。</p><p><em>lpszProxyBypass</em>指向一个空结束的字符串，该字符串指定的可选列表的主机名或IP地址。我们此参数也设置为NULL。</p><p><em>dwFlags</em>是设定一些要求的，值可以组合组合，我们设置为0。数值表：</p><div class="table-container"><table><thead><tr><th>数值</th><th>说明   </th></tr></thead><tbody><tr><td>INTERNET_FLAG_ASYNC</td><td>使异步请求处理的后裔从这个函数返回的句柄。</td></tr><tr><td>INTERNET_FLAG_FROM_CACHE</td><td>不进行网络请求，从缓存返回的所有实体，如果请求的项目不在缓存中，则返回一个合适的错误，如ERROR_FILE_NOT_FOUND。</td></tr><tr><td>INTERNET_FLAG_OFFLINE</td><td>同INTERNET_FLAG_FROM_CACHE。</td></tr></tbody></table></div><p><em>Return Value</em>即返回值是一个HINTERNET句柄，用于接下来的WinINet函数。计算机正常且函数参数规范的情况下，都能够成功返回。如果返回NULL就是失败了，那么请检查自己的参数。</p><h4 id="InternetOpenUrlA"><a href="#InternetOpenUrlA" class="headerlink" title="InternetOpenUrlA"></a>InternetOpenUrlA</h4><p>接下来就是用于打开网页的InternetOpenA函数了，如果使用Unicode编码请改为InternetOpenUrlW。</p><p>相比而言，这个函数参数比较多。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INTERNETAPI_(HINTERNET) InternetOpenUrlA(</span><br><span class="line">    _In_ HINTERNET hInternet,</span><br><span class="line">    _In_ LPCSTR lpszUrl,</span><br><span class="line">    _In_reads_opt_(dwHeadersLength) LPCSTR lpszHeaders,</span><br><span class="line">    _In_ DWORD dwHeadersLength,</span><br><span class="line">    _In_ DWORD dwFlags,</span><br><span class="line">    _In_opt_ DWORD_PTR dwContext</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><em>hInternet</em>为当前的Internet会话句柄，也就是我们刚刚使用InternetOpen 函数返回的句柄。</p><p><em>lpszUrl</em>指向一个空结束的字符串，用于指定读取的网址。非常容易理解。</p><p><em>lpszHeaders</em>指向一个空结束的字符串，指定发送到HTTP服务器的头信息。我们不必做过多了解，设为NULL即可。</p><p><em>dwHeadersLength</em>指定的长度，字符，额外的标头。对于我们说也没什么用，设为0即可。</p><p><em>dwFlags</em>设定一些要求，我们设置的INTERNET_FLAG_NO_CACHE，与INTERNET_FLAG_NO_CACHE_WRITE有相同作用。有较多数值，可以了解后选择其中一个。数值表：</p><div class="table-container"><table><thead><tr><th>数值</th><th>说明   </th></tr></thead><tbody><tr><td>INTERNET_FLAG_EXISTING_CONNECT</td><td>如果使用相同的必须属性创建会话，会尝试利用现有的InternetConnect对象。这只对FTP操作非常有用，因为FTP是唯一在同一会话中执行多种操作的协议。WinINet API 为每个由InternetOpen产生的HINTERNET句柄缓冲一个单独链接句柄。InternetOpenUrl使用此标志的HTTP和FTP连接。</td></tr><tr><td>INTERNET_FLAG_HYPERLINK</td><td>当决定何时从网络重载时，如果服务器没有返回 Expires time 和 LastModified，那么强制重载。</td></tr><tr><td>INTERNET_FLAG_IGNORE_CERT_CN_INVALID</td><td>停用检查从服务器对必须的主机名称返回的SSL/PCT-based证书。 WinINet函数使用简单的比较匹配主机名称和通配符的规则检查证书。</td></tr><tr><td>INTERNET_FLAG_IGNORE_CERT_DATE_INVALID</td><td>停用检查的SSL/PCT-based的证书的适当的有效日期。</td></tr><tr><td>INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP</td><td>禁用检测这中特殊的重定向。当使用此标志， WinINet 透明允许从HTTPS到HTTP URL的重定向。</td></tr><tr><td>INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS</td><td>禁用检测这中特殊的重定向。当使用此标志， WinINet 透明的允许的HTTP到HTTPS URL的重定向。</td></tr><tr><td>INTERNET_FLAG_KEEP_CONNECTION</td><td>如果可能的话，为连接使用保活语义。这个标志要求微软网络（ MSN ），NTLM和其他类型的身份验证。</td></tr><tr><td>INTERNET_FLAG_NEED_FILE</td><td>如果要创建的文件不能被缓存，创建临时文件。</td></tr><tr><td>INTERNET_FLAG_NO_AUTH</td><td>不试图自动验证。</td></tr><tr><td>INTERNET_FLAG_NO_AUTO_REDIRECT</td><td>不自动处理HttpSendRequest中的重定向。s</td></tr><tr><td>INTERNET_FLAG_NO_CACHE_WRITE</td><td>不添加返回实体到缓存。</td></tr><tr><td>INTERNET_FLAG_NO_COOKIES</td><td>不会自动添加的Cookie头到请求，并且不自动添加返回的cookie到cookie数据库。</td></tr><tr><td>INTERNET_FLAG_NO_UI</td><td>禁用Cookie的对话框。</td></tr><tr><td>INTERNET_FLAG_PASSIVE</td><td>使用被动FTP语义。InternetOpenUrl为FTP的文件和目录使用此标志。</td></tr><tr><td>INTERNET_FLAG_PRAGMA_NOCACHE</td><td>即使代理中存在缓存副本，也强制要求由源服务器返回。</td></tr><tr><td>INTERNET_FLAG_RAW_DATA</td><td>检索的Gopher目录信息时，传回的数据作为GOPHER_FIND_DATA结构，如果检索的FTP目录信息时，作为一个WIN32_FIND_DATA结构。如果此标志没有指定，或者请求通过CERN代理创建， InternetOpenUrl返回的HTML版本的目录。</td></tr><tr><td>INTERNET_FLAG_RELOAD</td><td>从原服务器强制下载所要求的文件，对象，或目录列表，而不是从缓存下载。</td></tr><tr><td>INTERNET_FLAG_RESYNCHRONIZE</td><td>重新加载的HTTP资源，如果资源在最后一次下载后已被修改。所有FTP和Gopher资源将被重载。</td></tr><tr><td>INTERNET_FLAG_SECURE</td><td>使用安全传输语义。这次传输使用安全套字节层/专用通信技术（的SSL / PCT ），这只有在HTTP请求时有意义。</td></tr></tbody></table></div><p><em>dwContext</em>为指向一个变量的指针，将随着返回的句柄，一起传递给回调函数。有兴趣可以自行查阅，我们设为NULL即可。</p><p><em>Return Value</em>即返回值，若成功连接则返回一个有效的HINTERNET句柄，如果失败将放回NULL。如果失败可以使用GetLastError检索特定的错误讯息。请调用InternetGetLastResponseInfo确定为什么对服务器的访问被拒绝，这些函数大家有兴趣可以查阅更多资料来了解。</p><h4 id="FILE"><a href="#FILE" class="headerlink" title="FILE"></a>FILE</h4><p>这一步就不作过多讲解了，只简单介绍这几个函数。</p><p>fopen用来打开文件，返回文件指针。<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">FILE * <span class="hljs-title">fopen</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * path, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * mode)</span></span>;</span><br></pre></td></tr></table></figure><br>fwrite用于向文件中写入一个数据块，可以看实际代码自行理解。<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">size_t</span> fwrite(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> * ptr, <span class="hljs-keyword">size_t</span> size, <span class="hljs-keyword">size_t</span> count, FILE * stream);</span><br></pre></td></tr></table></figure><br>fclose用于关闭一个流。<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fclose</span><span class="hljs-params">(FILE * stream)</span></span>;</span><br></pre></td></tr></table></figure></p><h4 id="InternetReadFile"><a href="#InternetReadFile" class="headerlink" title="InternetReadFile"></a>InternetReadFile</h4><p>InternetReadFile的官方定义为，从一个由InternetOpenUrl，FtpOpenFile或HttpOpenRequest函数打开的句柄中读取数据。我们使用它来将网页上的内容保存到一个字符数组中。</p><p>InternetReadFile函数每次获取的内容长度有限，所以应多次调用，直到全部获取完毕。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">BOOLAPI <span class="hljs-title">InternetReadFile</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    _In_ HINTERNET hFile,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    _Out_writes_bytes_(dwNumberOfBytesToRead) __out_data_source(NETWORK) LPVOID lpBuffer,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    _In_ DWORD dwNumberOfBytesToRead,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    _Out_ LPDWORD lpdwNumberOfBytesRead</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    )</span></span>;</span><br></pre></td></tr></table></figure><p><em>hFile</em>为InternetOpenUrl，FtpOpenFile或HttpOpenRequest函数返回的句柄。我们使用InternetOpenUrl获得的HINTERNET句柄。</p><p><em>lpBuffer</em>为指向缓冲器的指针。因此我们需要定义一个字符数组，然后将它作为参数。</p><p><em>dwNumberOfBytesToRead</em>为要读取的字节数。这个需要根据自己的网络情况，我使用的为1024 * 1024，也就是1M。</p><p><em>lpdwNumberOfBytesRead</em>为接收读取字节量的变量。我们用它来判断是否将网页内容全部获取完毕。</p><p><em>Return Value</em>即返回值，成功为TRUE，失败为FALSE。若失败可用GetLastError查看更多错误信息。</p><h4 id="InternetCloseHandle"><a href="#InternetCloseHandle" class="headerlink" title="InternetCloseHandle"></a>InternetCloseHandle</h4><p>到这，获取网页的代码基本完工了。但做事应善始善终，那些句柄占用的资源还需要释放。InternetCloseHandle函数用来关闭一个Internet句柄。</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">BOOLAPI <span class="hljs-title">InternetCloseHandle</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    _In_ HINTERNET hInternet</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">    )</span></span>;</span><br></pre></td></tr></table></figure><p><em>hInternet</em>为要关闭的句柄。我们要依次关闭那俩个HINTERNET句柄。</p><p><em>Return Value</em>即返回值，成功为TRUE，失败为FALSE。若失败可用GetLastError查看更多错误信息。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>其实获取网页内容的代码是非常简单的，然而其中还蕴含着许许多多的知识。这段代码不仅可以获取网页，也可以用来获取图片或其他格式的文件。</p><p>这段函数下载后一般为Unicode编码文件，下一节我将讲解如何将它转换为ASCII编码。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用C++开发一个图片爬虫 Ⅰ ：获取网页内容&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这个项目很久前就开始写了，但一直没有很完善。最近想起来，打算重新完善这个项目。&lt;/p&gt;
&lt;p&gt;本教程仅适用于C++。内容较为复杂，可以根据自己需要来阅读。&lt;/p&gt;
    
    </summary>
    
    
      <category term="项目" scheme="https://xciyang.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Cpp" scheme="https://xciyang.github.io/tags/Cpp/"/>
    
      <category term="颓废" scheme="https://xciyang.github.io/tags/%E9%A2%93%E5%BA%9F/"/>
    
      <category term="项目" scheme="https://xciyang.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="爬虫" scheme="https://xciyang.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
